var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.5","fields":["title","body"],"fieldVectors":[["title/classes/DefaultSender.html",[0,0.672,1,0.855]],["body/classes/DefaultSender.html",[0,0.937,1,1.546,2,1.169,3,1.301,4,0.446,5,1.488,6,0.931,7,2.397,8,1.708,9,1.882,10,0.888,11,1.488,12,1.301,13,2.08,14,2.442,15,2.281,16,1.769,17,2.327,18,2.08,19,2.421,20,2.039,21,2.039,22,1.769,23,1.169,24,2.757,25,3.99,26,2.904,27,2.757,28,1.634,29,2.039,30,2.08,31,0.092,32,1.301,33,1.853,34,1.301,35,1.973,36,0.937,37,1.623,38,2.757,39,2.757,40,1.973,41,3.441,42,0.931,43,2.757,44,1.634,45,1.034,46,0.813,47,1.973,48,2.757,49,2.397,50,2.08,51,2.08,52,2.039,53,2.364,54,2.281,55,1.973,56,0.813,57,2.757,58,1.634,59,2.145,60,1.973,61,2.757,62,2.039,63,1.499,64,0.931,65,1.169,66,0.74,67,1.634,68,2.281,69,1.634,70,1.973,71,1.973,72,0.446,73,1.973,74,0.931,75,1.973,76,1.973,77,1.973,78,1.973,79,1.634,80,1.169,81,1.973,82,1.973,83,0.74,84,1.973,85,1.973,86,1.973,87,1.973,88,1.973,89,1.973,90,0.056,91,0.056]],["title/interfaces/InfluxMetricReporterOptions.html",[92,0.515,93,1.075]],["body/interfaces/InfluxMetricReporterOptions.html",[0,0.472,2,0.575,3,0.755,4,0.219,6,0.458,8,1.119,9,0.964,10,0.895,12,0.458,13,1.208,14,1.851,16,0.964,17,0.575,19,1.211,20,0.575,21,0.575,22,1.333,23,0.575,28,0.575,29,2.108,31,0.093,32,0.755,33,1.789,34,0.755,36,0.699,37,0.458,42,1.613,44,0.575,45,1.311,46,1.095,52,1.555,53,2.412,54,1.919,56,0.472,58,0.575,59,2.247,62,1.674,63,1.119,64,1.119,65,0.575,66,1.436,67,1.674,68,2.268,69,2.247,72,0.462,74,1.869,79,1.406,80,1.406,83,0.985,90,0.049,91,0.033,92,0.639,93,1.238,94,0.575,95,1.98,96,1.789,97,2.443,98,2.225,99,2.108,100,1.252,101,0.949,102,1.542,103,1.406,104,2.255,105,2.255,106,2.132,107,2.132,108,2.132,109,1.406,110,2.58,111,1.542,112,0.949,113,1.406,114,1.208,115,0.732,116,1.542,117,2.255,118,1.208,119,1.674,120,1.542,121,0.364,122,0.732,123,1.208,124,0.575,125,0.732,126,2.255,127,2.443,128,0.732,129,0.732,130,0.732,131,1.542,132,1.208,133,0.732,134,1.789,135,0.732,136,1.41,137,0.575,138,1.542,139,0.949,140,2.516,141,1.208,142,1.211,143,0.732,144,0.732,145,0.575,146,0.575,147,0.732,148,0.732,149,0.575,150,0.732,151,0.732,152,1.542,153,0.732,154,0.732,155,0.732,156,2.255,157,1.542,158,0.732,159,1.542,160,1.208,161,0.732,162,0.732,163,1.98,164,0.732,165,0.732,166,0.732,167,0.732,168,2.727,169,1.208,170,1.208,171,0.732,172,0.732,173,0.949,174,1.406,175,1.208,176,0.732,177,2.58,178,0.732,179,0.732,180,0.732,181,0.732,182,0.732,183,0.732,184,0.732,185,0.732,186,0.732,187,1.542,188,0.575,189,1.41,190,0.732,191,1.208,192,1.98,193,2.58,194,1.98,195,0.732,196,1.977,197,0.732,198,1.789,199,1.98,200,1.98,201,1.98,202,0.732,203,1.208,204,0.732,205,0.732,206,0.732,207,0.732,208,1.208,209,1.208,210,0.732,211,0.732,212,0.732,213,1.208,214,1.208,215,1.208,216,1.208,217,1.208,218,1.208,219,1.208,220,1.208,221,1.208,222,1.208,223,1.208,224,1.208,225,1.208,226,1.208,227,1.208,228,1.208,229,1.208,230,1.208,231,1.208,232,1.208,233,0.732,234,1.208,235,0.732,236,0.732,237,1.208,238,0.732,239,1.208,240,0.732,241,1.208,242,0.732,243,1.208,244,0.732,245,0.732,246,1.208,247,0.732,248,0.732,249,0.732,250,0.732,251,0.732,252,0.732,253,0.732,254,1.208,255,0.732,256,1.542,257,1.208,258,0.732]],["title/interfaces/Sender.html",[10,0.515,92,0.515]],["body/interfaces/Sender.html",[0,0.469,2,0.57,3,0.75,4,0.217,6,0.454,8,0.958,9,1.232,10,0.877,12,0.454,14,1.845,16,0.75,17,0.942,18,1.199,19,1.204,20,1.398,21,1.398,22,1.522,23,0.57,26,1.532,28,0.57,29,2.064,30,0.726,31,0.093,32,0.958,33,1.767,34,0.75,36,0.599,37,0.75,42,1.609,44,0.942,45,1.279,46,1.079,52,1.764,53,2.434,54,2.064,56,0.469,58,0.942,59,2.282,62,1.845,63,1.113,64,1.113,65,0.57,66,1.42,67,1.667,68,2.263,69,2.243,72,0.459,74,1.866,79,1.398,80,1.398,83,0.98,90,0.048,91,0.033,92,0.673,93,1.113,94,0.57,95,1.78,96,1.532,97,2.122,98,2.137,99,2.021,100,1.168,101,0.57,102,1.199,103,1.398,104,2.246,105,2.246,106,2.122,107,2.122,108,2.122,109,1.398,110,2.572,111,1.532,112,0.942,113,1.398,114,1.199,115,0.726,116,1.532,117,2.246,118,1.199,119,1.667,120,1.532,121,0.361,122,1.199,123,1.532,124,0.942,125,1.199,126,2.348,127,2.435,128,0.726,129,0.726,130,0.726,131,1.532,132,1.199,133,0.726,134,1.78,135,0.726,136,1.404,137,0.57,138,1.532,139,0.942,140,2.509,141,1.199,142,1.204,143,0.726,144,0.726,145,0.57,146,0.57,147,0.726,148,0.726,149,0.57,150,0.726,151,0.726,152,1.532,153,0.726,154,0.726,155,0.726,156,2.246,157,1.532,158,0.726,159,1.532,160,1.199,161,0.726,162,0.726,163,1.971,164,0.726,165,0.726,166,0.726,167,0.726,168,2.721,169,1.199,170,1.199,171,0.726,172,0.726,173,0.942,174,1.398,175,1.199,176,0.726,177,2.572,178,0.726,179,0.726,180,0.726,181,0.726,182,0.726,183,0.726,184,0.726,185,0.726,186,0.726,187,1.532,188,0.57,189,1.404,190,0.726,191,1.199,192,1.971,193,2.572,194,1.971,195,0.726,196,1.971,197,0.726,198,1.78,199,1.971,200,1.971,201,1.971,202,0.726,203,1.199,204,0.726,205,0.726,206,0.726,207,0.726,208,1.199,209,1.199,210,0.726,211,0.726,212,0.726,213,1.199,214,1.199,215,1.199,216,1.199,217,1.199,218,1.199,219,1.199,220,1.199,221,1.199,222,1.199,223,1.199,224,1.199,225,1.199,226,1.199,227,1.199,228,1.199,229,1.199,230,1.199,231,1.199,232,1.199,233,0.726,234,1.199,235,0.726,236,0.726,237,1.199,238,0.726,239,1.199,240,0.726,241,1.199,242,0.726,243,1.199,244,0.726,245,0.726,246,1.199,247,0.726,248,0.726,249,0.726,250,0.726,251,0.726,252,0.726,253,0.726,254,1.199,255,0.726,256,1.532,257,1.199,258,0.726,259,0.962,260,0.962,261,0.962]],["title/changelog.html",[56,0.571,262,1.148,263,1.462]],["body/changelog.html",[1,0.742,4,0.719,6,0.933,7,1.492,8,1.501,10,0.447,15,2.396,22,1.303,31,0.077,32,0.933,34,0.933,36,0.583,42,1.625,45,1.359,46,0.814,50,1.492,51,1.492,72,0.447,83,0.742,90,0.057,91,0.065,92,0.447,98,1.172,99,1.637,100,1.569,101,1.172,113,1.172,121,1.547,124,1.172,142,1.172,146,1.172,149,2.536,174,1.172,188,1.172,189,1.501,196,1.172,263,2.401,264,1.978,265,3.182,266,1.637,267,1.978,268,1.978,269,1.978,270,1.978,271,1.978,272,1.492,273,1.978,274,1.978,275,3.444,276,3.754,277,1.978,278,1.978,279,1.978,280,1.978,281,1.978,282,3.182,283,4.155,284,2.083,285,2.598,286,1.978,287,3.992,288,2.283,289,1.978,290,1.978,291,1.978,292,3.444,293,3.444,294,2.083,295,2.762,296,2.762,297,2.762,298,1.978,299,3.754,300,1.978,301,1.978,302,3.182,303,2.762,304,1.978,305,1.978,306,1.978,307,3.623,308,3.182,309,3.182,310,1.978,311,1.978,312,1.978,313,2.762,314,1.978,315,1.978,316,2.762,317,3.623,318,1.978,319,1.978,320,3.216,321,1.978,322,1.978,323,1.978,324,1.978,325,1.625,326,1.978,327,1.978,328,1.978,329,1.978,330,1.978,331,1.978,332,2.762,333,2.762,334,2.762,335,1.978,336,1.978,337,1.978,338,1.978,339,1.978,340,2.762,341,1.978,342,1.978,343,2.762,344,1.978,345,1.978,346,1.978,347,1.978,348,3.182,349,1.978,350,3.182,351,1.978,352,1.978,353,1.978,354,3.852,355,1.978,356,1.978,357,1.978,358,1.978,359,1.978,360,1.978,361,1.978,362,1.978,363,1.978,364,1.978,365,1.978,366,1.978,367,1.978,368,2.762,369,1.978,370,1.978,371,1.978,372,1.978,373,1.978,374,1.978,375,2.762,376,1.978,377,1.978,378,1.978,379,1.978,380,1.492,381,1.637,382,1.978,383,1.172,384,1.492,385,1.978,386,1.978,387,1.978,388,1.978,389,1.978,390,1.978,391,1.978,392,0.933]],["title/coverage.html",[392,1.435]],["body/coverage.html",[0,1.119,1,1.216,4,0.733,5,2.446,10,0.733,31,0.088,33,1.529,66,1.216,72,0.733,90,0.078,91,0.078,92,0.858,93,1.529,94,2.384,266,1.921,392,1.529,393,3.242,394,2.446,395,4.149,396,3.242,397,3.242,398,3.242,399,3.242,400,2.446,401,2.446]],["title/dependencies.html",[288,1.613,402,1.938]],["body/dependencies.html",[3,1.584,31,0.088,36,0.99,46,0.99,64,1.584,90,0.079,91,0.079,103,1.989,121,1.26,284,2.533,288,1.989,403,3.357,404,3.357,405,3.357,406,3.357]],["title/index.html",[12,0.914,56,0.571,262,1.148]],["body/index.html",[1,0.981,9,1.726,10,0.752,11,2.51,15,1.549,16,1.233,31,0.091,36,1.173,37,1.233,45,1.373,46,1.079,49,1.973,63,1.57,66,1.373,72,0.827,74,1.877,83,1.248,90,0.068,91,0.068,100,1.248,109,2.169,112,1.549,119,1.972,121,1.493,137,1.549,139,1.549,173,1.549,189,1.233,272,1.973,285,1.973,294,1.973,325,1.57,380,1.973,383,1.549,384,1.973,407,2.615,408,2.615,409,3.328,410,1.549,411,2.615,412,2.615,413,3.328,414,2.615,415,2.615,416,3.328,417,2.615,418,2.615,419,2.615,420,2.615,421,2.615,422,3.328,423,2.615,424,3.328,425,2.615,426,2.615,427,2.615,428,2.615,429,2.615,430,2.615,431,2.615,432,2.615,433,2.615,434,2.615,435,2.615,436,2.615,437,2.615,438,2.615,439,4.132,440,2.615,441,4.067,442,2.615,443,3.978,444,2.615,445,2.615,446,2.615,447,2.615,448,2.615]],["title/license.html",[56,0.571,262,1.148,381,1.148]],["body/license.html",[4,0.656,31,0.073,90,0.073,91,0.073,100,1.333,266,1.72,320,2.19,381,1.72,383,1.72,449,3.838,450,2.903,451,3.552,452,2.903,453,2.903,454,2.903,455,2.903,456,3.552,457,2.903,458,3.999,459,4.3,460,2.903,461,3.552,462,3.838,463,2.903,464,3.838,465,3.552,466,2.903,467,2.903,468,2.903,469,2.903,470,2.903,471,2.903,472,2.903,473,2.903,474,2.903,475,2.903,476,2.903,477,2.903,478,2.903,479,2.903,480,3.552,481,3.552,482,2.903,483,2.903,484,2.903,485,3.552,486,2.903,487,2.903,488,2.903,489,2.903,490,2.903,491,2.903,492,2.903,493,2.903,494,2.903,495,2.903,496,2.903,497,2.903,498,2.903,499,2.903,500,2.903,501,2.903,502,2.903,503,2.903,504,2.903,505,2.903,506,2.903,507,2.903,508,2.903]],["title/modules.html",[410,1.803]],["body/modules.html",[31,0.081,90,0.081,91,0.081,410,2.054]],["title/overview.html",[509,2.295]],["body/overview.html",[0,1.013,31,0.08,90,0.08,91,0.08,92,0.777,509,2.592,510,3.925]],["title/unit-test.html",[136,1.162,325,1.162]],["body/unit-test.html",[4,0.767,31,0.08,72,0.767,90,0.08,91,0.08,136,1.6,145,2.01,325,1.6,392,1.6,394,2.559,400,2.559,401,2.559,511,3.393,512,3.393]]],"invertedIndex":[["",{"_index":31,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"unit-test.html":{}}}],["0",{"_index":83,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"index.html":{}}}],["0.5.9",{"_index":406,"title":{},"body":{"dependencies.html":{}}}],["01",{"_index":350,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":377,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":282,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":368,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":354,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":316,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":317,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":332,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":139,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["1.0.0",{"_index":376,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":374,"title":{},"body":{"changelog.html":{}}}],["1.0.2",{"_index":373,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":367,"title":{},"body":{"changelog.html":{}}}],["1.1.1",{"_index":366,"title":{},"body":{"changelog.html":{}}}],["1.1.2",{"_index":363,"title":{},"body":{"changelog.html":{}}}],["1.13.0",{"_index":405,"title":{},"body":{"dependencies.html":{}}}],["1.2.0",{"_index":360,"title":{},"body":{"changelog.html":{}}}],["1.2.1",{"_index":358,"title":{},"body":{"changelog.html":{}}}],["1.2.2",{"_index":356,"title":{},"body":{"changelog.html":{}}}],["1.2.3",{"_index":353,"title":{},"body":{"changelog.html":{}}}],["1.2.4",{"_index":352,"title":{},"body":{"changelog.html":{}}}],["1.2.5",{"_index":349,"title":{},"body":{"changelog.html":{}}}],["1.3.0",{"_index":346,"title":{},"body":{"changelog.html":{}}}],["1.4.0",{"_index":342,"title":{},"body":{"changelog.html":{}}}],["1.4.1",{"_index":337,"title":{},"body":{"changelog.html":{}}}],["1.4.2",{"_index":331,"title":{},"body":{"changelog.html":{}}}],["1.4.3",{"_index":326,"title":{},"body":{"changelog.html":{}}}],["1.4.4",{"_index":319,"title":{},"body":{"changelog.html":{}}}],["1.4.5",{"_index":315,"title":{},"body":{"changelog.html":{}}}],["1.5.0",{"_index":298,"title":{},"body":{"changelog.html":{}}}],["10",{"_index":299,"title":{},"body":{"changelog.html":{}}}],["100",{"_index":395,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":135,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["11",{"_index":276,"title":{},"body":{"changelog.html":{}}}],["15/15",{"_index":397,"title":{},"body":{"coverage.html":{}}}],["19",{"_index":327,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":510,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":281,"title":{},"body":{"changelog.html":{}}}],["2.1.0",{"_index":274,"title":{},"body":{"changelog.html":{}}}],["2.6.1",{"_index":403,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":321,"title":{},"body":{"changelog.html":{}}}],["2017",{"_index":320,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["2018",{"_index":275,"title":{},"body":{"changelog.html":{}}}],["21",{"_index":277,"title":{},"body":{"changelog.html":{}}}],["26",{"_index":343,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":333,"title":{},"body":{"changelog.html":{}}}],["3/3",{"_index":398,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":369,"title":{},"body":{"changelog.html":{}}}],["31",{"_index":378,"title":{},"body":{"changelog.html":{}}}],["4/4",{"_index":399,"title":{},"body":{"coverage.html":{}}}],["5.0.7",{"_index":404,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":286,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":328,"title":{},"body":{"changelog.html":{}}}],["8/8",{"_index":396,"title":{},"body":{"coverage.html":{}}}],["8086",{"_index":426,"title":{},"body":{"index.html":{}}}],["9",{"_index":329,"title":{},"body":{"changelog.html":{}}}],["abov",{"_index":479,"title":{},"body":{"license.html":{}}}],["abstract",{"_index":122,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["action",{"_index":502,"title":{},"body":{"license.html":{}}}],["ad",{"_index":283,"title":{},"body":{"changelog.html":{}}}],["adapt",{"_index":290,"title":{},"body":{"changelog.html":{}}}],["adher",{"_index":270,"title":{},"body":{"changelog.html":{}}}],["adjust",{"_index":371,"title":{},"body":{"changelog.html":{}}}],["admin",{"_index":422,"title":{},"body":{"index.html":{}}}],["allow",{"_index":278,"title":{},"body":{"changelog.html":{}}}],["and/or",{"_index":472,"title":{},"body":{"license.html":{}}}],["aris",{"_index":506,"title":{},"body":{"license.html":{}}}],["arr",{"_index":81,"title":{},"body":{"classes/DefaultSender.html":{}}}],["array",{"_index":175,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["associ",{"_index":460,"title":{},"body":{"license.html":{}}}],["async",{"_index":103,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"dependencies.html":{}}}],["async.asyncqueu",{"_index":132,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["async.queue((task",{"_index":154,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["author",{"_index":495,"title":{},"body":{"license.html":{}}}],["await",{"_index":170,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["b",{"_index":435,"title":{},"body":{"index.html":{}}}],["base",{"_index":268,"title":{},"body":{"changelog.html":{}}}],["basic",{"_index":384,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["befor",{"_index":51,"title":{},"body":{"classes/DefaultSender.html":{},"changelog.html":{}}}],["boolean",{"_index":41,"title":{},"body":{"classes/DefaultSender.html":{}}}],["branch",{"_index":511,"title":{},"body":{"unit-test.html":{}}}],["bug",{"_index":334,"title":{},"body":{"changelog.html":{}}}],["build",{"_index":189,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"index.html":{}}}],["buildrun",{"_index":442,"title":{},"body":{"index.html":{}}}],["c",{"_index":450,"title":{},"body":{"license.html":{}}}],["callback",{"_index":157,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["catch((reason",{"_index":184,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["certain",{"_index":341,"title":{},"body":{"changelog.html":{}}}],["chai",{"_index":386,"title":{},"body":{"changelog.html":{}}}],["chang",{"_index":149,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["changelog",{"_index":263,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["charg",{"_index":455,"title":{},"body":{"license.html":{}}}],["check",{"_index":365,"title":{},"body":{"changelog.html":{}}}],["ci",{"_index":293,"title":{},"body":{"changelog.html":{}}}],["claim",{"_index":498,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/DefaultSender.html":{}},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"coverage.html":{},"overview.html":{}}}],["clb",{"_index":155,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["client",{"_index":37,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["clock",{"_index":104,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["code",{"_index":391,"title":{},"body":{"changelog.html":{}}}],["commit",{"_index":379,"title":{},"body":{"changelog.html":{}}}],["common",{"_index":150,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["compil",{"_index":294,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["compodoc",{"_index":310,"title":{},"body":{"changelog.html":{}}}],["compon",{"_index":301,"title":{},"body":{"changelog.html":{}}}],["compos",{"_index":441,"title":{},"body":{"index.html":{}}}],["condit",{"_index":478,"title":{},"body":{"license.html":{}}}],["config",{"_index":15,"title":{},"body":{"classes/DefaultSender.html":{},"changelog.html":{},"index.html":{}}}],["configur",{"_index":38,"title":{},"body":{"classes/DefaultSender.html":{}}}],["connect",{"_index":508,"title":{},"body":{"license.html":{}}}],["consol",{"_index":133,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["const",{"_index":74,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["constructor",{"_index":23,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["constructor(config",{"_index":24,"title":{},"body":{"classes/DefaultSender.html":{}}}],["contract",{"_index":503,"title":{},"body":{"license.html":{}}}],["copi",{"_index":458,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":449,"title":{},"body":{"license.html":{}}}],["counter",{"_index":105,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["counter.getcount",{"_index":191,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["coverag",{"_index":392,"title":{"coverage.html":{}},"body":{"changelog.html":{},"coverage.html":{},"unit-test.html":{}}}],["creat",{"_index":28,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["ctx",{"_index":177,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["ctx.date",{"_index":201,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["current",{"_index":144,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["damag",{"_index":499,"title":{},"body":{"license.html":{}}}],["data",{"_index":52,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["databas",{"_index":49,"title":{},"body":{"classes/DefaultSender.html":{},"index.html":{}}}],["date",{"_index":174,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["db",{"_index":16,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["dbconfig",{"_index":420,"title":{},"body":{"index.html":{}}}],["deal",{"_index":461,"title":{},"body":{"license.html":{}}}],["default",{"_index":7,"title":{},"body":{"classes/DefaultSender.html":{},"changelog.html":{}}}],["defaultsend",{"_index":1,"title":{"classes/DefaultSender.html":{}},"body":{"classes/DefaultSender.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["defaultsender(dbconfig",{"_index":427,"title":{},"body":{"index.html":{}}}],["defin",{"_index":26,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/Sender.html":{}}}],["depend",{"_index":288,"title":{"dependencies.html":{}},"body":{"changelog.html":{},"dependencies.html":{}}}],["descript",{"_index":6,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["determin",{"_index":143,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["dev",{"_index":437,"title":{},"body":{"index.html":{}}}],["differ",{"_index":438,"title":{},"body":{"index.html":{}}}],["distribut",{"_index":470,"title":{},"body":{"license.html":{}}}],["docker",{"_index":439,"title":{},"body":{"index.html":{}}}],["document",{"_index":266,"title":{},"body":{"changelog.html":{},"coverage.html":{},"license.html":{}}}],["don't",{"_index":344,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":166,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["editorconfig",{"_index":370,"title":{},"body":{"changelog.html":{}}}],["ensur",{"_index":48,"title":{},"body":{"classes/DefaultSender.html":{}}}],["error",{"_index":101,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["error(`error",{"_index":185,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["es2017",{"_index":296,"title":{},"body":{"changelog.html":{}}}],["es6",{"_index":297,"title":{},"body":{"changelog.html":{}}}],["event",{"_index":494,"title":{},"body":{"license.html":{}}}],["exampl",{"_index":11,"title":{},"body":{"classes/DefaultSender.html":{},"index.html":{}}}],["exist",{"_index":50,"title":{},"body":{"classes/DefaultSender.html":{},"changelog.html":{}}}],["export",{"_index":67,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["express",{"_index":487,"title":{},"body":{"license.html":{}}}],["extend",{"_index":95,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fals",{"_index":43,"title":{},"body":{"classes/DefaultSender.html":{}}}],["few",{"_index":433,"title":{},"body":{"index.html":{}}}],["field",{"_index":193,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fieldnameprefix",{"_index":194,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}count",{"_index":198,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}m15_r",{"_index":237,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}m1_r",{"_index":239,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}m5_r",{"_index":241,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}max",{"_index":213,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}mean",{"_index":215,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}mean_r",{"_index":243,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}min",{"_index":217,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p50",{"_index":219,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p75",{"_index":221,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p95",{"_index":223,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p98",{"_index":225,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p99",{"_index":227,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p999",{"_index":229,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}stddev",{"_index":231,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}valu",{"_index":206,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"coverage.html":{},"license.html":{},"unit-test.html":{}}}],["fit",{"_index":490,"title":{},"body":{"license.html":{}}}],["fix",{"_index":302,"title":{},"body":{"changelog.html":{}}}],["follow",{"_index":477,"title":{},"body":{"license.html":{}}}],["format",{"_index":267,"title":{},"body":{"changelog.html":{}}}],["free",{"_index":454,"title":{},"body":{"license.html":{}}}],["function",{"_index":145,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"unit-test.html":{}}}],["furnish",{"_index":475,"title":{},"body":{"license.html":{}}}],["gaug",{"_index":106,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["gauge.getvalu",{"_index":203,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["get",{"_index":56,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["getfieldnameprefix(metr",{"_index":255,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["getlog",{"_index":162,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["getmeasurementname(metr",{"_index":258,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["given",{"_index":126,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["grant",{"_index":453,"title":{},"body":{"license.html":{}}}],["group",{"_index":362,"title":{},"body":{"changelog.html":{}}}],["handleresult",{"_index":176,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["herebi",{"_index":452,"title":{},"body":{"license.html":{}}}],["histogram",{"_index":107,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["histogram.getcount",{"_index":208,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["histogram.getsnapshot",{"_index":210,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["holder",{"_index":496,"title":{},"body":{"license.html":{}}}],["homepag",{"_index":304,"title":{},"body":{"changelog.html":{}}}],["host",{"_index":424,"title":{},"body":{"index.html":{}}}],["https://github.com/nod",{"_index":417,"title":{},"body":{"index.html":{}}}],["https://github.com/rstiller/inspector",{"_index":279,"title":{},"body":{"changelog.html":{}}}],["iclusterconfig",{"_index":25,"title":{},"body":{"classes/DefaultSender.html":{}}}],["identifi",{"_index":393,"title":{},"body":{"coverage.html":{}}}],["imag",{"_index":440,"title":{},"body":{"index.html":{}}}],["implement",{"_index":8,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["impli",{"_index":488,"title":{},"body":{"license.html":{}}}],["import",{"_index":63,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["includ",{"_index":464,"title":{},"body":{"license.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["indic",{"_index":44,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["influx",{"_index":36,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"dependencies.html":{},"index.html":{}}}],["influx/blob/master/src/index.ts#l80",{"_index":419,"title":{},"body":{"index.html":{}}}],["influx/issues/1",{"_index":280,"title":{},"body":{"changelog.html":{}}}],["influx/nod",{"_index":418,"title":{},"body":{"index.html":{}}}],["influxdb",{"_index":9,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["influxdb(config",{"_index":73,"title":{},"body":{"classes/DefaultSender.html":{}}}],["influxmetricreport",{"_index":66,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"coverage.html":{},"index.html":{}}}],["influxmetricreporteropt",{"_index":93,"title":{"interfaces/InfluxMetricReporterOptions.html":{}},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"coverage.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["init",{"_index":20,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["initi",{"_index":124,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["inspector",{"_index":121,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"dependencies.html":{},"index.html":{}}}],["instal",{"_index":413,"title":{},"body":{"index.html":{}}}],["instanc",{"_index":29,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["instead",{"_index":311,"title":{},"body":{"changelog.html":{}}}],["interfac",{"_index":92,"title":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"coverage.html":{},"overview.html":{}}}],["interv",{"_index":141,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["introduc",{"_index":338,"title":{},"body":{"changelog.html":{}}}],["ipoint",{"_index":59,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["isnan(valu",{"_index":192,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["isreadi",{"_index":21,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["it'",{"_index":148,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["jenkin",{"_index":388,"title":{},"body":{"changelog.html":{}}}],["jenkinsfil",{"_index":314,"title":{},"body":{"changelog.html":{}}}],["jsdoc",{"_index":300,"title":{},"body":{"changelog.html":{}}}],["keep",{"_index":269,"title":{},"body":{"changelog.html":{}}}],["kind",{"_index":486,"title":{},"body":{"license.html":{}}}],["last",{"_index":335,"title":{},"body":{"changelog.html":{}}}],["liabil",{"_index":500,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":497,"title":{},"body":{"license.html":{}}}],["lib/metrics/defaultsender.t",{"_index":5,"title":{},"body":{"classes/DefaultSender.html":{},"coverage.html":{}}}],["lib/metrics/defaultsender.ts:22",{"_index":40,"title":{},"body":{"classes/DefaultSender.html":{}}}],["lib/metrics/defaultsender.ts:30",{"_index":35,"title":{},"body":{"classes/DefaultSender.html":{}}}],["lib/metrics/defaultsender.ts:38",{"_index":27,"title":{},"body":{"classes/DefaultSender.html":{}}}],["lib/metrics/defaultsender.ts:56",{"_index":47,"title":{},"body":{"classes/DefaultSender.html":{}}}],["lib/metrics/defaultsender.ts:74",{"_index":55,"title":{},"body":{"classes/DefaultSender.html":{}}}],["lib/metrics/defaultsender.ts:84",{"_index":60,"title":{},"body":{"classes/DefaultSender.html":{}}}],["lib/metrics/influxmetricreporter.t",{"_index":94,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"coverage.html":{}}}],["lib/metrics/influxmetricreporter.ts:42",{"_index":260,"title":{},"body":{"interfaces/Sender.html":{}}}],["lib/metrics/influxmetricreporter.ts:50",{"_index":259,"title":{},"body":{"interfaces/Sender.html":{}}}],["lib/metrics/influxmetricreporter.ts:59",{"_index":261,"title":{},"body":{"interfaces/Sender.html":{}}}],["librari",{"_index":407,"title":{},"body":{"index.html":{}}}],["licens",{"_index":381,"title":{"license.html":{}},"body":{"changelog.html":{},"license.html":{}}}],["limit",{"_index":465,"title":{},"body":{"license.html":{}}}],["line",{"_index":512,"title":{},"body":{"unit-test.html":{}}}],["link",{"_index":127,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["lint",{"_index":303,"title":{},"body":{"changelog.html":{}}}],["local",{"_index":436,"title":{},"body":{"index.html":{}}}],["log",{"_index":97,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["logger",{"_index":98,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["logmetadata",{"_index":130,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["made",{"_index":408,"title":{},"body":{"index.html":{}}}],["map",{"_index":64,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"dependencies.html":{}}}],["match",{"_index":91,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"unit-test.html":{}}}],["meant",{"_index":411,"title":{},"body":{"index.html":{}}}],["measur",{"_index":196,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["memberof",{"_index":68,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["merchant",{"_index":489,"title":{},"body":{"license.html":{}}}],["merg",{"_index":468,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":129,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["meter",{"_index":108,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["meter.getcount",{"_index":234,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["method",{"_index":18,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/Sender.html":{}}}],["metric",{"_index":46,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"dependencies.html":{},"index.html":{}}}],["metric.getgroup",{"_index":256,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["metric.getnam",{"_index":257,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["metriclogg",{"_index":291,"title":{},"body":{"changelog.html":{}}}],["metricregistri",{"_index":109,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["metrics@v1.11.0",{"_index":306,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.13.0",{"_index":289,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.3.0",{"_index":372,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.4.2",{"_index":361,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.5.0",{"_index":359,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.5.1",{"_index":357,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.5.2",{"_index":351,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.5.4",{"_index":347,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.7.0",{"_index":345,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.8.2",{"_index":330,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.8.3",{"_index":322,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.8.7",{"_index":318,"title":{},"body":{"changelog.html":{}}}],["metricsetreportcontext",{"_index":110,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["metrictyp",{"_index":111,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["millisecond",{"_index":112,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["minimum",{"_index":339,"title":{},"body":{"changelog.html":{}}}],["minreportingtimeout",{"_index":138,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["mit",{"_index":383,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["mocha",{"_index":385,"title":{},"body":{"changelog.html":{}}}],["modifi",{"_index":467,"title":{},"body":{"license.html":{}}}],["modul",{"_index":410,"title":{"modules.html":{}},"body":{"index.html":{},"modules.html":{}}}],["monotonecount",{"_index":113,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["name",{"_index":32,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["names.find((valu",{"_index":78,"title":{},"body":{"classes/DefaultSender.html":{}}}],["new",{"_index":72,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"unit-test.html":{}}}],["node",{"_index":409,"title":{},"body":{"index.html":{}}}],["node/regist",{"_index":324,"title":{},"body":{"changelog.html":{}}}],["node10licens",{"_index":448,"title":{},"body":{"index.html":{}}}],["node6",{"_index":444,"title":{},"body":{"index.html":{}}}],["node7",{"_index":445,"title":{},"body":{"index.html":{}}}],["node8",{"_index":446,"title":{},"body":{"index.html":{}}}],["node9",{"_index":447,"title":{},"body":{"index.html":{}}}],["nodej",{"_index":285,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["nodejs.it",{"_index":412,"title":{},"body":{"index.html":{}}}],["noninfring",{"_index":493,"title":{},"body":{"license.html":{}}}],["notabl",{"_index":264,"title":{},"body":{"changelog.html":{}}}],["notic",{"_index":480,"title":{},"body":{"license.html":{}}}],["npm",{"_index":414,"title":{},"body":{"index.html":{}}}],["null",{"_index":99,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["number",{"_index":80,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["nyc",{"_index":390,"title":{},"body":{"changelog.html":{}}}],["object",{"_index":39,"title":{},"body":{"classes/DefaultSender.html":{}}}],["obtain",{"_index":457,"title":{},"body":{"license.html":{}}}],["option",{"_index":34,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["otherwis",{"_index":505,"title":{},"body":{"license.html":{}}}],["out",{"_index":507,"title":{},"body":{"license.html":{}}}],["overallreportcontext",{"_index":114,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["overview",{"_index":509,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":402,"title":{"dependencies.html":{}},"body":{}}],["package.json",{"_index":305,"title":{},"body":{"changelog.html":{}}}],["param",{"_index":69,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["paramet",{"_index":30,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/Sender.html":{}}}],["particular",{"_index":491,"title":{},"body":{"license.html":{}}}],["password",{"_index":423,"title":{},"body":{"index.html":{}}}],["permiss",{"_index":451,"title":{},"body":{"license.html":{}}}],["permit",{"_index":474,"title":{},"body":{"license.html":{}}}],["person",{"_index":456,"title":{},"body":{"license.html":{}}}],["pipelin",{"_index":389,"title":{},"body":{"changelog.html":{}}}],["playground",{"_index":309,"title":{},"body":{"changelog.html":{}}}],["point",{"_index":62,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["port",{"_index":425,"title":{},"body":{"index.html":{}}}],["portion",{"_index":483,"title":{},"body":{"license.html":{}}}],["prefix",{"_index":254,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["privat",{"_index":14,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["process",{"_index":125,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["project",{"_index":265,"title":{},"body":{"changelog.html":{}}}],["promis",{"_index":54,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["promise((resolv",{"_index":178,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["promise.resolv",{"_index":85,"title":{},"body":{"classes/DefaultSender.html":{}}}],["promise.resolve(this.readi",{"_index":88,"title":{},"body":{"classes/DefaultSender.html":{}}}],["properli",{"_index":336,"title":{},"body":{"changelog.html":{}}}],["properti",{"_index":13,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{}}}],["protect",{"_index":168,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["provid",{"_index":484,"title":{},"body":{"license.html":{}}}],["public",{"_index":19,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["publish",{"_index":469,"title":{},"body":{"license.html":{}}}],["purpos",{"_index":492,"title":{},"body":{"license.html":{}}}],["queue",{"_index":131,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["readi",{"_index":17,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["readm",{"_index":375,"title":{},"body":{"changelog.html":{}}}],["readonli",{"_index":128,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["reason",{"_index":187,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["refactor",{"_index":307,"title":{},"body":{"changelog.html":{}}}],["regist",{"_index":167,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["registri",{"_index":173,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["registry.newtimer(\"request",{"_index":429,"title":{},"body":{"index.html":{}}}],["reject",{"_index":179,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["remov",{"_index":313,"title":{},"body":{"changelog.html":{}}}],["report",{"_index":45,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"index.html":{}}}],["reportcount",{"_index":190,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["reporter.addmetricregistry(registri",{"_index":431,"title":{},"body":{"index.html":{}}}],["reporter.setlog(global.consol",{"_index":430,"title":{},"body":{"index.html":{}}}],["reporter.start",{"_index":432,"title":{},"body":{"index.html":{}}}],["reportgauge(gaug",{"_index":202,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["reporthistogram(histogram",{"_index":207,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["reportingresult",{"_index":115,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["reportinterv",{"_index":134,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["reportmeter(met",{"_index":233,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["reporttimer(tim",{"_index":245,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["request",{"_index":428,"title":{},"body":{"index.html":{}}}],["requests.tim",{"_index":434,"title":{},"body":{"index.html":{}}}],["resolv",{"_index":188,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["restrict",{"_index":463,"title":{},"body":{"license.html":{}}}],["result",{"_index":90,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"unit-test.html":{}}}],["result.result",{"_index":181,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["results.map((result",{"_index":180,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["return",{"_index":53,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["right",{"_index":466,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":364,"title":{},"body":{"changelog.html":{}}}],["run",{"_index":443,"title":{},"body":{"index.html":{}}}],["save",{"_index":415,"title":{},"body":{"index.html":{}}}],["schedul",{"_index":117,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["scheduledmetricreport",{"_index":116,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["scheduledmetricreporteropt",{"_index":96,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["script",{"_index":308,"title":{},"body":{"changelog.html":{}}}],["sell",{"_index":473,"title":{},"body":{"license.html":{}}}],["semant",{"_index":271,"title":{},"body":{"changelog.html":{}}}],["send",{"_index":22,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["send(point",{"_index":58,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["sender",{"_index":10,"title":{"interfaces/Sender.html":{}},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["senderreadi",{"_index":169,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["server",{"_index":102,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["set",{"_index":164,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["setinterv",{"_index":137,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["setlog(log",{"_index":165,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["setup",{"_index":348,"title":{},"body":{"changelog.html":{}}}],["shall",{"_index":481,"title":{},"body":{"license.html":{}}}],["sinon",{"_index":387,"title":{},"body":{"changelog.html":{}}}],["snapshot",{"_index":209,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["softwar",{"_index":459,"title":{},"body":{"license.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"dependencies.html":{}}}],["specifi",{"_index":61,"title":{},"body":{"classes/DefaultSender.html":{}}}],["start",{"_index":262,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["state",{"_index":57,"title":{},"body":{"classes/DefaultSender.html":{}}}],["statement",{"_index":394,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["stdclock",{"_index":118,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["string",{"_index":79,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["subject",{"_index":476,"title":{},"body":{"license.html":{}}}],["sublicens",{"_index":471,"title":{},"body":{"license.html":{}}}],["substanti",{"_index":482,"title":{},"body":{"license.html":{}}}],["super",{"_index":151,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["super.report",{"_index":172,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["support",{"_index":284,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["support/regist",{"_index":65,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["tabl",{"_index":401,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":400,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tag",{"_index":140,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["target",{"_index":295,"title":{},"body":{"changelog.html":{}}}],["task(callback",{"_index":158,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["test",{"_index":325,"title":{"unit-test.html":{}},"body":{"changelog.html":{},"index.html":{},"unit-test.html":{}}}],["then((nam",{"_index":77,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.buildtags(ctx.registri",{"_index":199,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.config",{"_index":70,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.config.databas",{"_index":75,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.db",{"_index":71,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.db.createdatabase(databas",{"_index":84,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.db.getdatabasenam",{"_index":76,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.db.writepoints(point",{"_index":89,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.getfieldnameprefix(count",{"_index":195,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getfieldnameprefix(gaug",{"_index":204,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getfieldnameprefix(histogram",{"_index":211,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getfieldnameprefix(met",{"_index":235,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getfieldnameprefix(tim",{"_index":248,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getmeasurementname(count",{"_index":197,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getmeasurementname(gaug",{"_index":205,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getmeasurementname(histogram",{"_index":212,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getmeasurementname(met",{"_index":236,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getmeasurementname(tim",{"_index":249,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(meter.get15minuter",{"_index":238,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(meter.get1minuter",{"_index":240,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(meter.get5minuter",{"_index":242,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(meter.getmeanr",{"_index":244,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.get75thpercentil",{"_index":222,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.get95thpercentil",{"_index":224,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.get98thpercentil",{"_index":226,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.get999thpercentil",{"_index":230,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.get99thpercentil",{"_index":228,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.getmax",{"_index":214,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.getmean",{"_index":216,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.getmedian",{"_index":220,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.getmin",{"_index":218,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.getstddev",{"_index":232,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(timer.get15minuter",{"_index":250,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(timer.get1minuter",{"_index":251,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(timer.get5minuter",{"_index":252,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(timer.getmeanr",{"_index":253,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.logmetadata",{"_index":152,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.options.log",{"_index":163,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.options.log.debug(`wrot",{"_index":183,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.options.sender.init",{"_index":161,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.options.sender.isreadi",{"_index":171,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.options.sender.send(point",{"_index":182,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.queu",{"_index":153,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.queue.push((callback",{"_index":160,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.readi",{"_index":86,"title":{},"body":{"classes/DefaultSender.html":{}}}],["time",{"_index":142,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["timeout",{"_index":146,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["timer",{"_index":119,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["timer.getcount",{"_index":246,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["timer.getsnapshot",{"_index":247,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["timestamp",{"_index":200,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["timeunit",{"_index":120,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["tort",{"_index":504,"title":{},"body":{"license.html":{}}}],["travi",{"_index":292,"title":{},"body":{"changelog.html":{}}}],["trigger",{"_index":123,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["true",{"_index":87,"title":{},"body":{"classes/DefaultSender.html":{}}}],["ts:t",{"_index":323,"title":{},"body":{"changelog.html":{}}}],["tsdoc",{"_index":312,"title":{},"body":{"changelog.html":{}}}],["type",{"_index":33,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"coverage.html":{}}}],["typescript",{"_index":380,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["unchang",{"_index":340,"title":{},"body":{"changelog.html":{}}}],["under",{"_index":382,"title":{},"body":{"changelog.html":{}}}],["unit",{"_index":136,"title":{"unit-test.html":{}},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"unit-test.html":{}}}],["unlock",{"_index":159,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["unreleas",{"_index":273,"title":{},"body":{"changelog.html":{}}}],["updat",{"_index":287,"title":{},"body":{"changelog.html":{}}}],["us",{"_index":100,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["usag",{"_index":416,"title":{},"body":{"index.html":{}}}],["usernam",{"_index":421,"title":{},"body":{"index.html":{}}}],["valu",{"_index":42,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["value.localecompare(databas",{"_index":82,"title":{},"body":{"classes/DefaultSender.html":{}}}],["version",{"_index":272,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["void",{"_index":156,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["warranti",{"_index":485,"title":{},"body":{"license.html":{}}}],["wether",{"_index":147,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["whether",{"_index":501,"title":{},"body":{"license.html":{}}}],["without",{"_index":462,"title":{},"body":{"license.html":{}}}],["write",{"_index":186,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["zero",{"_index":355,"title":{},"body":{"changelog.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/DefaultSender.html":{"url":"classes/DefaultSender.html","title":"class - DefaultSender","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DefaultSender\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/DefaultSender.ts\n        \n\n            \n                Description\n            \n            \n                Default implementation for an influxdb sender.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Sender\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                config\n                            \n                            \n                                    Private\n                                db\n                            \n                            \n                                    Private\n                                ready\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                init\n                            \n                            \n                                    Public\n                                isReady\n                            \n                            \n                                    Public\n                                send\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(config: IClusterConfig)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/DefaultSender.ts:38\n                            \n                        \n\n                \n                    \n                            Creates an instance of DefaultSender.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    IClusterConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            config\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        config:     IClusterConfig\n\n                    \n                \n                    \n                        \n                            Type :     IClusterConfig\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/DefaultSender.ts:30\n                            \n                        \n\n                \n                    \n                        Influx client configuration object.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            db\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        db:     InfluxDB\n\n                    \n                \n                    \n                        \n                            Type :     InfluxDB\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/DefaultSender.ts:22\n                            \n                        \n\n                \n                    \n                        The influxdb client instance.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ready\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        ready:     boolean\n\n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/DefaultSender.ts:38\n                            \n                        \n\n                \n                    \n                        Indicates if he sender is ready to report metrics.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            init\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        init()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/DefaultSender.ts:56\n                            \n                        \n\n\n                \n                    \n                            Ensures that a database is existing before sending data.\n\n\n                            \n                                Returns :     Promise\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            isReady\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        isReady()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/DefaultSender.ts:74\n                            \n                        \n\n\n                \n                    \n                            Gets the ready state.\n\n\n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            send\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        send(points: IPoint[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/DefaultSender.ts:84\n                            \n                        \n\n\n                \n                    \n                            Sends the specified data points to the DB.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        points\n                                                        \n                                                                    IPoint[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { IClusterConfig, InfluxDB, IPoint } from \"influx\";\nimport { Sender } from \"./InfluxMetricReporter\";\n\n/**\n * Default implementation for an influxdb sender.\n *\n * @export\n * @class DefaultSender\n * @implements {Sender}\n */\nexport class DefaultSender implements Sender {\n\n    /**\n     * The influxdb client instance.\n     *\n     * @private\n     * @type {InfluxDB}\n     * @memberof DefaultSender\n     */\n    private db: InfluxDB;\n    /**\n     * Influx client configuration object.\n     *\n     * @private\n     * @type {IClusterConfig}\n     * @memberof DefaultSender\n     */\n    private config: IClusterConfig;\n    /**\n     * Indicates if he sender is ready to report metrics.\n     *\n     * @private\n     * @type {boolean}\n     * @memberof DefaultSender\n     */\n    private ready: boolean = false;\n\n    /**\n     * Creates an instance of DefaultSender.\n     *\n     * @param {IClusterConfig} config\n     * @memberof DefaultSender\n     */\n    public constructor(config: IClusterConfig) {\n        this.config = config;\n        this.db = new InfluxDB(config);\n    }\n\n    /**\n     * Ensures that a database is existing before sending data.\n     *\n     * @memberof DefaultSender\n     */\n    public init(): Promise {\n        const database = this.config.database;\n        return this.db.getDatabaseNames()\n            .then((names) => {\n                if (!names.find((value: string, index: number, arr: string[]) => value.localeCompare(database) === 0)) {\n                    return this.db.createDatabase(database);\n                }\n                return Promise.resolve();\n            })\n            .then(() => this.ready = true);\n    }\n\n    /**\n     * Gets the ready state.\n     *\n     * @returns {Promise}\n     * @memberof DefaultSender\n     */\n    public isReady(): Promise {\n        return Promise.resolve(this.ready);\n    }\n\n    /**\n     * Sends the specified data points to the DB.\n     *\n     * @param {IPoint[]} points\n     * @memberof DefaultSender\n     */\n    public send(points: IPoint[]): Promise {\n        return this.db.writePoints(points);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/InfluxMetricReporterOptions.html":{"url":"interfaces/InfluxMetricReporterOptions.html","title":"interface - InfluxMetricReporterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  InfluxMetricReporterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/InfluxMetricReporter.ts\n        \n\n            \n                Description\n            \n            \n                Options for InfluxMetricReporter.\n\n            \n\n            \n                Extends\n            \n            \n                    ScheduledMetricReporterOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        log\n                                \n                                \n                                        sender\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        log\n                                    \n                                \n                                \n                                    \n                                        log:     Logger | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Logger | null\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A logger instance used to report errors.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sender\n                                    \n                                \n                                \n                                    \n                                        sender:     Sender\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Sender\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A sender implementation used to send metrics to influx DB server.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport * as async from \"async\";\nimport { IPoint } from \"influx\";\nimport {\n    Clock,\n    Counter,\n    Gauge,\n    Histogram,\n    Logger,\n    Meter,\n    Metric,\n    MetricRegistry,\n    MetricSetReportContext,\n    MetricType,\n    MILLISECOND,\n    MonotoneCounter,\n    OverallReportContext,\n    ReportingResult,\n    ScheduledMetricReporter,\n    ScheduledMetricReporterOptions,\n    Scheduler,\n    StdClock,\n    Timer,\n    TimeUnit,\n} from \"inspector-metrics\";\n\n/**\n * Sender interface for influxdb client abstraction.\n *\n * @export\n * @interface Sender\n */\nexport interface Sender {\n\n    /**\n     * Indicates if the sender is ready to send data.\n     *\n     * @returns {Promise}\n     * @memberof Sender\n     */\n    isReady(): Promise;\n\n    /**\n     * Triggers the initialization process.\n     *\n     * @returns {Promise}\n     * @memberof Sender\n     */\n    init(): Promise;\n\n    /**\n     * Sends the given data points to influxdb.\n     *\n     * @param {IPoint[]} points\n     * @returns {Promise}\n     * @memberof Sender\n     */\n    send(points: IPoint[]): Promise;\n\n}\n\n/**\n * Options for {@link InfluxMetricReporter}.\n *\n * @export\n * @interface InfluxMetricReporterOptions\n * @extends {ScheduledMetricReporterOptions}\n */\nexport interface InfluxMetricReporterOptions extends ScheduledMetricReporterOptions {\n    /**\n     * A logger instance used to report errors.\n     *\n     * @type {(Logger | null)}\n     * @memberof InfluxMetricReporterOptions\n     */\n    log: Logger | null;\n    /**\n     * A sender implementation used to send metrics to influx DB server.\n     *\n     * @type {Sender}\n     * @memberof InfluxMetricReporterOptions\n     */\n    readonly sender: Sender;\n}\n\n/**\n * InfluxDB reporter implementation.\n *\n * @export\n * @class InfluxMetricReporter\n * @extends {ScheduledMetricReporter}\n */\nexport class InfluxMetricReporter extends ScheduledMetricReporter {\n\n    /**\n     * Metadata for the logger.\n     *\n     * @private\n     * @type {*}\n     * @memberof InfluxMetricReporter\n     */\n    private logMetadata: any;\n    /**\n     * async queue used to queue data point sending.\n     *\n     * @private\n     * @type {async.AsyncQueue}\n     * @memberof InfluxMetricReporter\n     */\n    private queue: async.AsyncQueue;\n\n    /**\n     * Creates an instance of InfluxMetricReporter.\n     *\n     * @memberof InfluxMetricReporter\n     */\n    public constructor({\n        sender,\n        log = console,\n        reportInterval = 1000,\n        unit = MILLISECOND,\n        clock = new StdClock(),\n        scheduler = setInterval,\n        minReportingTimeout = 1,\n        tags = new Map(),\n    }: {\n        /**\n         * A sender implementation used to send metrics to influx DB server.\n         * @type {Sender}\n         */\n        sender: Sender,\n        /**\n         * The logger instance used to report metrics.\n         * @type {(Logger | null)}\n         */\n        log?: Logger,\n        /**\n         * Reporting interval in the time-unit of {@link #unit}.\n         * @type {number}\n         */\n        reportInterval?: number;\n        /**\n         * The time-unit of the reporting interval.\n         * @type {TimeUnit}\n         */\n        unit?: TimeUnit;\n        /**\n         * The clock instance used determine the current time.\n         * @type {Clock}\n         */\n        clock?: Clock;\n        /**\n         * The scheduler function used to trigger reporting.\n         * @type {Scheduler}\n         */\n        scheduler?: Scheduler;\n        /**\n         * The timeout in which a metrics gets reported wether it's value has changed or not.\n         * @type {number}\n         */\n        minReportingTimeout?: number;\n        /**\n         * Common tags for this reporter instance.\n         * @type {Map}\n         */\n        tags?: Map;\n    }) {\n        super({\n            clock,\n            log,\n            minReportingTimeout,\n            reportInterval,\n            scheduler,\n            sender,\n            tags,\n            unit,\n        });\n\n        this.logMetadata = {\n            reportInterval,\n            tags,\n            unit,\n        };\n\n        this.queue = async.queue((task: (clb: () => void) => void, callback: () => void) => {\n            task(callback);\n        }, 1);\n\n        let unlock: () => void = null;\n        this.queue.push((callback: () => void) => {\n            unlock = callback;\n        });\n\n        this.options.sender.init()\n            .then(() => unlock());\n    }\n\n    /**\n     * Gets the logger instance.\n     *\n     * @returns {Logger}\n     * @memberof InfluxMetricReporter\n     */\n    public getLog(): Logger {\n        return this.options.log;\n    }\n\n    /**\n     * Sets the logger instance.\n     *\n     * @param {(Logger | null)} log\n     * @memberof InfluxMetricReporter\n     */\n    public setLog(log: Logger | null): void {\n        this.options.log = log;\n    }\n\n    /**\n     * Reports the data points for each registered {@link MetricRegistry}.\n     *\n     * @protected\n     * @memberof InfluxMetricReporter\n     */\n    protected async report(): Promise {\n        const senderReady = await this.options.sender.isReady();\n        if (senderReady) {\n            return await super.report();\n        }\n        return {};\n    }\n\n    /**\n     * Uses the sender to report the given data points.\n     *\n     * @protected\n     * @param {MetricRegistry} registry\n     * @param {Date} date\n     * @param {MetricType} type\n     * @param {Array>} results\n     * @returns {Promise}\n     * @memberof InfluxMetricReporter\n     */\n    protected handleResults(\n        ctx: OverallReportContext,\n        registry: MetricRegistry,\n        date: Date,\n        type: MetricType,\n        results: Array>): Promise {\n        return new Promise((resolve, reject) => {\n            this.queue.push((callback: () => void) => {\n                const points = results.map((result) => result.result);\n                this.options.sender.send(points)\n                    .then(() => {\n                        if (this.options.log) {\n                            this.options.log.debug(`wrote ${type} metrics`, this.logMetadata);\n                        }\n                    })\n                    .catch((reason) => {\n                        if (this.options.log) {\n                            this.options.log\n                                .error(`error writing ${type} metrics - reason: ${reason}`, reason, this.logMetadata);\n                        }\n                    })\n                    .then(() => callback())\n                    .then(() => resolve());\n            });\n        });\n    }\n\n    /**\n     * Builds an IPoint instance for the given {@link Counter} or  {@link MonotoneCounter}.\n     *\n     * @protected\n     * @param {(MonotoneCounter | Counter)} counter\n     * @param {(MetricSetReportContext)} ctx\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    protected reportCounter(\n        counter: MonotoneCounter | Counter,\n        ctx: MetricSetReportContext): IPoint {\n        const value = counter.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(counter);\n        const measurement = this.getMeasurementName(counter);\n\n        fields[`${fieldNamePrefix}count`] = counter.getCount() || 0;\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(ctx.registry, counter),\n            timestamp: ctx.date,\n        };\n    }\n\n    /**\n     * Builds an IPoint instance for the given {@link Gauge}.\n     *\n     * @protected\n     * @param {Gauge} gauge\n     * @param {MetricSetReportContext>} ctx\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    protected reportGauge(gauge: Gauge, ctx: MetricSetReportContext>): IPoint {\n        const value = gauge.getValue();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(gauge);\n        const measurement = this.getMeasurementName(gauge);\n\n        fields[`${fieldNamePrefix}value`] = gauge.getValue() || 0;\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(ctx.registry, gauge),\n            timestamp: ctx.date,\n        };\n    }\n\n    /**\n     * Builds an IPoint instance for the given {@link Histogram}.\n     *\n     * @protected\n     * @param {Histogram} histogram\n     * @param {MetricSetReportContext} ctx\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    protected reportHistogram(histogram: Histogram, ctx: MetricSetReportContext): IPoint {\n        const value = histogram.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = histogram.getSnapshot();\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(histogram);\n        const measurement = this.getMeasurementName(histogram);\n\n        fields[`${fieldNamePrefix}count`] = histogram.getCount() || 0;\n        fields[`${fieldNamePrefix}max`] = this.getNumber(snapshot.getMax());\n        fields[`${fieldNamePrefix}mean`] = this.getNumber(snapshot.getMean());\n        fields[`${fieldNamePrefix}min`] = this.getNumber(snapshot.getMin());\n        fields[`${fieldNamePrefix}p50`] = this.getNumber(snapshot.getMedian());\n        fields[`${fieldNamePrefix}p75`] = this.getNumber(snapshot.get75thPercentile());\n        fields[`${fieldNamePrefix}p95`] = this.getNumber(snapshot.get95thPercentile());\n        fields[`${fieldNamePrefix}p98`] = this.getNumber(snapshot.get98thPercentile());\n        fields[`${fieldNamePrefix}p99`] = this.getNumber(snapshot.get99thPercentile());\n        fields[`${fieldNamePrefix}p999`] = this.getNumber(snapshot.get999thPercentile());\n        fields[`${fieldNamePrefix}stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(ctx.registry, histogram),\n            timestamp: ctx.date,\n        };\n    }\n\n    /**\n     * Builds an IPoint instance for the given {@link Meter}.\n     *\n     * @protected\n     * @param {Meter} meter\n     * @param {MetricSetReportContext} ctx\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    protected reportMeter(meter: Meter, ctx: MetricSetReportContext): IPoint {\n        const value = meter.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(meter);\n        const measurement = this.getMeasurementName(meter);\n\n        fields[`${fieldNamePrefix}count`] = meter.getCount() || 0;\n        fields[`${fieldNamePrefix}m15_rate`] = this.getNumber(meter.get15MinuteRate());\n        fields[`${fieldNamePrefix}m1_rate`] = this.getNumber(meter.get1MinuteRate());\n        fields[`${fieldNamePrefix}m5_rate`] = this.getNumber(meter.get5MinuteRate());\n        fields[`${fieldNamePrefix}mean_rate`] = this.getNumber(meter.getMeanRate());\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(ctx.registry, meter),\n            timestamp: ctx.date,\n        };\n    }\n\n    /**\n     * Builds an IPoint instance for the given {@link Timer}.\n     *\n     * @protected\n     * @param {Timer} timer\n     * @param {MetricSetReportContext} ctx\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    protected reportTimer(timer: Timer, ctx: MetricSetReportContext): IPoint {\n        const value = timer.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = timer.getSnapshot();\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(timer);\n        const measurement = this.getMeasurementName(timer);\n\n        fields[`${fieldNamePrefix}count`] = timer.getCount() || 0;\n        fields[`${fieldNamePrefix}m15_rate`] = this.getNumber(timer.get15MinuteRate());\n        fields[`${fieldNamePrefix}m1_rate`] = this.getNumber(timer.get1MinuteRate());\n        fields[`${fieldNamePrefix}m5_rate`] = this.getNumber(timer.get5MinuteRate());\n        fields[`${fieldNamePrefix}max`] = this.getNumber(snapshot.getMax());\n        fields[`${fieldNamePrefix}mean`] = this.getNumber(snapshot.getMean());\n        fields[`${fieldNamePrefix}mean_rate`] = this.getNumber(timer.getMeanRate());\n        fields[`${fieldNamePrefix}min`] = this.getNumber(snapshot.getMin());\n        fields[`${fieldNamePrefix}p50`] = this.getNumber(snapshot.getMedian());\n        fields[`${fieldNamePrefix}p75`] = this.getNumber(snapshot.get75thPercentile());\n        fields[`${fieldNamePrefix}p95`] = this.getNumber(snapshot.get95thPercentile());\n        fields[`${fieldNamePrefix}p98`] = this.getNumber(snapshot.get98thPercentile());\n        fields[`${fieldNamePrefix}p99`] = this.getNumber(snapshot.get99thPercentile());\n        fields[`${fieldNamePrefix}p999`] = this.getNumber(snapshot.get999thPercentile());\n        fields[`${fieldNamePrefix}stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(ctx.registry, timer),\n            timestamp: ctx.date,\n        };\n    }\n\n    /**\n     * Builds the prefix for a field name.\n     *\n     * @private\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof InfluxMetricReporter\n     */\n    private getFieldNamePrefix(metric: Metric): string {\n        if (metric.getGroup()) {\n            return `${metric.getName()}.`;\n        }\n        return \"\";\n    }\n\n    /**\n     * Builds the prefix for the metric name.\n     *\n     * @private\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof InfluxMetricReporter\n     */\n    private getMeasurementName(metric: Metric): string {\n        if (metric.getGroup()) {\n            return metric.getGroup();\n        }\n        return metric.getName();\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Sender.html":{"url":"interfaces/Sender.html","title":"interface - Sender","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Sender\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/InfluxMetricReporter.ts\n        \n\n            \n                Description\n            \n            \n                Sender interface for influxdb client abstraction.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    init\n                                \n                                \n                                    isReady\n                                \n                                \n                                    send\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            init\n                            \n                            \n                        \n                    \n                \n                \n                    \ninit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/InfluxMetricReporter.ts:50\n                            \n                        \n\n\n                \n                    \n                            Triggers the initialization process.\n\n\n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isReady\n                            \n                            \n                        \n                    \n                \n                \n                    \nisReady()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/InfluxMetricReporter.ts:42\n                            \n                        \n\n\n                \n                    \n                            Indicates if the sender is ready to send data.\n\n\n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            send\n                            \n                            \n                        \n                    \n                \n                \n                    \nsend(points: IPoint[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/InfluxMetricReporter.ts:59\n                            \n                        \n\n\n                \n                    \n                            Sends the given data points to influxdb.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        points\n                                                        \n                                                                    IPoint[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport * as async from \"async\";\nimport { IPoint } from \"influx\";\nimport {\n    Clock,\n    Counter,\n    Gauge,\n    Histogram,\n    Logger,\n    Meter,\n    Metric,\n    MetricRegistry,\n    MetricSetReportContext,\n    MetricType,\n    MILLISECOND,\n    MonotoneCounter,\n    OverallReportContext,\n    ReportingResult,\n    ScheduledMetricReporter,\n    ScheduledMetricReporterOptions,\n    Scheduler,\n    StdClock,\n    Timer,\n    TimeUnit,\n} from \"inspector-metrics\";\n\n/**\n * Sender interface for influxdb client abstraction.\n *\n * @export\n * @interface Sender\n */\nexport interface Sender {\n\n    /**\n     * Indicates if the sender is ready to send data.\n     *\n     * @returns {Promise}\n     * @memberof Sender\n     */\n    isReady(): Promise;\n\n    /**\n     * Triggers the initialization process.\n     *\n     * @returns {Promise}\n     * @memberof Sender\n     */\n    init(): Promise;\n\n    /**\n     * Sends the given data points to influxdb.\n     *\n     * @param {IPoint[]} points\n     * @returns {Promise}\n     * @memberof Sender\n     */\n    send(points: IPoint[]): Promise;\n\n}\n\n/**\n * Options for {@link InfluxMetricReporter}.\n *\n * @export\n * @interface InfluxMetricReporterOptions\n * @extends {ScheduledMetricReporterOptions}\n */\nexport interface InfluxMetricReporterOptions extends ScheduledMetricReporterOptions {\n    /**\n     * A logger instance used to report errors.\n     *\n     * @type {(Logger | null)}\n     * @memberof InfluxMetricReporterOptions\n     */\n    log: Logger | null;\n    /**\n     * A sender implementation used to send metrics to influx DB server.\n     *\n     * @type {Sender}\n     * @memberof InfluxMetricReporterOptions\n     */\n    readonly sender: Sender;\n}\n\n/**\n * InfluxDB reporter implementation.\n *\n * @export\n * @class InfluxMetricReporter\n * @extends {ScheduledMetricReporter}\n */\nexport class InfluxMetricReporter extends ScheduledMetricReporter {\n\n    /**\n     * Metadata for the logger.\n     *\n     * @private\n     * @type {*}\n     * @memberof InfluxMetricReporter\n     */\n    private logMetadata: any;\n    /**\n     * async queue used to queue data point sending.\n     *\n     * @private\n     * @type {async.AsyncQueue}\n     * @memberof InfluxMetricReporter\n     */\n    private queue: async.AsyncQueue;\n\n    /**\n     * Creates an instance of InfluxMetricReporter.\n     *\n     * @memberof InfluxMetricReporter\n     */\n    public constructor({\n        sender,\n        log = console,\n        reportInterval = 1000,\n        unit = MILLISECOND,\n        clock = new StdClock(),\n        scheduler = setInterval,\n        minReportingTimeout = 1,\n        tags = new Map(),\n    }: {\n        /**\n         * A sender implementation used to send metrics to influx DB server.\n         * @type {Sender}\n         */\n        sender: Sender,\n        /**\n         * The logger instance used to report metrics.\n         * @type {(Logger | null)}\n         */\n        log?: Logger,\n        /**\n         * Reporting interval in the time-unit of {@link #unit}.\n         * @type {number}\n         */\n        reportInterval?: number;\n        /**\n         * The time-unit of the reporting interval.\n         * @type {TimeUnit}\n         */\n        unit?: TimeUnit;\n        /**\n         * The clock instance used determine the current time.\n         * @type {Clock}\n         */\n        clock?: Clock;\n        /**\n         * The scheduler function used to trigger reporting.\n         * @type {Scheduler}\n         */\n        scheduler?: Scheduler;\n        /**\n         * The timeout in which a metrics gets reported wether it's value has changed or not.\n         * @type {number}\n         */\n        minReportingTimeout?: number;\n        /**\n         * Common tags for this reporter instance.\n         * @type {Map}\n         */\n        tags?: Map;\n    }) {\n        super({\n            clock,\n            log,\n            minReportingTimeout,\n            reportInterval,\n            scheduler,\n            sender,\n            tags,\n            unit,\n        });\n\n        this.logMetadata = {\n            reportInterval,\n            tags,\n            unit,\n        };\n\n        this.queue = async.queue((task: (clb: () => void) => void, callback: () => void) => {\n            task(callback);\n        }, 1);\n\n        let unlock: () => void = null;\n        this.queue.push((callback: () => void) => {\n            unlock = callback;\n        });\n\n        this.options.sender.init()\n            .then(() => unlock());\n    }\n\n    /**\n     * Gets the logger instance.\n     *\n     * @returns {Logger}\n     * @memberof InfluxMetricReporter\n     */\n    public getLog(): Logger {\n        return this.options.log;\n    }\n\n    /**\n     * Sets the logger instance.\n     *\n     * @param {(Logger | null)} log\n     * @memberof InfluxMetricReporter\n     */\n    public setLog(log: Logger | null): void {\n        this.options.log = log;\n    }\n\n    /**\n     * Reports the data points for each registered {@link MetricRegistry}.\n     *\n     * @protected\n     * @memberof InfluxMetricReporter\n     */\n    protected async report(): Promise {\n        const senderReady = await this.options.sender.isReady();\n        if (senderReady) {\n            return await super.report();\n        }\n        return {};\n    }\n\n    /**\n     * Uses the sender to report the given data points.\n     *\n     * @protected\n     * @param {MetricRegistry} registry\n     * @param {Date} date\n     * @param {MetricType} type\n     * @param {Array>} results\n     * @returns {Promise}\n     * @memberof InfluxMetricReporter\n     */\n    protected handleResults(\n        ctx: OverallReportContext,\n        registry: MetricRegistry,\n        date: Date,\n        type: MetricType,\n        results: Array>): Promise {\n        return new Promise((resolve, reject) => {\n            this.queue.push((callback: () => void) => {\n                const points = results.map((result) => result.result);\n                this.options.sender.send(points)\n                    .then(() => {\n                        if (this.options.log) {\n                            this.options.log.debug(`wrote ${type} metrics`, this.logMetadata);\n                        }\n                    })\n                    .catch((reason) => {\n                        if (this.options.log) {\n                            this.options.log\n                                .error(`error writing ${type} metrics - reason: ${reason}`, reason, this.logMetadata);\n                        }\n                    })\n                    .then(() => callback())\n                    .then(() => resolve());\n            });\n        });\n    }\n\n    /**\n     * Builds an IPoint instance for the given {@link Counter} or  {@link MonotoneCounter}.\n     *\n     * @protected\n     * @param {(MonotoneCounter | Counter)} counter\n     * @param {(MetricSetReportContext)} ctx\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    protected reportCounter(\n        counter: MonotoneCounter | Counter,\n        ctx: MetricSetReportContext): IPoint {\n        const value = counter.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(counter);\n        const measurement = this.getMeasurementName(counter);\n\n        fields[`${fieldNamePrefix}count`] = counter.getCount() || 0;\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(ctx.registry, counter),\n            timestamp: ctx.date,\n        };\n    }\n\n    /**\n     * Builds an IPoint instance for the given {@link Gauge}.\n     *\n     * @protected\n     * @param {Gauge} gauge\n     * @param {MetricSetReportContext>} ctx\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    protected reportGauge(gauge: Gauge, ctx: MetricSetReportContext>): IPoint {\n        const value = gauge.getValue();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(gauge);\n        const measurement = this.getMeasurementName(gauge);\n\n        fields[`${fieldNamePrefix}value`] = gauge.getValue() || 0;\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(ctx.registry, gauge),\n            timestamp: ctx.date,\n        };\n    }\n\n    /**\n     * Builds an IPoint instance for the given {@link Histogram}.\n     *\n     * @protected\n     * @param {Histogram} histogram\n     * @param {MetricSetReportContext} ctx\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    protected reportHistogram(histogram: Histogram, ctx: MetricSetReportContext): IPoint {\n        const value = histogram.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = histogram.getSnapshot();\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(histogram);\n        const measurement = this.getMeasurementName(histogram);\n\n        fields[`${fieldNamePrefix}count`] = histogram.getCount() || 0;\n        fields[`${fieldNamePrefix}max`] = this.getNumber(snapshot.getMax());\n        fields[`${fieldNamePrefix}mean`] = this.getNumber(snapshot.getMean());\n        fields[`${fieldNamePrefix}min`] = this.getNumber(snapshot.getMin());\n        fields[`${fieldNamePrefix}p50`] = this.getNumber(snapshot.getMedian());\n        fields[`${fieldNamePrefix}p75`] = this.getNumber(snapshot.get75thPercentile());\n        fields[`${fieldNamePrefix}p95`] = this.getNumber(snapshot.get95thPercentile());\n        fields[`${fieldNamePrefix}p98`] = this.getNumber(snapshot.get98thPercentile());\n        fields[`${fieldNamePrefix}p99`] = this.getNumber(snapshot.get99thPercentile());\n        fields[`${fieldNamePrefix}p999`] = this.getNumber(snapshot.get999thPercentile());\n        fields[`${fieldNamePrefix}stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(ctx.registry, histogram),\n            timestamp: ctx.date,\n        };\n    }\n\n    /**\n     * Builds an IPoint instance for the given {@link Meter}.\n     *\n     * @protected\n     * @param {Meter} meter\n     * @param {MetricSetReportContext} ctx\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    protected reportMeter(meter: Meter, ctx: MetricSetReportContext): IPoint {\n        const value = meter.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(meter);\n        const measurement = this.getMeasurementName(meter);\n\n        fields[`${fieldNamePrefix}count`] = meter.getCount() || 0;\n        fields[`${fieldNamePrefix}m15_rate`] = this.getNumber(meter.get15MinuteRate());\n        fields[`${fieldNamePrefix}m1_rate`] = this.getNumber(meter.get1MinuteRate());\n        fields[`${fieldNamePrefix}m5_rate`] = this.getNumber(meter.get5MinuteRate());\n        fields[`${fieldNamePrefix}mean_rate`] = this.getNumber(meter.getMeanRate());\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(ctx.registry, meter),\n            timestamp: ctx.date,\n        };\n    }\n\n    /**\n     * Builds an IPoint instance for the given {@link Timer}.\n     *\n     * @protected\n     * @param {Timer} timer\n     * @param {MetricSetReportContext} ctx\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    protected reportTimer(timer: Timer, ctx: MetricSetReportContext): IPoint {\n        const value = timer.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = timer.getSnapshot();\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(timer);\n        const measurement = this.getMeasurementName(timer);\n\n        fields[`${fieldNamePrefix}count`] = timer.getCount() || 0;\n        fields[`${fieldNamePrefix}m15_rate`] = this.getNumber(timer.get15MinuteRate());\n        fields[`${fieldNamePrefix}m1_rate`] = this.getNumber(timer.get1MinuteRate());\n        fields[`${fieldNamePrefix}m5_rate`] = this.getNumber(timer.get5MinuteRate());\n        fields[`${fieldNamePrefix}max`] = this.getNumber(snapshot.getMax());\n        fields[`${fieldNamePrefix}mean`] = this.getNumber(snapshot.getMean());\n        fields[`${fieldNamePrefix}mean_rate`] = this.getNumber(timer.getMeanRate());\n        fields[`${fieldNamePrefix}min`] = this.getNumber(snapshot.getMin());\n        fields[`${fieldNamePrefix}p50`] = this.getNumber(snapshot.getMedian());\n        fields[`${fieldNamePrefix}p75`] = this.getNumber(snapshot.get75thPercentile());\n        fields[`${fieldNamePrefix}p95`] = this.getNumber(snapshot.get95thPercentile());\n        fields[`${fieldNamePrefix}p98`] = this.getNumber(snapshot.get98thPercentile());\n        fields[`${fieldNamePrefix}p99`] = this.getNumber(snapshot.get99thPercentile());\n        fields[`${fieldNamePrefix}p999`] = this.getNumber(snapshot.get999thPercentile());\n        fields[`${fieldNamePrefix}stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(ctx.registry, timer),\n            timestamp: ctx.date,\n        };\n    }\n\n    /**\n     * Builds the prefix for a field name.\n     *\n     * @private\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof InfluxMetricReporter\n     */\n    private getFieldNamePrefix(metric: Metric): string {\n        if (metric.getGroup()) {\n            return `${metric.getName()}.`;\n        }\n        return \"\";\n    }\n\n    /**\n     * Builds the prefix for the metric name.\n     *\n     * @private\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof InfluxMetricReporter\n     */\n    private getMeasurementName(metric: Metric): string {\n        if (metric.getGroup()) {\n            return metric.getGroup();\n        }\n        return metric.getName();\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file.\nThe format is based on Keep a Changelog,\nand this project adheres to Semantic Versioning.\n[Unreleased]\n[2.1.0] - 2018-11-21\nChanged\n\nallow logger to be null - resolves https://github.com/rstiller/inspector-influx/issues/1\n\n[2.0.0] - 2018-11-04\nAdded\n\nchangelog\nsupport for nodejs 6\n\nChanged\n\nupdated dependencies\nuse inspector-metrics@v1.13.0\nadapted new MetricLogger implementation\nadded nodejs 11 to travis-ci config\ncompile target from \"es2017\" to \"es6\"\n\n[1.5.0] - 2018-10-04\nAdded\n\nsupport for MonotoneCounter\njsdoc for components\n\nChanged\n\nfixed linting errors / config\n\"description\" & \"homepage\" in package.json\nupdated dependencies\nuse inspector-metrics@v1.11.0\nrefactored build scripts\nrefactored playground\nuse compodoc instead of tsdoc\n\nRemoved\n\nJenkinsfile\n\n[1.4.5] - 2018-07-08\nChanged\n\nadded nodejs 10 to travis-ci config\nupdated dependencies\nuse inspector-metrics@v1.8.7\n\n[1.4.4] - 2017-11-20\nChanged\n\nupdated dependencies\nuse inspector-metrics@v1.8.3\n\nRemoved\n\n\"ts:ts-node/register\" option from test config\n\n[1.4.3] - 2017-11-19\nChanged\n\nupdated dependencies\nadded nodejs 8 & 9 to travis-ci config\nuse inspector-metrics@v1.8.2\n\n[1.4.2] - 2017-09-28\nChanged\n\nfixed bug: update last report date properly\n\n[1.4.1] - 2017-09-28\nAdded\n\nintroduced minimum reporting timeout (send unchanged values after a certain time)\n\n[1.4.0] - 2017-08-26\nAdded\n\ndon't send unchanged metric values\n\nChanged\n\nuse inspector-metrics@v1.7.0\n\n[1.3.0] - 2017-08-26\nChanged\n\nupdated dependencies\nuse inspector-metrics@v1.5.4\nrefactored / updated playground setup\n\n[1.2.5] - 2017-08-01\nChanged\n\nuse inspector-metrics@v1.5.2\n\n[1.2.4] - 2017-08-01\nAdded\n\ntravis-ci config file\n\nChanged\n\nupdated dependencies\n\n[1.2.3] - 2017-06-10\nChanged\n\ndefault for not existing values is zero (0)\n\n[1.2.2] - 2017-06-10\nChanged\n\nuse inspector-metrics@v1.5.1\n\n[1.2.1] - 2017-06-10\nChanged\n\nuse inspector-metrics@v1.5.0\nrefactored test config\n\n[1.2.0] - 2017-06-10\nAdded\n\nSender interface and DefaultSender implementation\n\nChanged\n\nuse inspector-metrics@v1.4.2\ncompile target from \"es6\" to \"es2017\"\nuse metric group in measurement name\n\n[1.1.2] - 2017-06-07\nChanged\n\nuse rimraf in build\nfixed bug: check if value is null before reporting\n\n[1.1.1] - 2017-06-01\nAdded\n\nplayground setup and script\n\n[1.1.0] - 2017-05-30\nAdded\n\neditorconfig file\nbuild script\n\nChanged\n\nadjusted reporter to match inspector-metrics@v1.3.0\n\n[1.0.2] - 2017-05-11\nChanged\n\nrefactored tests\n\n[1.0.1] - 2017-04-06\nAdded\n\ndocumentation in README\n\n[1.0.0] - 2017-03-31\nInitial commit.\nAdded\n\nproject setup\nREADME\ntypescript config\nlint config\n\n\nlicensed under MIT license\nbasic influx reporter implementation\nmocha testing (with chai, sinon)\nJenkins pipeline\nNYC code-coverage config\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/metrics/DefaultSender.ts\n            \n            \n                class\n            \n            \n                DefaultSender\n            \n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                lib/metrics/InfluxMetricReporter.ts\n            \n            \n                class\n            \n            \n                InfluxMetricReporter\n            \n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                lib/metrics/InfluxMetricReporter.ts\n            \n            \n                interface\n            \n            \n                InfluxMetricReporterOptions\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/metrics/InfluxMetricReporter.ts\n            \n            \n                interface\n            \n            \n                Sender\n            \n            \n                100 %\n                (4/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            async : 2.6.1\n        \n            influx : 5.0.7\n        \n            inspector-metrics : 1.13.0\n        \n            source-map-support : 0.5.9\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\ninspector-influx\nTypescript Metrics Reporter for\nInfluxDB.\n\n    \n        \n    \n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\nThis library is made for inspector-metrics node module and\nis meant to be used with nodejs.It uses node-influx as influxdb client.\ninstall\nnpm install --save inspector-influx\nbasic usage\nimport { DefaultSender, InfluxMetricReporter } from \"inspector-influx\";\nimport { MetricRegistry, Timer } from \"inspector-metrics\";\n\n// influxdb config from https://github.com/node-influx/node-influx/blob/master/src/index.ts#L80\nconst dbConfig = {\n    \"username\": \"admin\",\n    \"password\": \"admin\",\n    \"database\": \"example-db\",\n    \"hosts\": [\n        { \"host\": \"influx\", \"port\": 8086 }\n    ]\n};\n\nconst sender = new DefaultSender(dbConfig);\nconst reporter: InfluxMetricReporter = new InfluxMetricReporter({\n    sender,\n});\nconst registry: MetricRegistry = new MetricRegistry();\nconst requests: Timer = registry.newTimer(\"requests\");\n\nreporter.setLog(global.console);\nreporter.addMetricRegistry(registry);\n\nreporter.start();\n\n// example usage\nsetInterval(() => {\n    // should report a few milliseconds\n    requests.time(() => {\n        let a = 0;\n        let b = 1;\n        for (let i = 0; i local dev\ncompile & test with different nodejs versions\nbuild docker images:  \ndocker-compose buildrun tests:  \ndocker-compose run node6\ndocker-compose run node7\ndocker-compose run node8\ndocker-compose run node9\ndocker-compose run node10License\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2017 \nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"unit-test.html":{"url":"unit-test.html","title":"unit-test - unit-test","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Unit test coverage\n\n\n\n    \n    \n    \n    \n\n\n\n    \n        \n            File\n            Statements\n            Branches\n            Functions\n            Lines\n        \n    \n    \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
