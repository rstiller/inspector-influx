var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.5","fields":["title","body"],"fieldVectors":[["title/classes/DefaultSender.html",[0,0.855,1,0.855]],["body/classes/DefaultSender.html",[0,1.064,1,1.557,2,1.55,3,1.217,4,1.337,5,0.606,6,1.55,7,0.969,8,2.449,9,1.337,10,1.871,11,0.897,12,3.247,13,1.55,14,1.337,15,2.139,16,2.459,17,2.251,18,1.733,19,2.306,20,2.139,21,2.439,22,2.074,23,2.074,24,1.064,25,1.217,26,2.835,27,3.967,28,2.936,29,2.835,30,1.68,31,2.074,32,2.139,33,0.092,34,1.337,35,1.871,36,2.139,37,2.054,38,0.957,39,1.651,40,2.835,41,2.835,42,2.054,43,3.247,44,0.969,45,2.835,46,1.68,47,1.064,48,1.064,49,2.054,50,2.835,51,2.449,52,2.139,53,1.68,54,2.835,55,1.651,56,2.074,57,2.306,58,2.054,59,1.68,60,2.835,61,1.68,62,2.177,63,2.054,64,1.68,65,2.835,66,2.074,67,1.532,68,0.969,69,1.217,70,0.771,71,1.68,72,2.306,73,1.68,74,2.054,75,2.054,76,0.464,77,2.054,78,0.969,79,2.054,80,2.177,81,2.054,82,2.054,83,2.054,84,1.68,85,1.217,86,2.054,87,2.054,88,0.771,89,2.054,90,2.054,91,2.054,92,2.054,93,2.054,94,2.054,95,0.042,96,0.058,97,0.042]],["title/interfaces/InfluxMetricReporterOptions.html",[98,0.672,99,1.075]],["body/interfaces/InfluxMetricReporterOptions.html",[0,0.612,3,0.588,4,0.769,5,0.293,7,0.468,9,1.134,10,1.134,11,0.904,14,0.468,15,1.23,16,1.692,18,0.979,19,0.966,21,1.574,22,0.588,23,0.588,24,0.902,25,0.588,30,0.588,31,2.122,33,0.093,34,0.769,35,1.797,38,0.709,39,0.468,44,1.716,46,0.588,47,0.997,48,1.225,55,1.134,56,2.122,57,2.084,59,0.966,61,0.588,62,2.258,64,0.966,66,1.574,67,0.979,68,1.134,69,0.588,70,1.442,71,1.692,72,2.296,73,2.278,76,0.469,78,1.895,80,2.296,84,1.425,85,1.425,88,0.997,95,0.033,96,0.033,97,0.042,98,0.783,99,1.253,100,0.588,101,0.588,102,1.23,103,2.004,104,1.814,105,2.463,106,2.236,107,2.212,108,1.868,109,0.966,110,1.566,111,2.277,112,2.277,113,1.225,114,2.378,115,2.155,116,2.155,117,1.935,118,1.425,119,2.598,120,1.566,121,1.23,122,1.425,123,1.23,124,0.749,125,1.814,126,2.277,127,1.23,128,1.692,129,1.566,130,0.372,131,0.749,132,0.749,133,0.749,134,0.749,135,2.277,136,2.463,137,0.749,138,0.769,139,0.749,140,0.749,141,0.749,142,1.814,143,0.749,144,1.424,145,0.588,146,1.566,147,0.588,148,2.536,149,0.979,150,1.23,151,1.23,152,0.749,153,0.749,154,0.749,155,0.749,156,0.588,157,0.749,158,0.749,159,0.749,160,0.588,161,0.749,162,1.23,163,2.004,164,0.749,165,2.378,166,0.749,167,0.749,168,0.749,169,0.749,170,0.749,171,0.966,172,0.979,173,0.749,174,1.425,175,1.692,176,0.749,177,0.749,178,0.749,179,0.749,180,0.749,181,1.23,182,1.23,183,0.749,184,0.588,185,0.749,186,0.749,187,0.749,188,0.749,189,1.23,190,0.749,191,1.574,192,1.23,193,0.749,194,1.23,195,0.749,196,1.23,197,0.749,198,1.23,199,1.23,200,2.463,201,1.23,202,1.23,203,0.749,204,0.749,205,0.749,206,2.744,207,1.23,208,0.749,209,0.588,210,1.23,211,0.749,212,2.598,213,0.749,214,0.749,215,0.749,216,2.277,217,0.749,218,1.23,219,2.004,220,2.536,221,2.004,222,0.749,223,1.992,224,0.749,225,1.814,226,1.814,227,2.004,228,2.004,229,0.749,230,1.23,231,0.749,232,0.749,233,0.749,234,0.749,235,0.749,236,0.749,237,1.23,238,1.23,239,0.749,240,0.749,241,0.749,242,1.23,243,1.23,244,1.23,245,1.23,246,1.23,247,1.23,248,1.23,249,1.23,250,1.23,251,1.23,252,1.23,253,1.23,254,1.23,255,1.23,256,1.23,257,1.23,258,1.23,259,1.23,260,1.23,261,1.23,262,0.749,263,1.23,264,0.749,265,0.749,266,1.23,267,0.749,268,1.23,269,0.749,270,1.23,271,0.749,272,1.23,273,0.749,274,0.749,275,1.23,276,0.749,277,0.749,278,0.749,279,0.749,280,0.749,281,0.749,282,0.749,283,1.23,284,0.749,285,0.749,286,1.566,287,1.23,288,0.749]],["title/interfaces/Sender.html",[11,0.515,98,0.672]],["body/interfaces/Sender.html",[0,0.608,3,0.583,4,0.764,5,0.29,7,0.464,9,0.974,10,1.342,11,0.887,14,0.464,16,1.686,18,0.764,19,1.223,20,1.222,21,1.567,22,1.418,23,1.418,24,1.067,25,0.583,28,1.557,30,0.583,31,2.079,32,0.742,33,0.093,34,0.974,35,1.776,36,0.742,38,0.609,39,0.764,44,1.712,46,0.96,47,0.898,48,1.179,55,1.342,56,2.207,57,2.18,59,0.96,61,0.96,62,2.292,64,1.223,66,1.782,67,0.974,68,1.128,69,0.583,70,1.427,71,1.686,72,2.292,73,2.274,76,0.467,78,1.892,80,2.292,84,1.418,85,1.418,88,0.992,95,0.033,96,0.033,97,0.042,98,0.839,99,1.128,100,0.583,101,0.583,102,0.742,103,1.805,104,1.557,105,2.146,106,2.15,107,2.15,108,1.686,109,0.583,110,1.222,111,2.268,112,2.268,113,1.221,114,2.37,115,2.146,116,2.146,117,1.929,118,1.418,119,2.591,120,1.557,121,1.222,122,1.418,123,1.222,124,0.742,125,1.805,126,2.268,127,1.222,128,1.686,129,1.557,130,0.369,131,1.222,132,1.222,133,1.222,134,1.222,135,2.37,136,2.455,137,0.742,138,0.764,139,0.742,140,0.742,141,0.742,142,1.805,143,0.742,144,1.418,145,0.583,146,1.557,147,0.583,148,2.528,149,0.974,150,1.222,151,1.223,152,0.742,153,0.742,154,0.742,155,0.742,156,0.583,157,0.742,158,0.742,159,0.742,160,0.583,161,0.742,162,1.222,163,1.995,164,0.742,165,2.37,166,0.742,167,0.742,168,0.742,169,0.742,170,0.742,171,0.96,172,0.974,173,0.742,174,1.418,175,1.686,176,0.742,177,0.742,178,0.742,179,0.742,180,0.742,181,1.222,182,1.222,183,0.742,184,0.583,185,0.742,186,0.742,187,0.742,188,0.742,189,1.222,190,0.742,191,1.567,192,1.222,193,0.742,194,1.223,195,0.742,196,1.222,197,0.742,198,1.222,199,1.222,200,2.455,201,1.222,202,1.222,203,0.742,204,0.742,205,0.742,206,2.737,207,1.222,208,0.742,209,0.583,210,1.222,211,0.742,212,2.591,213,0.742,214,0.742,215,0.742,216,2.268,217,0.742,218,1.222,219,1.995,220,2.528,221,1.995,222,0.742,223,1.986,224,0.742,225,1.805,226,1.805,227,1.995,228,1.995,229,0.742,230,1.222,231,0.742,232,0.742,233,0.742,234,0.742,235,0.742,236,0.742,237,1.222,238,1.222,239,0.742,240,0.742,241,0.742,242,1.222,243,1.222,244,1.222,245,1.222,246,1.222,247,1.222,248,1.222,249,1.222,250,1.222,251,1.222,252,1.222,253,1.222,254,1.222,255,1.222,256,1.222,257,1.222,258,1.222,259,1.222,260,1.222,261,1.222,262,0.742,263,1.222,264,0.742,265,0.742,266,1.222,267,0.742,268,1.222,269,0.742,270,1.222,271,0.742,272,1.222,273,0.742,274,0.742,275,1.222,276,0.742,277,0.742,278,0.742,279,0.742,280,0.742,281,0.742,282,0.742,283,1.222,284,0.742,285,0.742,286,1.557,287,1.222,288,0.742,289,0.984,290,0.984,291,0.984]],["title/changelog.html",[292,1.148,293,1.148,294,1.462]],["body/changelog.html",[1,0.71,5,0.916,7,0.892,8,1.427,9,1.465,11,0.427,17,2.374,24,1.004,33,0.078,34,0.892,38,0.558,44,0.892,47,0.71,52,1.427,53,1.121,76,0.605,88,0.71,95,0.039,96,0.055,97,0.039,98,0.558,106,1.121,107,1.586,109,1.121,113,0.71,117,1.586,122,1.121,130,1.568,138,1.262,149,1.465,151,1.121,156,1.121,160,2.546,171,1.121,172,0.892,174,1.121,191,1.121,223,1.121,294,2.343,295,1.891,296,1.891,297,3.106,298,1.891,299,1.891,300,1.891,301,1.891,302,1.891,303,1.891,304,1.891,305,1.891,306,1.891,307,1.891,308,1.891,309,3.7,310,2.49,311,1.891,312,4.052,313,2.342,314,1.891,315,3.804,316,1.891,317,3.377,318,1.891,319,1.891,320,1.891,321,3.106,322,1.891,323,3.106,324,1.891,325,3.952,326,3.106,327,4.202,328,1.891,329,1.427,330,1.891,331,1.891,332,2.343,333,1.427,334,2.676,335,1.891,336,1.891,337,1.891,338,2.688,339,2.688,340,1.891,341,1.891,342,1.891,343,1.891,344,1.891,345,1.891,346,3.7,347,1.586,348,1.891,349,1.891,350,1.891,351,1.891,352,1.891,353,1.891,354,3.106,355,1.891,356,1.891,357,1.891,358,1.891,359,3.377,360,3.377,361,2.019,362,2.676,363,2.676,364,2.676,365,1.891,366,3.7,367,1.891,368,1.891,369,3.106,370,1.891,371,1.891,372,1.891,373,1.891,374,2.343,375,1.891,376,1.891,377,1.891,378,1.891,379,1.891,380,1.891,381,2.676,382,1.891,383,1.891,384,3.199,385,1.891,386,1.891,387,1.891,388,1.891,389,1.891,390,1.262,391,1.891,392,1.891,393,1.891,394,1.891,395,1.891,396,1.891,397,2.676,398,2.676,399,1.891,400,1.891,401,1.891,402,1.891,403,1.891,404,1.891,405,2.676,406,3.106,407,1.891,408,1.891,409,2.676,410,1.891,411,1.891,412,1.891,413,1.891,414,3.106,415,1.891,416,1.891,417,1.891,418,1.891,419,3.804,420,1.891,421,1.891,422,1.891,423,1.891,424,1.891,425,1.891,426,1.891,427,1.891,428,1.891,429,1.891,430,1.891,431,1.891,432,2.019,433,1.891,434,2.676,435,1.891,436,1.891,437,1.891,438,1.891,439,1.891,440,1.891,441,1.427,442,1.891,443,2.676,444,1.891,445,1.891,446,1.891,447,1.891,448,1.891,449,1.427,450,1.891,451,1.891,452,1.891,453,1.121,454,1.121,455,1.427,456,1.891,457,1.891,458,1.891,459,1.891,460,1.891,461,1.891,462,1.891,463,1.891,464,0.892]],["title/coverage.html",[464,1.435]],["body/coverage.html",[0,1.429,1,1.224,5,0.962,6,2.46,11,0.737,33,0.088,35,1.538,70,1.224,76,0.737,95,0.067,96,0.078,97,0.067,98,1.123,99,1.538,101,2.39,347,1.933,464,1.538,465,3.261,466,2.46,467,4.156,468,3.261,469,3.261,470,3.261,471,3.261,472,2.46,473,2.46]],["title/dependencies.html",[313,1.613,474,1.938]],["body/dependencies.html",[4,1.58,33,0.088,38,0.988,48,1.451,68,1.58,95,0.069,96,0.079,97,0.069,130,1.451,313,2.292,329,2.527,332,2.527,475,3.349,476,3.349,477,3.349,478,3.349]],["title/index.html",[14,0.914,292,1.148,293,1.148]],["body/index.html",[1,0.867,10,1.855,11,0.694,13,2.886,17,1.37,18,1.09,24,0.867,33,0.092,38,1.16,39,1.09,47,0.867,48,1.379,51,1.744,53,1.37,55,1.09,67,1.733,70,1.435,76,0.831,78,1.893,88,1.152,95,0.047,96,0.063,97,0.047,108,1.37,113,1.379,118,2.044,128,1.82,130,1.506,138,1.804,145,1.37,147,1.37,149,1.449,172,1.449,175,2.044,184,1.82,194,1.37,209,1.37,310,1.37,333,2.317,338,1.744,339,2.602,361,1.744,374,2.317,390,1.627,432,1.744,441,1.744,449,1.744,453,1.37,455,1.744,479,2.311,480,2.311,481,3.071,482,2.311,483,2.311,484,2.311,485,3.071,486,2.311,487,2.311,488,3.071,489,2.311,490,2.311,491,2.311,492,2.311,493,2.311,494,3.071,495,2.311,496,2.311,497,2.311,498,2.311,499,2.311,500,2.311,501,2.311,502,2.311,503,2.311,504,2.311,505,3.449,506,3.071,507,3.071,508,2.311,509,2.311,510,2.311,511,2.311,512,2.311,513,2.311,514,2.311,515,2.311,516,2.311,517,2.311,518,2.311,519,2.311,520,2.311,521,2.311,522,4.167,523,4.076,524,2.311,525,2.311,526,2.311,527,3.071,528,2.311,529,3.449,530,2.311,531,2.311,532,2.311,533,3.071,534,2.311,535,2.311,536,2.311,537,2.311,538,2.311,539,2.311,540,2.311,541,2.311,542,2.311,543,3.933,544,2.311,545,2.311,546,2.311,547,2.311,548,2.311,549,2.311]],["title/license.html",[292,1.148,293,1.148,454,1.148]],["body/license.html",[33,0.073,95,0.06,96,0.073,97,0.06,113,1.103,310,2.122,347,1.743,384,2.219,453,1.743,454,1.743,550,3.86,551,2.941,552,3.58,553,2.941,554,2.941,555,2.941,556,2.941,557,2.941,558,2.941,559,3.58,560,4.309,561,2.941,562,2.941,563,2.941,564,3.86,565,2.941,566,3.58,567,2.941,568,2.941,569,2.941,570,2.941,571,2.941,572,2.941,573,2.941,574,2.941,575,2.941,576,3.58,577,2.941,578,2.941,579,2.941,580,2.941,581,2.941,582,2.941,583,2.941,584,3.58,585,3.58,586,2.941,587,2.941,588,2.941,589,2.941,590,2.941,591,2.941,592,2.941,593,2.941,594,2.941,595,2.941,596,2.941,597,2.941,598,2.941,599,2.941,600,2.941,601,2.941,602,2.941,603,2.941,604,2.941,605,2.941,606,2.941,607,2.941,608,2.941,609,2.941,610,2.941,611,2.941,612,2.941,613,2.941,614,2.941,615,2.941]],["title/modules.html",[616,2.295]],["body/modules.html",[33,0.081,95,0.071,96,0.081,97,0.071,616,2.617]],["title/overview.html",[617,2.295]],["body/overview.html",[2,2.597,33,0.08,95,0.07,96,0.08,97,0.07,100,2.04,617,2.597,618,3.929]],["title/unit-test.html",[144,1.162,390,1.162]],["body/unit-test.html",[5,1.003,33,0.08,76,0.769,95,0.07,96,0.08,97,0.07,144,1.605,390,1.605,464,1.605,466,2.566,472,2.566,473,2.566,619,3.402,620,3.402,621,3.402]]],"invertedIndex":[["",{"_index":33,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"unit-test.html":{}}}],["0",{"_index":88,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"index.html":{}}}],["0.5.10",{"_index":477,"title":{},"body":{"dependencies.html":{}}}],["01",{"_index":317,"title":{},"body":{"changelog.html":{}}}],["02",{"_index":308,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":445,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":354,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":434,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":419,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":381,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":309,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":397,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":147,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["1.0.0",{"_index":444,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":442,"title":{},"body":{"changelog.html":{}}}],["1.0.2",{"_index":440,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":433,"title":{},"body":{"changelog.html":{}}}],["1.1.1",{"_index":431,"title":{},"body":{"changelog.html":{}}}],["1.1.2",{"_index":428,"title":{},"body":{"changelog.html":{}}}],["1.16.x",{"_index":478,"title":{},"body":{"dependencies.html":{}}}],["1.17.2",{"_index":476,"title":{},"body":{"dependencies.html":{}}}],["1.2.0",{"_index":425,"title":{},"body":{"changelog.html":{}}}],["1.2.1",{"_index":423,"title":{},"body":{"changelog.html":{}}}],["1.2.2",{"_index":421,"title":{},"body":{"changelog.html":{}}}],["1.2.3",{"_index":418,"title":{},"body":{"changelog.html":{}}}],["1.2.4",{"_index":417,"title":{},"body":{"changelog.html":{}}}],["1.2.5",{"_index":415,"title":{},"body":{"changelog.html":{}}}],["1.3.0",{"_index":412,"title":{},"body":{"changelog.html":{}}}],["1.4.0",{"_index":408,"title":{},"body":{"changelog.html":{}}}],["1.4.1",{"_index":402,"title":{},"body":{"changelog.html":{}}}],["1.4.2",{"_index":396,"title":{},"body":{"changelog.html":{}}}],["1.4.3",{"_index":391,"title":{},"body":{"changelog.html":{}}}],["1.4.4",{"_index":383,"title":{},"body":{"changelog.html":{}}}],["1.4.5",{"_index":380,"title":{},"body":{"changelog.html":{}}}],["1.5.0",{"_index":365,"title":{},"body":{"changelog.html":{}}}],["10",{"_index":366,"title":{},"body":{"changelog.html":{}}}],["100",{"_index":467,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":143,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["11",{"_index":325,"title":{},"body":{"changelog.html":{}}}],["12",{"_index":316,"title":{},"body":{"changelog.html":{}}}],["16/16",{"_index":469,"title":{},"body":{"coverage.html":{}}}],["19",{"_index":392,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":618,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":353,"title":{},"body":{"changelog.html":{}}}],["2.1.0",{"_index":348,"title":{},"body":{"changelog.html":{}}}],["2.2.0",{"_index":330,"title":{},"body":{"changelog.html":{}}}],["2.2.1",{"_index":324,"title":{},"body":{"changelog.html":{}}}],["2.3.0",{"_index":314,"title":{},"body":{"changelog.html":{}}}],["2.3.1",{"_index":306,"title":{},"body":{"changelog.html":{}}}],["20",{"_index":385,"title":{},"body":{"changelog.html":{}}}],["2017",{"_index":384,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["2018",{"_index":315,"title":{},"body":{"changelog.html":{}}}],["2019",{"_index":307,"title":{},"body":{"changelog.html":{}}}],["21",{"_index":349,"title":{},"body":{"changelog.html":{}}}],["26",{"_index":409,"title":{},"body":{"changelog.html":{}}}],["27",{"_index":331,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":326,"title":{},"body":{"changelog.html":{}}}],["3.3.4",{"_index":345,"title":{},"body":{"changelog.html":{}}}],["3/3",{"_index":470,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":435,"title":{},"body":{"changelog.html":{}}}],["31",{"_index":446,"title":{},"body":{"changelog.html":{}}}],["4/4",{"_index":471,"title":{},"body":{"coverage.html":{}}}],["5.0.7",{"_index":475,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":355,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":393,"title":{},"body":{"changelog.html":{}}}],["8/8",{"_index":468,"title":{},"body":{"coverage.html":{}}}],["8086",{"_index":499,"title":{},"body":{"index.html":{}}}],["9",{"_index":394,"title":{},"body":{"changelog.html":{}}}],["above",{"_index":583,"title":{},"body":{"license.html":{}}}],["abstraction",{"_index":131,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["action",{"_index":608,"title":{},"body":{"license.html":{}}}],["ad",{"_index":512,"title":{},"body":{"index.html":{}}}],["adapted",{"_index":357,"title":{},"body":{"changelog.html":{}}}],["added",{"_index":327,"title":{},"body":{"changelog.html":{}}}],["adheres",{"_index":302,"title":{},"body":{"changelog.html":{}}}],["adjusted",{"_index":437,"title":{},"body":{"changelog.html":{}}}],["admin",{"_index":494,"title":{},"body":{"index.html":{}}}],["allow",{"_index":350,"title":{},"body":{"changelog.html":{}}}],["and/or",{"_index":574,"title":{},"body":{"license.html":{}}}],["applied",{"_index":318,"title":{},"body":{"changelog.html":{}}}],["arising",{"_index":612,"title":{},"body":{"license.html":{}}}],["arr",{"_index":86,"title":{},"body":{"classes/DefaultSender.html":{}}}],["array",{"_index":210,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["associated",{"_index":561,"title":{},"body":{"license.html":{}}}],["async",{"_index":174,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["authors",{"_index":601,"title":{},"body":{"license.html":{}}}],["await",{"_index":175,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["b",{"_index":511,"title":{},"body":{"index.html":{}}}],["based",{"_index":300,"title":{},"body":{"changelog.html":{}}}],["basic",{"_index":455,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["before",{"_index":53,"title":{},"body":{"classes/DefaultSender.html":{},"changelog.html":{},"index.html":{}}}],["boolean",{"_index":43,"title":{},"body":{"classes/DefaultSender.html":{}}}],["boots",{"_index":525,"title":{},"body":{"index.html":{}}}],["branches",{"_index":619,"title":{},"body":{"unit-test.html":{}}}],["bug",{"_index":398,"title":{},"body":{"changelog.html":{}}}],["build",{"_index":374,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["buildrun",{"_index":542,"title":{},"body":{"index.html":{}}}],["builds",{"_index":216,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["c",{"_index":551,"title":{},"body":{"license.html":{}}}],["calls",{"_index":170,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["catch",{"_index":199,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["certain",{"_index":407,"title":{},"body":{"changelog.html":{}}}],["chai",{"_index":458,"title":{},"body":{"changelog.html":{}}}],["changed",{"_index":160,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["changelog",{"_index":294,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":296,"title":{},"body":{"changelog.html":{}}}],["charge",{"_index":556,"title":{},"body":{"license.html":{}}}],["check",{"_index":430,"title":{},"body":{"changelog.html":{}}}],["ci",{"_index":360,"title":{},"body":{"changelog.html":{}}}],["claim",{"_index":604,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/DefaultSender.html":{}},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/DefaultSender.html":{},"overview.html":{}}}],["client",{"_index":39,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["clock",{"_index":111,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["code",{"_index":463,"title":{},"body":{"changelog.html":{}}}],["commit",{"_index":448,"title":{},"body":{"changelog.html":{}}}],["common",{"_index":161,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["compile",{"_index":361,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["complete",{"_index":185,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["compodoc",{"_index":376,"title":{},"body":{"changelog.html":{}}}],["components",{"_index":368,"title":{},"body":{"changelog.html":{}}}],["compose",{"_index":523,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":582,"title":{},"body":{"license.html":{}}}],["config",{"_index":17,"title":{},"body":{"classes/DefaultSender.html":{},"changelog.html":{},"index.html":{}}}],["configuration",{"_index":40,"title":{},"body":{"classes/DefaultSender.html":{}}}],["connection",{"_index":614,"title":{},"body":{"license.html":{}}}],["console",{"_index":141,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["const",{"_index":78,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["constructor",{"_index":25,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["constructor(config",{"_index":26,"title":{},"body":{"classes/DefaultSender.html":{}}}],["contract",{"_index":609,"title":{},"body":{"license.html":{}}}],["copies",{"_index":576,"title":{},"body":{"license.html":{}}}],["copy",{"_index":559,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":550,"title":{},"body":{"license.html":{}}}],["corner",{"_index":537,"title":{},"body":{"index.html":{}}}],["counter",{"_index":112,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["counter.getcount",{"_index":218,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["coverage",{"_index":464,"title":{"coverage.html":{}},"body":{"changelog.html":{},"coverage.html":{},"unit-test.html":{}}}],["creates",{"_index":30,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["ctx",{"_index":212,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["ctx.date",{"_index":228,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["ctx.registry",{"_index":235,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["current",{"_index":153,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["damages",{"_index":605,"title":{},"body":{"license.html":{}}}],["dashboard",{"_index":529,"title":{},"body":{"index.html":{}}}],["data",{"_index":55,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["database",{"_index":51,"title":{},"body":{"classes/DefaultSender.html":{},"index.html":{}}}],["date",{"_index":191,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["db",{"_index":18,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["dbconfig",{"_index":492,"title":{},"body":{"index.html":{}}}],["deal",{"_index":563,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":615,"title":{},"body":{"license.html":{}}}],["default",{"_index":8,"title":{},"body":{"classes/DefaultSender.html":{},"changelog.html":{}}}],["defaultsender",{"_index":1,"title":{"classes/DefaultSender.html":{}},"body":{"classes/DefaultSender.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["defaultsender(dbconfig",{"_index":500,"title":{},"body":{"index.html":{}}}],["defined",{"_index":28,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/Sender.html":{}}}],["dependencies",{"_index":313,"title":{"dependencies.html":{}},"body":{"changelog.html":{},"dependencies.html":{}}}],["dependency",{"_index":323,"title":{},"body":{"changelog.html":{}}}],["description",{"_index":7,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["determine",{"_index":152,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["dev",{"_index":520,"title":{},"body":{"index.html":{}}}],["different",{"_index":539,"title":{},"body":{"index.html":{}}}],["directly",{"_index":178,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["distribute",{"_index":572,"title":{},"body":{"license.html":{}}}],["docker",{"_index":522,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":347,"title":{},"body":{"changelog.html":{},"coverage.html":{},"license.html":{}}}],["documented",{"_index":298,"title":{},"body":{"changelog.html":{}}}],["don't",{"_index":410,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":204,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["editorconfig",{"_index":436,"title":{},"body":{"changelog.html":{}}}],["ensures",{"_index":50,"title":{},"body":{"classes/DefaultSender.html":{}}}],["env/boot.sh",{"_index":530,"title":{},"body":{"index.html":{}}}],["error(\"invalid",{"_index":188,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["error(\"sender",{"_index":183,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["error(`error",{"_index":201,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["errors",{"_index":109,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["es2017",{"_index":363,"title":{},"body":{"changelog.html":{}}}],["es6",{"_index":364,"title":{},"body":{"changelog.html":{}}}],["event",{"_index":113,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["event(\"application_started",{"_index":514,"title":{},"body":{"index.html":{}}}],["event.gettime",{"_index":192,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["event.getvalue",{"_index":186,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["events",{"_index":333,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["example",{"_index":13,"title":{},"body":{"classes/DefaultSender.html":{},"index.html":{}}}],["existing",{"_index":52,"title":{},"body":{"classes/DefaultSender.html":{},"changelog.html":{}}}],["export",{"_index":71,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["express",{"_index":592,"title":{},"body":{"license.html":{}}}],["extends",{"_index":103,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["false",{"_index":45,"title":{},"body":{"classes/DefaultSender.html":{}}}],["few",{"_index":508,"title":{},"body":{"index.html":{}}}],["field",{"_index":284,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fieldnameprefix",{"_index":221,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields",{"_index":220,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}count",{"_index":225,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}m15_rate",{"_index":266,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}m1_rate",{"_index":268,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}m5_rate",{"_index":270,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}max",{"_index":242,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}mean",{"_index":244,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}mean_rate",{"_index":272,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}min",{"_index":246,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p50",{"_index":248,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p75",{"_index":250,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p95",{"_index":252,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p98",{"_index":254,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p99",{"_index":256,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p999",{"_index":258,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}stddev",{"_index":260,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}value",{"_index":233,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"coverage.html":{},"unit-test.html":{}}}],["files",{"_index":562,"title":{},"body":{"license.html":{}}}],["fitness",{"_index":597,"title":{},"body":{"license.html":{}}}],["fixed",{"_index":369,"title":{},"body":{"changelog.html":{}}}],["following",{"_index":581,"title":{},"body":{"license.html":{}}}],["format",{"_index":299,"title":{},"body":{"changelog.html":{}}}],["free",{"_index":555,"title":{},"body":{"license.html":{}}}],["function",{"_index":154,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["functions",{"_index":620,"title":{},"body":{"unit-test.html":{}}}],["furnished",{"_index":579,"title":{},"body":{"license.html":{}}}],["gauge",{"_index":114,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["gauge.getvalue",{"_index":230,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["getfieldnameprefix(metric",{"_index":285,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["getlog",{"_index":164,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["getmeasurementname(metric",{"_index":288,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["gets",{"_index":59,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["getting",{"_index":292,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["given",{"_index":135,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["grafana",{"_index":527,"title":{},"body":{"index.html":{}}}],["granted",{"_index":554,"title":{},"body":{"license.html":{}}}],["group",{"_index":427,"title":{},"body":{"changelog.html":{}}}],["handleresults",{"_index":211,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["hereby",{"_index":553,"title":{},"body":{"license.html":{}}}],["histogram",{"_index":115,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["histogram.getcount",{"_index":237,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["histogram.getsnapshot",{"_index":239,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["hoc",{"_index":513,"title":{},"body":{"index.html":{}}}],["holders",{"_index":602,"title":{},"body":{"license.html":{}}}],["home",{"_index":538,"title":{},"body":{"index.html":{}}}],["homepage",{"_index":371,"title":{},"body":{"changelog.html":{}}}],["host",{"_index":497,"title":{},"body":{"index.html":{}}}],["hosts",{"_index":496,"title":{},"body":{"index.html":{}}}],["http://localhost:3000",{"_index":534,"title":{},"body":{"index.html":{}}}],["https://github.com/doubret",{"_index":337,"title":{},"body":{"changelog.html":{}}}],["https://github.com/node",{"_index":489,"title":{},"body":{"index.html":{}}}],["https://github.com/rstiller/inspector",{"_index":334,"title":{},"body":{"changelog.html":{}}}],["iclusterconfig",{"_index":27,"title":{},"body":{"classes/DefaultSender.html":{}}}],["identifier",{"_index":465,"title":{},"body":{"coverage.html":{}}}],["images",{"_index":541,"title":{},"body":{"index.html":{}}}],["implementation",{"_index":9,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["implements",{"_index":12,"title":{},"body":{"classes/DefaultSender.html":{}}}],["implied",{"_index":593,"title":{},"body":{"license.html":{}}}],["import",{"_index":67,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["included",{"_index":586,"title":{},"body":{"license.html":{}}}],["including",{"_index":566,"title":{},"body":{"license.html":{}}}],["index",{"_index":14,"title":{"index.html":{}},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["indicates",{"_index":46,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["influx",{"_index":38,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"dependencies.html":{},"index.html":{}}}],["influx/blob/master/src/index.ts#l80",{"_index":491,"title":{},"body":{"index.html":{}}}],["influx/issues/1",{"_index":352,"title":{},"body":{"changelog.html":{}}}],["influx/node",{"_index":490,"title":{},"body":{"index.html":{}}}],["influx/pull/3",{"_index":335,"title":{},"body":{"changelog.html":{}}}],["influxdb",{"_index":10,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["influxdb(config",{"_index":77,"title":{},"body":{"classes/DefaultSender.html":{}}}],["influxmetricreporter",{"_index":70,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"coverage.html":{},"index.html":{}}}],["influxmetricreporteroptions",{"_index":99,"title":{"interfaces/InfluxMetricReporterOptions.html":{}},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"coverage.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["init",{"_index":22,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["initial",{"_index":447,"title":{},"body":{"changelog.html":{}}}],["initialization",{"_index":133,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["inspector",{"_index":130,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"dependencies.html":{},"index.html":{}}}],["install",{"_index":485,"title":{},"body":{"index.html":{}}}],["installed",{"_index":524,"title":{},"body":{"index.html":{}}}],["instance",{"_index":31,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["instead",{"_index":377,"title":{},"body":{"changelog.html":{}}}],["interface",{"_index":98,"title":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"coverage.html":{}}}],["interfaces",{"_index":100,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"overview.html":{}}}],["interval",{"_index":150,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["introduced",{"_index":403,"title":{},"body":{"changelog.html":{}}}],["ipoint",{"_index":62,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["isnan(value",{"_index":219,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["isready",{"_index":23,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["it's",{"_index":159,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["jenkins",{"_index":460,"title":{},"body":{"changelog.html":{}}}],["jenkinsfile",{"_index":379,"title":{},"body":{"changelog.html":{}}}],["jsdoc",{"_index":367,"title":{},"body":{"changelog.html":{}}}],["keep",{"_index":301,"title":{},"body":{"changelog.html":{}}}],["kind",{"_index":591,"title":{},"body":{"license.html":{}}}],["last",{"_index":400,"title":{},"body":{"changelog.html":{}}}],["left",{"_index":536,"title":{},"body":{"index.html":{}}}],["liability",{"_index":606,"title":{},"body":{"license.html":{}}}],["liable",{"_index":603,"title":{},"body":{"license.html":{}}}],["lib",{"_index":322,"title":{},"body":{"changelog.html":{}}}],["lib/metrics/defaultsender.ts",{"_index":6,"title":{},"body":{"classes/DefaultSender.html":{},"coverage.html":{}}}],["lib/metrics/defaultsender.ts:22",{"_index":42,"title":{},"body":{"classes/DefaultSender.html":{}}}],["lib/metrics/defaultsender.ts:30",{"_index":37,"title":{},"body":{"classes/DefaultSender.html":{}}}],["lib/metrics/defaultsender.ts:38",{"_index":29,"title":{},"body":{"classes/DefaultSender.html":{}}}],["lib/metrics/defaultsender.ts:56",{"_index":49,"title":{},"body":{"classes/DefaultSender.html":{}}}],["lib/metrics/defaultsender.ts:74",{"_index":58,"title":{},"body":{"classes/DefaultSender.html":{}}}],["lib/metrics/defaultsender.ts:84",{"_index":63,"title":{},"body":{"classes/DefaultSender.html":{}}}],["lib/metrics/influxmetricreporter.ts",{"_index":101,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"coverage.html":{}}}],["lib/metrics/influxmetricreporter.ts:42",{"_index":290,"title":{},"body":{"interfaces/Sender.html":{}}}],["lib/metrics/influxmetricreporter.ts:50",{"_index":289,"title":{},"body":{"interfaces/Sender.html":{}}}],["lib/metrics/influxmetricreporter.ts:59",{"_index":291,"title":{},"body":{"interfaces/Sender.html":{}}}],["library",{"_index":479,"title":{},"body":{"index.html":{}}}],["license",{"_index":454,"title":{"license.html":{}},"body":{"changelog.html":{},"license.html":{}}}],["licensed",{"_index":451,"title":{},"body":{"changelog.html":{}}}],["limitation",{"_index":567,"title":{},"body":{"license.html":{}}}],["limited",{"_index":594,"title":{},"body":{"license.html":{}}}],["lines",{"_index":621,"title":{},"body":{"unit-test.html":{}}}],["link",{"_index":136,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["lint",{"_index":450,"title":{},"body":{"changelog.html":{}}}],["linting",{"_index":370,"title":{},"body":{"changelog.html":{}}}],["log",{"_index":105,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["logger",{"_index":106,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["logmetadata",{"_index":140,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["made",{"_index":480,"title":{},"body":{"index.html":{}}}],["map",{"_index":68,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"dependencies.html":{}}}],["match",{"_index":438,"title":{},"body":{"changelog.html":{}}}],["matching",{"_index":96,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"unit-test.html":{}}}],["meant",{"_index":483,"title":{},"body":{"index.html":{}}}],["measurement",{"_index":223,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["memberof",{"_index":72,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["merchantability",{"_index":596,"title":{},"body":{"license.html":{}}}],["merge",{"_index":570,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":139,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["meter",{"_index":116,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["meter.getcount",{"_index":263,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["method",{"_index":171,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["methods",{"_index":20,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/Sender.html":{}}}],["metric",{"_index":117,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["metric.getgroup",{"_index":286,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["metric.getname",{"_index":287,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["metriclogger",{"_index":358,"title":{},"body":{"changelog.html":{}}}],["metricregistry",{"_index":118,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["metrics",{"_index":48,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"dependencies.html":{},"index.html":{}}}],["metrics@1.16.0",{"_index":340,"title":{},"body":{"changelog.html":{}}}],["metrics@1.16.x",{"_index":328,"title":{},"body":{"changelog.html":{}}}],["metrics@1.17.2",{"_index":311,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.11.0",{"_index":373,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.13.0",{"_index":356,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.3.0",{"_index":439,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.4.2",{"_index":426,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.5.0",{"_index":424,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.5.1",{"_index":422,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.5.2",{"_index":416,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.5.4",{"_index":413,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.7.0",{"_index":411,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.8.2",{"_index":395,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.8.3",{"_index":386,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.8.7",{"_index":382,"title":{},"body":{"changelog.html":{}}}],["metricsetreportcontext",{"_index":119,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["metrictype",{"_index":120,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["millisecond",{"_index":121,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["milliseconds",{"_index":509,"title":{},"body":{"index.html":{}}}],["minimum",{"_index":404,"title":{},"body":{"changelog.html":{}}}],["minreportingtimeout",{"_index":146,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["mit",{"_index":453,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["mocha",{"_index":456,"title":{},"body":{"changelog.html":{}}}],["modify",{"_index":569,"title":{},"body":{"license.html":{}}}],["module",{"_index":482,"title":{},"body":{"index.html":{}}}],["modules",{"_index":616,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["monotonecounter",{"_index":122,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["name",{"_index":34,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["names.find((value",{"_index":83,"title":{},"body":{"classes/DefaultSender.html":{}}}],["navigate",{"_index":533,"title":{},"body":{"index.html":{}}}],["need",{"_index":505,"title":{},"body":{"index.html":{}}}],["new",{"_index":76,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"unit-test.html":{}}}],["node",{"_index":481,"title":{},"body":{"index.html":{}}}],["node/register",{"_index":388,"title":{},"body":{"changelog.html":{}}}],["node10",{"_index":548,"title":{},"body":{"index.html":{}}}],["node11license",{"_index":549,"title":{},"body":{"index.html":{}}}],["node6",{"_index":544,"title":{},"body":{"index.html":{}}}],["node7",{"_index":545,"title":{},"body":{"index.html":{}}}],["node8",{"_index":546,"title":{},"body":{"index.html":{}}}],["node9",{"_index":547,"title":{},"body":{"index.html":{}}}],["nodejs",{"_index":338,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["nodejs.it",{"_index":484,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":600,"title":{},"body":{"license.html":{}}}],["notable",{"_index":295,"title":{},"body":{"changelog.html":{}}}],["notice",{"_index":584,"title":{},"body":{"license.html":{}}}],["npm",{"_index":486,"title":{},"body":{"index.html":{}}}],["null",{"_index":107,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["number",{"_index":85,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["nyc",{"_index":462,"title":{},"body":{"changelog.html":{}}}],["object",{"_index":41,"title":{},"body":{"classes/DefaultSender.html":{}}}],["obtaining",{"_index":558,"title":{},"body":{"license.html":{}}}],["option",{"_index":389,"title":{},"body":{"changelog.html":{}}}],["optional",{"_index":36,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/Sender.html":{}}}],["options",{"_index":102,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["ot",{"_index":506,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":611,"title":{},"body":{"license.html":{}}}],["out",{"_index":613,"title":{},"body":{"license.html":{}}}],["overallctx",{"_index":193,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["overallreportcontext",{"_index":123,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["overview",{"_index":617,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":474,"title":{"dependencies.html":{}},"body":{}}],["package.json",{"_index":372,"title":{},"body":{"changelog.html":{}}}],["param",{"_index":73,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["parameters",{"_index":32,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/Sender.html":{}}}],["particular",{"_index":598,"title":{},"body":{"license.html":{}}}],["password",{"_index":495,"title":{},"body":{"index.html":{}}}],["peer",{"_index":329,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["permission",{"_index":552,"title":{},"body":{"license.html":{}}}],["permit",{"_index":577,"title":{},"body":{"license.html":{}}}],["person",{"_index":557,"title":{},"body":{"license.html":{}}}],["persons",{"_index":578,"title":{},"body":{"license.html":{}}}],["pipeline",{"_index":461,"title":{},"body":{"changelog.html":{}}}],["playground",{"_index":339,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["playground.shview",{"_index":532,"title":{},"body":{"index.html":{}}}],["point",{"_index":189,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["point.timestamp",{"_index":195,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["points",{"_index":66,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["port",{"_index":498,"title":{},"body":{"index.html":{}}}],["portions",{"_index":588,"title":{},"body":{"license.html":{}}}],["prefix",{"_index":283,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["private",{"_index":16,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["process",{"_index":134,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["project",{"_index":297,"title":{},"body":{"changelog.html":{}}}],["promise",{"_index":57,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["promise.reject(new",{"_index":187,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["promise.resolve",{"_index":90,"title":{},"body":{"classes/DefaultSender.html":{}}}],["promise.resolve(this.ready",{"_index":93,"title":{},"body":{"classes/DefaultSender.html":{}}}],["properly",{"_index":401,"title":{},"body":{"changelog.html":{}}}],["properties",{"_index":15,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{}}}],["protected",{"_index":206,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["provided",{"_index":589,"title":{},"body":{"license.html":{}}}],["provisions",{"_index":528,"title":{},"body":{"index.html":{}}}],["public",{"_index":21,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["publish",{"_index":571,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":599,"title":{},"body":{"license.html":{}}}],["readme",{"_index":443,"title":{},"body":{"changelog.html":{}}}],["readonly",{"_index":137,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["ready",{"_index":19,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["reason",{"_index":200,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["refactored",{"_index":346,"title":{},"body":{"changelog.html":{}}}],["registered",{"_index":205,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["registry",{"_index":194,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["registry.newtimer(\"requests",{"_index":502,"title":{},"body":{"index.html":{}}}],["removed",{"_index":321,"title":{},"body":{"changelog.html":{}}}],["report",{"_index":47,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"index.html":{}}}],["reportcounter",{"_index":217,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["reported",{"_index":157,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["reporter",{"_index":138,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"index.html":{}}}],["reporter.addmetricregistry(registry",{"_index":504,"title":{},"body":{"index.html":{}}}],["reporter.reportevent(event);local",{"_index":519,"title":{},"body":{"index.html":{}}}],["reporter.setlog(global.console",{"_index":503,"title":{},"body":{"index.html":{}}}],["reporter.start",{"_index":507,"title":{},"body":{"index.html":{}}}],["reportevent>(event",{"_index":179,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["reportgauge(gauge",{"_index":229,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["reporthistogram(histogram",{"_index":236,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["reporting",{"_index":149,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"index.html":{}}}],["reportingresult",{"_index":124,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["reportinterval",{"_index":142,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["reportmeter(meter",{"_index":262,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["reports",{"_index":203,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["reporttimer(timer",{"_index":274,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["requests",{"_index":501,"title":{},"body":{"index.html":{}}}],["requests.time",{"_index":510,"title":{},"body":{"index.html":{}}}],["resolves",{"_index":351,"title":{},"body":{"changelog.html":{}}}],["restriction",{"_index":565,"title":{},"body":{"license.html":{}}}],["result",{"_index":95,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"unit-test.html":{}}}],["result.result",{"_index":214,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["results",{"_index":97,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"unit-test.html":{}}}],["results.map((result",{"_index":213,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["return",{"_index":80,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["returns",{"_index":56,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["rights",{"_index":568,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":429,"title":{},"body":{"changelog.html":{}}}],["run",{"_index":543,"title":{},"body":{"index.html":{}}}],["running",{"_index":531,"title":{},"body":{"index.html":{}}}],["save",{"_index":487,"title":{},"body":{"index.html":{}}}],["scheduledmetricreporter",{"_index":125,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["scheduledmetricreporteroptions",{"_index":104,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["scheduler",{"_index":126,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["scheduling",{"_index":173,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["script",{"_index":432,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["scripts",{"_index":375,"title":{},"body":{"changelog.html":{}}}],["sell",{"_index":575,"title":{},"body":{"license.html":{}}}],["semantic",{"_index":303,"title":{},"body":{"changelog.html":{}}}],["send",{"_index":24,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"index.html":{}}}],["send(points",{"_index":61,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["sender",{"_index":11,"title":{"interfaces/Sender.html":{}},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["senderready",{"_index":207,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["sending",{"_index":54,"title":{},"body":{"classes/DefaultSender.html":{}}}],["sends",{"_index":64,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["server",{"_index":110,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["services",{"_index":526,"title":{},"body":{"index.html":{}}}],["set",{"_index":341,"title":{},"body":{"changelog.html":{}}}],["setinterval",{"_index":145,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["setlog(log",{"_index":167,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["sets",{"_index":166,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["settag(\"customtag",{"_index":517,"title":{},"body":{"index.html":{}}}],["settag(\"mode",{"_index":516,"title":{},"body":{"index.html":{}}}],["setup",{"_index":414,"title":{},"body":{"changelog.html":{}}}],["setvalue(1.0",{"_index":515,"title":{},"body":{"index.html":{}}}],["shall",{"_index":585,"title":{},"body":{"license.html":{}}}],["signature",{"_index":320,"title":{},"body":{"changelog.html":{}}}],["sinon",{"_index":459,"title":{},"body":{"changelog.html":{}}}],["snapshot",{"_index":238,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["software",{"_index":560,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"dependencies.html":{}}}],["specialvalue",{"_index":518,"title":{},"body":{"index.html":{}}}],["specified",{"_index":65,"title":{},"body":{"classes/DefaultSender.html":{}}}],["start",{"_index":172,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"index.html":{}}}],["started",{"_index":293,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["starts",{"_index":169,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["state",{"_index":60,"title":{},"body":{"classes/DefaultSender.html":{}}}],["statements",{"_index":466,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["stdclock",{"_index":127,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["stop",{"_index":319,"title":{},"body":{"changelog.html":{}}}],["stream",{"_index":344,"title":{},"body":{"changelog.html":{}}}],["string",{"_index":84,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["subject",{"_index":580,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":573,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":587,"title":{},"body":{"license.html":{}}}],["super",{"_index":162,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["super.report",{"_index":208,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["super.start",{"_index":177,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["support",{"_index":332,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["support/register",{"_index":69,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["table",{"_index":473,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":472,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tags",{"_index":148,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["target",{"_index":362,"title":{},"body":{"changelog.html":{}}}],["test",{"_index":390,"title":{"unit-test.html":{}},"body":{"changelog.html":{},"index.html":{},"unit-test.html":{}}}],["testing",{"_index":457,"title":{},"body":{"changelog.html":{}}}],["tests",{"_index":441,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["tevent",{"_index":180,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["thanks",{"_index":336,"title":{},"body":{"changelog.html":{}}}],["then((names",{"_index":82,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.buildtags(ctx",{"_index":234,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.buildtags(ctx.registry",{"_index":226,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.config",{"_index":74,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.config.database",{"_index":79,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.db",{"_index":75,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.db.createdatabase(database",{"_index":89,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.db.getdatabasenames",{"_index":81,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.db.writepoints(points",{"_index":94,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.getfieldnameprefix(counter",{"_index":222,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getfieldnameprefix(gauge",{"_index":231,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getfieldnameprefix(histogram",{"_index":240,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getfieldnameprefix(meter",{"_index":264,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getfieldnameprefix(timer",{"_index":277,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getmeasurementname(counter",{"_index":224,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getmeasurementname(gauge",{"_index":232,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getmeasurementname(histogram",{"_index":241,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getmeasurementname(meter",{"_index":265,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getmeasurementname(timer",{"_index":278,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(meter.get15minuterate",{"_index":267,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(meter.get1minuterate",{"_index":269,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(meter.get5minuterate",{"_index":271,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(meter.getmeanrate",{"_index":273,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.get75thpercentile",{"_index":251,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.get95thpercentile",{"_index":253,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.get98thpercentile",{"_index":255,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.get999thpercentile",{"_index":259,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.get99thpercentile",{"_index":257,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.getmax",{"_index":243,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.getmean",{"_index":245,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.getmedian",{"_index":249,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.getmin",{"_index":247,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.getstddev",{"_index":261,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(timer.get15minuterate",{"_index":279,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(timer.get1minuterate",{"_index":280,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(timer.get5minuterate",{"_index":281,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(timer.getmeanrate",{"_index":282,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.handleresults",{"_index":197,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.logmetadata",{"_index":163,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.options.log",{"_index":165,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.options.log.debug(`wrote",{"_index":198,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.options.sender.init",{"_index":176,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.options.sender.isready",{"_index":181,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.options.sender.send(points",{"_index":215,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.ready",{"_index":91,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.reportgauge(event",{"_index":190,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["throw",{"_index":182,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["time",{"_index":151,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["timeout",{"_index":156,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["timer",{"_index":128,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["timer.getcount",{"_index":275,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["timer.getsnapshot",{"_index":276,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["timestamp",{"_index":227,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["timeunit",{"_index":129,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["tort",{"_index":610,"title":{},"body":{"license.html":{}}}],["transitive",{"_index":343,"title":{},"body":{"changelog.html":{}}}],["travis",{"_index":359,"title":{},"body":{"changelog.html":{}}}],["trigger",{"_index":155,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["triggers",{"_index":132,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["true",{"_index":92,"title":{},"body":{"classes/DefaultSender.html":{}}}],["try",{"_index":196,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["ts:ts",{"_index":387,"title":{},"body":{"changelog.html":{}}}],["tsdoc",{"_index":378,"title":{},"body":{"changelog.html":{}}}],["type",{"_index":35,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"coverage.html":{}}}],["typescript",{"_index":449,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["unchanged",{"_index":405,"title":{},"body":{"changelog.html":{}}}],["under",{"_index":452,"title":{},"body":{"changelog.html":{}}}],["unit",{"_index":144,"title":{"unit-test.html":{}},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"unit-test.html":{}}}],["unreleased",{"_index":305,"title":{},"body":{"changelog.html":{}}}],["update",{"_index":399,"title":{},"body":{"changelog.html":{}}}],["updated",{"_index":312,"title":{},"body":{"changelog.html":{}}}],["upper",{"_index":535,"title":{},"body":{"index.html":{}}}],["usage",{"_index":488,"title":{},"body":{"index.html":{}}}],["use",{"_index":310,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["used",{"_index":108,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["username",{"_index":493,"title":{},"body":{"index.html":{}}}],["uses",{"_index":209,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["using",{"_index":521,"title":{},"body":{"index.html":{}}}],["value",{"_index":44,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["value.localecompare(database",{"_index":87,"title":{},"body":{"classes/DefaultSender.html":{}}}],["values",{"_index":406,"title":{},"body":{"changelog.html":{}}}],["version",{"_index":342,"title":{},"body":{"changelog.html":{}}}],["versioning",{"_index":304,"title":{},"body":{"changelog.html":{}}}],["versions",{"_index":540,"title":{},"body":{"index.html":{}}}],["void",{"_index":168,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["wait",{"_index":184,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["warranties",{"_index":595,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":590,"title":{},"body":{"license.html":{}}}],["wether",{"_index":158,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["whether",{"_index":607,"title":{},"body":{"license.html":{}}}],["without",{"_index":564,"title":{},"body":{"license.html":{}}}],["writing",{"_index":202,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["zero",{"_index":420,"title":{},"body":{"changelog.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/DefaultSender.html":{"url":"classes/DefaultSender.html","title":"class - DefaultSender","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DefaultSender\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/DefaultSender.ts\n        \n\n            \n                Description\n            \n            \n                Default implementation for an influxdb sender.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Sender\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                config\n                            \n                            \n                                    Private\n                                db\n                            \n                            \n                                    Private\n                                ready\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                init\n                            \n                            \n                                    Public\n                                isReady\n                            \n                            \n                                    Public\n                                send\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(config: IClusterConfig)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/DefaultSender.ts:38\n                            \n                        \n\n                \n                    \n                            Creates an instance of DefaultSender.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    IClusterConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IClusterConfig\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/DefaultSender.ts:30\n                            \n                        \n\n                \n                    \n                        Influx client configuration object.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            db\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     InfluxDB\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/DefaultSender.ts:22\n                            \n                        \n\n                \n                    \n                        The influxdb client instance.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ready\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/DefaultSender.ts:38\n                            \n                        \n\n                \n                    \n                        Indicates if he sender is ready to report metrics.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            init\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        init()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/DefaultSender.ts:56\n                            \n                        \n\n\n                \n                    \n                            Ensures that a database is existing before sending data.\n\n\n                            \n                                Returns :     Promise\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            isReady\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        isReady()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/DefaultSender.ts:74\n                            \n                        \n\n\n                \n                    \n                            Gets the ready state.\n\n\n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            send\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        send(points: IPoint[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/DefaultSender.ts:84\n                            \n                        \n\n\n                \n                    \n                            Sends the specified data points to the DB.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        points\n                                                        \n                                                                    IPoint[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { IClusterConfig, InfluxDB, IPoint } from \"influx\";\nimport { Sender } from \"./InfluxMetricReporter\";\n\n/**\n * Default implementation for an influxdb sender.\n *\n * @export\n * @class DefaultSender\n * @implements {Sender}\n */\nexport class DefaultSender implements Sender {\n\n    /**\n     * The influxdb client instance.\n     *\n     * @private\n     * @type {InfluxDB}\n     * @memberof DefaultSender\n     */\n    private db: InfluxDB;\n    /**\n     * Influx client configuration object.\n     *\n     * @private\n     * @type {IClusterConfig}\n     * @memberof DefaultSender\n     */\n    private config: IClusterConfig;\n    /**\n     * Indicates if he sender is ready to report metrics.\n     *\n     * @private\n     * @type {boolean}\n     * @memberof DefaultSender\n     */\n    private ready: boolean = false;\n\n    /**\n     * Creates an instance of DefaultSender.\n     *\n     * @param {IClusterConfig} config\n     * @memberof DefaultSender\n     */\n    public constructor(config: IClusterConfig) {\n        this.config = config;\n        this.db = new InfluxDB(config);\n    }\n\n    /**\n     * Ensures that a database is existing before sending data.\n     *\n     * @memberof DefaultSender\n     */\n    public init(): Promise {\n        const database = this.config.database;\n        return this.db.getDatabaseNames()\n            .then((names) => {\n                if (!names.find((value: string, index: number, arr: string[]) => value.localeCompare(database) === 0)) {\n                    return this.db.createDatabase(database);\n                }\n                return Promise.resolve();\n            })\n            .then(() => this.ready = true);\n    }\n\n    /**\n     * Gets the ready state.\n     *\n     * @returns {Promise}\n     * @memberof DefaultSender\n     */\n    public isReady(): Promise {\n        return Promise.resolve(this.ready);\n    }\n\n    /**\n     * Sends the specified data points to the DB.\n     *\n     * @param {IPoint[]} points\n     * @memberof DefaultSender\n     */\n    public send(points: IPoint[]): Promise {\n        return this.db.writePoints(points);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/InfluxMetricReporterOptions.html":{"url":"interfaces/InfluxMetricReporterOptions.html","title":"interface - InfluxMetricReporterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  InfluxMetricReporterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/InfluxMetricReporter.ts\n        \n\n            \n                Description\n            \n            \n                Options for InfluxMetricReporter.\n\n            \n\n            \n                Extends\n            \n            \n                    ScheduledMetricReporterOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        log\n                                \n                                \n                                        sender\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        log\n                                    \n                                \n                                \n                                    \n                                        log:     Logger | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Logger | null\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A logger instance used to report errors.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sender\n                                    \n                                \n                                \n                                    \n                                        sender:     Sender\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Sender\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A sender implementation used to send metrics to influx DB server.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { IPoint } from \"influx\";\nimport {\n    Clock,\n    Counter,\n    Event,\n    Gauge,\n    Histogram,\n    Logger,\n    Meter,\n    Metric,\n    MetricRegistry,\n    MetricSetReportContext,\n    MetricType,\n    MILLISECOND,\n    MonotoneCounter,\n    OverallReportContext,\n    ReportingResult,\n    ScheduledMetricReporter,\n    ScheduledMetricReporterOptions,\n    Scheduler,\n    StdClock,\n    Timer,\n    TimeUnit,\n} from \"inspector-metrics\";\n\n/**\n * Sender interface for influxdb client abstraction.\n *\n * @export\n * @interface Sender\n */\nexport interface Sender {\n\n    /**\n     * Indicates if the sender is ready to send data.\n     *\n     * @returns {Promise}\n     * @memberof Sender\n     */\n    isReady(): Promise;\n\n    /**\n     * Triggers the initialization process.\n     *\n     * @returns {Promise}\n     * @memberof Sender\n     */\n    init(): Promise;\n\n    /**\n     * Sends the given data points to influxdb.\n     *\n     * @param {IPoint[]} points\n     * @returns {Promise}\n     * @memberof Sender\n     */\n    send(points: IPoint[]): Promise;\n\n}\n\n/**\n * Options for {@link InfluxMetricReporter}.\n *\n * @export\n * @interface InfluxMetricReporterOptions\n * @extends {ScheduledMetricReporterOptions}\n */\nexport interface InfluxMetricReporterOptions extends ScheduledMetricReporterOptions {\n    /**\n     * A logger instance used to report errors.\n     *\n     * @type {(Logger | null)}\n     * @memberof InfluxMetricReporterOptions\n     */\n    log: Logger | null;\n    /**\n     * A sender implementation used to send metrics to influx DB server.\n     *\n     * @type {Sender}\n     * @memberof InfluxMetricReporterOptions\n     */\n    readonly sender: Sender;\n}\n\n/**\n * InfluxDB reporter implementation.\n *\n * @export\n * @class InfluxMetricReporter\n * @extends {ScheduledMetricReporter}\n */\nexport class InfluxMetricReporter extends ScheduledMetricReporter {\n\n    /**\n     * Metadata for the logger.\n     *\n     * @private\n     * @type {*}\n     * @memberof InfluxMetricReporter\n     */\n    private logMetadata: any;\n\n    /**\n     * Creates an instance of InfluxMetricReporter.\n     *\n     * @memberof InfluxMetricReporter\n     */\n    public constructor({\n        sender,\n        log = console,\n        reportInterval = 1000,\n        unit = MILLISECOND,\n        clock = new StdClock(),\n        scheduler = setInterval,\n        minReportingTimeout = 1,\n        tags = new Map(),\n    }: {\n            /**\n             * A sender implementation used to send metrics to influx DB server.\n             * @type {Sender}\n             */\n            sender: Sender,\n            /**\n             * The logger instance used to report metrics.\n             * @type {(Logger | null)}\n             */\n            log?: Logger,\n            /**\n             * Reporting interval in the time-unit of {@link #unit}.\n             * @type {number}\n             */\n            reportInterval?: number;\n            /**\n             * The time-unit of the reporting interval.\n             * @type {TimeUnit}\n             */\n            unit?: TimeUnit;\n            /**\n             * The clock instance used determine the current time.\n             * @type {Clock}\n             */\n            clock?: Clock;\n            /**\n             * The scheduler function used to trigger reporting.\n             * @type {Scheduler}\n             */\n            scheduler?: Scheduler;\n            /**\n             * The timeout in which a metrics gets reported wether it's value has changed or not.\n             * @type {number}\n             */\n            minReportingTimeout?: number;\n            /**\n             * Common tags for this reporter instance.\n             * @type {Map}\n             */\n            tags?: Map;\n        }) {\n        super({\n            clock,\n            log,\n            minReportingTimeout,\n            reportInterval,\n            scheduler,\n            sender,\n            tags,\n            unit,\n        });\n\n        this.logMetadata = {\n            reportInterval,\n            tags,\n            unit,\n        };\n    }\n\n    /**\n     * Gets the logger instance.\n     *\n     * @returns {Logger}\n     * @memberof InfluxMetricReporter\n     */\n    public getLog(): Logger {\n        return this.options.log;\n    }\n\n    /**\n     * Sets the logger instance.\n     *\n     * @param {(Logger | null)} log\n     * @memberof InfluxMetricReporter\n     */\n    public setLog(log: Logger | null): void {\n        this.options.log = log;\n    }\n\n    /**\n     * Starts the sender and calls the super method to start scheduling.\n     *\n     * @returns {Promise}\n     * @memberof ScheduledMetricReporter\n     */\n    public async start(): Promise {\n        await this.options.sender.init();\n        return super.start();\n    }\n\n    /**\n     * Sends an event directly to influxdb.\n     *\n     * @param {Event} event\n     * @memberof InfluxMetricReporter\n     */\n    public async reportEvent>(event: TEvent): Promise {\n        if (!(await this.options.sender.isReady())) {\n            throw new Error(\"Sender is not ready. Wait for the 'start' method to complete.\");\n        }\n\n        const value = event.getValue();\n        if (!value) {\n            return Promise.reject(new Error(\"Invalid event value\"));\n        }\n\n        const point = this.reportGauge(event, {\n            date: event.getTime(),\n            metrics: [],\n            overallCtx: {},\n            registry: null,\n            type: \"gauge\",\n        });\n        point.timestamp = event.getTime();\n\n        try {\n            await this.handleResults({}, null, null, \"gauge\", [{\n                metric: event,\n                result: point,\n            }]);\n\n            if (this.options.log) {\n                this.options.log.debug(`wrote event`, this.logMetadata);\n            }\n            return event;\n        } catch (reason) {\n            if (this.options.log) {\n                this.options.log\n                    .error(`error writing event - reason: ${reason}`, reason, this.logMetadata);\n            }\n            throw reason;\n        }\n    }\n\n    /**\n     * Reports the data points for each registered {@link MetricRegistry}.\n     *\n     * @protected\n     * @memberof InfluxMetricReporter\n     */\n    protected async report(): Promise {\n        const senderReady = await this.options.sender.isReady();\n        if (senderReady) {\n            return await super.report();\n        }\n        return {};\n    }\n\n    /**\n     * Uses the sender to report the given data points.\n     *\n     * @protected\n     * @param {MetricRegistry} registry\n     * @param {Date} date\n     * @param {MetricType} type\n     * @param {Array>} results\n     * @returns {Promise}\n     * @memberof InfluxMetricReporter\n     */\n    protected async handleResults(\n        ctx: OverallReportContext,\n        registry: MetricRegistry,\n        date: Date,\n        type: MetricType,\n        results: Array>): Promise {\n        const points = results.map((result) => result.result);\n        try {\n            await this.options.sender.send(points);\n            if (this.options.log) {\n                this.options.log.debug(`wrote ${type} metrics`, this.logMetadata);\n            }\n        } catch (reason) {\n            if (this.options.log) {\n                this.options.log\n                    .error(`error writing ${type} metrics - reason: ${reason}`, reason, this.logMetadata);\n            }\n        }\n    }\n\n    /**\n     * Builds an IPoint instance for the given {@link Counter} or  {@link MonotoneCounter}.\n     *\n     * @protected\n     * @param {(MonotoneCounter | Counter)} counter\n     * @param {(MetricSetReportContext)} ctx\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    protected reportCounter(\n        counter: MonotoneCounter | Counter,\n        ctx: MetricSetReportContext): IPoint {\n        const value = counter.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(counter);\n        const measurement = this.getMeasurementName(counter);\n\n        fields[`${fieldNamePrefix}count`] = counter.getCount() || 0;\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(ctx.registry, counter),\n            timestamp: ctx.date,\n        };\n    }\n\n    /**\n     * Builds an IPoint instance for the given {@link Gauge}.\n     *\n     * @protected\n     * @param {Gauge} gauge\n     * @param {MetricSetReportContext>} ctx\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    protected reportGauge(gauge: Gauge, ctx: MetricSetReportContext>): IPoint {\n        const value = gauge.getValue();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(gauge);\n        const measurement = this.getMeasurementName(gauge);\n\n        fields[`${fieldNamePrefix}value`] = gauge.getValue() || 0;\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(ctx ? ctx.registry : null, gauge),\n            timestamp: ctx.date,\n        };\n    }\n\n    /**\n     * Builds an IPoint instance for the given {@link Histogram}.\n     *\n     * @protected\n     * @param {Histogram} histogram\n     * @param {MetricSetReportContext} ctx\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    protected reportHistogram(histogram: Histogram, ctx: MetricSetReportContext): IPoint {\n        const value = histogram.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = histogram.getSnapshot();\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(histogram);\n        const measurement = this.getMeasurementName(histogram);\n\n        fields[`${fieldNamePrefix}count`] = histogram.getCount() || 0;\n        fields[`${fieldNamePrefix}max`] = this.getNumber(snapshot.getMax());\n        fields[`${fieldNamePrefix}mean`] = this.getNumber(snapshot.getMean());\n        fields[`${fieldNamePrefix}min`] = this.getNumber(snapshot.getMin());\n        fields[`${fieldNamePrefix}p50`] = this.getNumber(snapshot.getMedian());\n        fields[`${fieldNamePrefix}p75`] = this.getNumber(snapshot.get75thPercentile());\n        fields[`${fieldNamePrefix}p95`] = this.getNumber(snapshot.get95thPercentile());\n        fields[`${fieldNamePrefix}p98`] = this.getNumber(snapshot.get98thPercentile());\n        fields[`${fieldNamePrefix}p99`] = this.getNumber(snapshot.get99thPercentile());\n        fields[`${fieldNamePrefix}p999`] = this.getNumber(snapshot.get999thPercentile());\n        fields[`${fieldNamePrefix}stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(ctx.registry, histogram),\n            timestamp: ctx.date,\n        };\n    }\n\n    /**\n     * Builds an IPoint instance for the given {@link Meter}.\n     *\n     * @protected\n     * @param {Meter} meter\n     * @param {MetricSetReportContext} ctx\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    protected reportMeter(meter: Meter, ctx: MetricSetReportContext): IPoint {\n        const value = meter.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(meter);\n        const measurement = this.getMeasurementName(meter);\n\n        fields[`${fieldNamePrefix}count`] = meter.getCount() || 0;\n        fields[`${fieldNamePrefix}m15_rate`] = this.getNumber(meter.get15MinuteRate());\n        fields[`${fieldNamePrefix}m1_rate`] = this.getNumber(meter.get1MinuteRate());\n        fields[`${fieldNamePrefix}m5_rate`] = this.getNumber(meter.get5MinuteRate());\n        fields[`${fieldNamePrefix}mean_rate`] = this.getNumber(meter.getMeanRate());\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(ctx.registry, meter),\n            timestamp: ctx.date,\n        };\n    }\n\n    /**\n     * Builds an IPoint instance for the given {@link Timer}.\n     *\n     * @protected\n     * @param {Timer} timer\n     * @param {MetricSetReportContext} ctx\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    protected reportTimer(timer: Timer, ctx: MetricSetReportContext): IPoint {\n        const value = timer.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = timer.getSnapshot();\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(timer);\n        const measurement = this.getMeasurementName(timer);\n\n        fields[`${fieldNamePrefix}count`] = timer.getCount() || 0;\n        fields[`${fieldNamePrefix}m15_rate`] = this.getNumber(timer.get15MinuteRate());\n        fields[`${fieldNamePrefix}m1_rate`] = this.getNumber(timer.get1MinuteRate());\n        fields[`${fieldNamePrefix}m5_rate`] = this.getNumber(timer.get5MinuteRate());\n        fields[`${fieldNamePrefix}max`] = this.getNumber(snapshot.getMax());\n        fields[`${fieldNamePrefix}mean`] = this.getNumber(snapshot.getMean());\n        fields[`${fieldNamePrefix}mean_rate`] = this.getNumber(timer.getMeanRate());\n        fields[`${fieldNamePrefix}min`] = this.getNumber(snapshot.getMin());\n        fields[`${fieldNamePrefix}p50`] = this.getNumber(snapshot.getMedian());\n        fields[`${fieldNamePrefix}p75`] = this.getNumber(snapshot.get75thPercentile());\n        fields[`${fieldNamePrefix}p95`] = this.getNumber(snapshot.get95thPercentile());\n        fields[`${fieldNamePrefix}p98`] = this.getNumber(snapshot.get98thPercentile());\n        fields[`${fieldNamePrefix}p99`] = this.getNumber(snapshot.get99thPercentile());\n        fields[`${fieldNamePrefix}p999`] = this.getNumber(snapshot.get999thPercentile());\n        fields[`${fieldNamePrefix}stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(ctx.registry, timer),\n            timestamp: ctx.date,\n        };\n    }\n\n    /**\n     * Builds the prefix for a field name.\n     *\n     * @private\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof InfluxMetricReporter\n     */\n    private getFieldNamePrefix(metric: Metric): string {\n        if (metric.getGroup()) {\n            return `${metric.getName()}.`;\n        }\n        return \"\";\n    }\n\n    /**\n     * Builds the prefix for the metric name.\n     *\n     * @private\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof InfluxMetricReporter\n     */\n    private getMeasurementName(metric: Metric): string {\n        if (metric.getGroup()) {\n            return metric.getGroup();\n        }\n        return metric.getName();\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Sender.html":{"url":"interfaces/Sender.html","title":"interface - Sender","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Sender\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/InfluxMetricReporter.ts\n        \n\n            \n                Description\n            \n            \n                Sender interface for influxdb client abstraction.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    init\n                                \n                                \n                                    isReady\n                                \n                                \n                                    send\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            init\n                            \n                            \n                        \n                    \n                \n                \n                    \ninit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/InfluxMetricReporter.ts:50\n                            \n                        \n\n\n                \n                    \n                            Triggers the initialization process.\n\n\n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isReady\n                            \n                            \n                        \n                    \n                \n                \n                    \nisReady()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/InfluxMetricReporter.ts:42\n                            \n                        \n\n\n                \n                    \n                            Indicates if the sender is ready to send data.\n\n\n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            send\n                            \n                            \n                        \n                    \n                \n                \n                    \nsend(points: IPoint[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/InfluxMetricReporter.ts:59\n                            \n                        \n\n\n                \n                    \n                            Sends the given data points to influxdb.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        points\n                                                        \n                                                                    IPoint[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { IPoint } from \"influx\";\nimport {\n    Clock,\n    Counter,\n    Event,\n    Gauge,\n    Histogram,\n    Logger,\n    Meter,\n    Metric,\n    MetricRegistry,\n    MetricSetReportContext,\n    MetricType,\n    MILLISECOND,\n    MonotoneCounter,\n    OverallReportContext,\n    ReportingResult,\n    ScheduledMetricReporter,\n    ScheduledMetricReporterOptions,\n    Scheduler,\n    StdClock,\n    Timer,\n    TimeUnit,\n} from \"inspector-metrics\";\n\n/**\n * Sender interface for influxdb client abstraction.\n *\n * @export\n * @interface Sender\n */\nexport interface Sender {\n\n    /**\n     * Indicates if the sender is ready to send data.\n     *\n     * @returns {Promise}\n     * @memberof Sender\n     */\n    isReady(): Promise;\n\n    /**\n     * Triggers the initialization process.\n     *\n     * @returns {Promise}\n     * @memberof Sender\n     */\n    init(): Promise;\n\n    /**\n     * Sends the given data points to influxdb.\n     *\n     * @param {IPoint[]} points\n     * @returns {Promise}\n     * @memberof Sender\n     */\n    send(points: IPoint[]): Promise;\n\n}\n\n/**\n * Options for {@link InfluxMetricReporter}.\n *\n * @export\n * @interface InfluxMetricReporterOptions\n * @extends {ScheduledMetricReporterOptions}\n */\nexport interface InfluxMetricReporterOptions extends ScheduledMetricReporterOptions {\n    /**\n     * A logger instance used to report errors.\n     *\n     * @type {(Logger | null)}\n     * @memberof InfluxMetricReporterOptions\n     */\n    log: Logger | null;\n    /**\n     * A sender implementation used to send metrics to influx DB server.\n     *\n     * @type {Sender}\n     * @memberof InfluxMetricReporterOptions\n     */\n    readonly sender: Sender;\n}\n\n/**\n * InfluxDB reporter implementation.\n *\n * @export\n * @class InfluxMetricReporter\n * @extends {ScheduledMetricReporter}\n */\nexport class InfluxMetricReporter extends ScheduledMetricReporter {\n\n    /**\n     * Metadata for the logger.\n     *\n     * @private\n     * @type {*}\n     * @memberof InfluxMetricReporter\n     */\n    private logMetadata: any;\n\n    /**\n     * Creates an instance of InfluxMetricReporter.\n     *\n     * @memberof InfluxMetricReporter\n     */\n    public constructor({\n        sender,\n        log = console,\n        reportInterval = 1000,\n        unit = MILLISECOND,\n        clock = new StdClock(),\n        scheduler = setInterval,\n        minReportingTimeout = 1,\n        tags = new Map(),\n    }: {\n            /**\n             * A sender implementation used to send metrics to influx DB server.\n             * @type {Sender}\n             */\n            sender: Sender,\n            /**\n             * The logger instance used to report metrics.\n             * @type {(Logger | null)}\n             */\n            log?: Logger,\n            /**\n             * Reporting interval in the time-unit of {@link #unit}.\n             * @type {number}\n             */\n            reportInterval?: number;\n            /**\n             * The time-unit of the reporting interval.\n             * @type {TimeUnit}\n             */\n            unit?: TimeUnit;\n            /**\n             * The clock instance used determine the current time.\n             * @type {Clock}\n             */\n            clock?: Clock;\n            /**\n             * The scheduler function used to trigger reporting.\n             * @type {Scheduler}\n             */\n            scheduler?: Scheduler;\n            /**\n             * The timeout in which a metrics gets reported wether it's value has changed or not.\n             * @type {number}\n             */\n            minReportingTimeout?: number;\n            /**\n             * Common tags for this reporter instance.\n             * @type {Map}\n             */\n            tags?: Map;\n        }) {\n        super({\n            clock,\n            log,\n            minReportingTimeout,\n            reportInterval,\n            scheduler,\n            sender,\n            tags,\n            unit,\n        });\n\n        this.logMetadata = {\n            reportInterval,\n            tags,\n            unit,\n        };\n    }\n\n    /**\n     * Gets the logger instance.\n     *\n     * @returns {Logger}\n     * @memberof InfluxMetricReporter\n     */\n    public getLog(): Logger {\n        return this.options.log;\n    }\n\n    /**\n     * Sets the logger instance.\n     *\n     * @param {(Logger | null)} log\n     * @memberof InfluxMetricReporter\n     */\n    public setLog(log: Logger | null): void {\n        this.options.log = log;\n    }\n\n    /**\n     * Starts the sender and calls the super method to start scheduling.\n     *\n     * @returns {Promise}\n     * @memberof ScheduledMetricReporter\n     */\n    public async start(): Promise {\n        await this.options.sender.init();\n        return super.start();\n    }\n\n    /**\n     * Sends an event directly to influxdb.\n     *\n     * @param {Event} event\n     * @memberof InfluxMetricReporter\n     */\n    public async reportEvent>(event: TEvent): Promise {\n        if (!(await this.options.sender.isReady())) {\n            throw new Error(\"Sender is not ready. Wait for the 'start' method to complete.\");\n        }\n\n        const value = event.getValue();\n        if (!value) {\n            return Promise.reject(new Error(\"Invalid event value\"));\n        }\n\n        const point = this.reportGauge(event, {\n            date: event.getTime(),\n            metrics: [],\n            overallCtx: {},\n            registry: null,\n            type: \"gauge\",\n        });\n        point.timestamp = event.getTime();\n\n        try {\n            await this.handleResults({}, null, null, \"gauge\", [{\n                metric: event,\n                result: point,\n            }]);\n\n            if (this.options.log) {\n                this.options.log.debug(`wrote event`, this.logMetadata);\n            }\n            return event;\n        } catch (reason) {\n            if (this.options.log) {\n                this.options.log\n                    .error(`error writing event - reason: ${reason}`, reason, this.logMetadata);\n            }\n            throw reason;\n        }\n    }\n\n    /**\n     * Reports the data points for each registered {@link MetricRegistry}.\n     *\n     * @protected\n     * @memberof InfluxMetricReporter\n     */\n    protected async report(): Promise {\n        const senderReady = await this.options.sender.isReady();\n        if (senderReady) {\n            return await super.report();\n        }\n        return {};\n    }\n\n    /**\n     * Uses the sender to report the given data points.\n     *\n     * @protected\n     * @param {MetricRegistry} registry\n     * @param {Date} date\n     * @param {MetricType} type\n     * @param {Array>} results\n     * @returns {Promise}\n     * @memberof InfluxMetricReporter\n     */\n    protected async handleResults(\n        ctx: OverallReportContext,\n        registry: MetricRegistry,\n        date: Date,\n        type: MetricType,\n        results: Array>): Promise {\n        const points = results.map((result) => result.result);\n        try {\n            await this.options.sender.send(points);\n            if (this.options.log) {\n                this.options.log.debug(`wrote ${type} metrics`, this.logMetadata);\n            }\n        } catch (reason) {\n            if (this.options.log) {\n                this.options.log\n                    .error(`error writing ${type} metrics - reason: ${reason}`, reason, this.logMetadata);\n            }\n        }\n    }\n\n    /**\n     * Builds an IPoint instance for the given {@link Counter} or  {@link MonotoneCounter}.\n     *\n     * @protected\n     * @param {(MonotoneCounter | Counter)} counter\n     * @param {(MetricSetReportContext)} ctx\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    protected reportCounter(\n        counter: MonotoneCounter | Counter,\n        ctx: MetricSetReportContext): IPoint {\n        const value = counter.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(counter);\n        const measurement = this.getMeasurementName(counter);\n\n        fields[`${fieldNamePrefix}count`] = counter.getCount() || 0;\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(ctx.registry, counter),\n            timestamp: ctx.date,\n        };\n    }\n\n    /**\n     * Builds an IPoint instance for the given {@link Gauge}.\n     *\n     * @protected\n     * @param {Gauge} gauge\n     * @param {MetricSetReportContext>} ctx\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    protected reportGauge(gauge: Gauge, ctx: MetricSetReportContext>): IPoint {\n        const value = gauge.getValue();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(gauge);\n        const measurement = this.getMeasurementName(gauge);\n\n        fields[`${fieldNamePrefix}value`] = gauge.getValue() || 0;\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(ctx ? ctx.registry : null, gauge),\n            timestamp: ctx.date,\n        };\n    }\n\n    /**\n     * Builds an IPoint instance for the given {@link Histogram}.\n     *\n     * @protected\n     * @param {Histogram} histogram\n     * @param {MetricSetReportContext} ctx\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    protected reportHistogram(histogram: Histogram, ctx: MetricSetReportContext): IPoint {\n        const value = histogram.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = histogram.getSnapshot();\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(histogram);\n        const measurement = this.getMeasurementName(histogram);\n\n        fields[`${fieldNamePrefix}count`] = histogram.getCount() || 0;\n        fields[`${fieldNamePrefix}max`] = this.getNumber(snapshot.getMax());\n        fields[`${fieldNamePrefix}mean`] = this.getNumber(snapshot.getMean());\n        fields[`${fieldNamePrefix}min`] = this.getNumber(snapshot.getMin());\n        fields[`${fieldNamePrefix}p50`] = this.getNumber(snapshot.getMedian());\n        fields[`${fieldNamePrefix}p75`] = this.getNumber(snapshot.get75thPercentile());\n        fields[`${fieldNamePrefix}p95`] = this.getNumber(snapshot.get95thPercentile());\n        fields[`${fieldNamePrefix}p98`] = this.getNumber(snapshot.get98thPercentile());\n        fields[`${fieldNamePrefix}p99`] = this.getNumber(snapshot.get99thPercentile());\n        fields[`${fieldNamePrefix}p999`] = this.getNumber(snapshot.get999thPercentile());\n        fields[`${fieldNamePrefix}stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(ctx.registry, histogram),\n            timestamp: ctx.date,\n        };\n    }\n\n    /**\n     * Builds an IPoint instance for the given {@link Meter}.\n     *\n     * @protected\n     * @param {Meter} meter\n     * @param {MetricSetReportContext} ctx\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    protected reportMeter(meter: Meter, ctx: MetricSetReportContext): IPoint {\n        const value = meter.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(meter);\n        const measurement = this.getMeasurementName(meter);\n\n        fields[`${fieldNamePrefix}count`] = meter.getCount() || 0;\n        fields[`${fieldNamePrefix}m15_rate`] = this.getNumber(meter.get15MinuteRate());\n        fields[`${fieldNamePrefix}m1_rate`] = this.getNumber(meter.get1MinuteRate());\n        fields[`${fieldNamePrefix}m5_rate`] = this.getNumber(meter.get5MinuteRate());\n        fields[`${fieldNamePrefix}mean_rate`] = this.getNumber(meter.getMeanRate());\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(ctx.registry, meter),\n            timestamp: ctx.date,\n        };\n    }\n\n    /**\n     * Builds an IPoint instance for the given {@link Timer}.\n     *\n     * @protected\n     * @param {Timer} timer\n     * @param {MetricSetReportContext} ctx\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    protected reportTimer(timer: Timer, ctx: MetricSetReportContext): IPoint {\n        const value = timer.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = timer.getSnapshot();\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(timer);\n        const measurement = this.getMeasurementName(timer);\n\n        fields[`${fieldNamePrefix}count`] = timer.getCount() || 0;\n        fields[`${fieldNamePrefix}m15_rate`] = this.getNumber(timer.get15MinuteRate());\n        fields[`${fieldNamePrefix}m1_rate`] = this.getNumber(timer.get1MinuteRate());\n        fields[`${fieldNamePrefix}m5_rate`] = this.getNumber(timer.get5MinuteRate());\n        fields[`${fieldNamePrefix}max`] = this.getNumber(snapshot.getMax());\n        fields[`${fieldNamePrefix}mean`] = this.getNumber(snapshot.getMean());\n        fields[`${fieldNamePrefix}mean_rate`] = this.getNumber(timer.getMeanRate());\n        fields[`${fieldNamePrefix}min`] = this.getNumber(snapshot.getMin());\n        fields[`${fieldNamePrefix}p50`] = this.getNumber(snapshot.getMedian());\n        fields[`${fieldNamePrefix}p75`] = this.getNumber(snapshot.get75thPercentile());\n        fields[`${fieldNamePrefix}p95`] = this.getNumber(snapshot.get95thPercentile());\n        fields[`${fieldNamePrefix}p98`] = this.getNumber(snapshot.get98thPercentile());\n        fields[`${fieldNamePrefix}p99`] = this.getNumber(snapshot.get99thPercentile());\n        fields[`${fieldNamePrefix}p999`] = this.getNumber(snapshot.get999thPercentile());\n        fields[`${fieldNamePrefix}stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(ctx.registry, timer),\n            timestamp: ctx.date,\n        };\n    }\n\n    /**\n     * Builds the prefix for a field name.\n     *\n     * @private\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof InfluxMetricReporter\n     */\n    private getFieldNamePrefix(metric: Metric): string {\n        if (metric.getGroup()) {\n            return `${metric.getName()}.`;\n        }\n        return \"\";\n    }\n\n    /**\n     * Builds the prefix for the metric name.\n     *\n     * @private\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof InfluxMetricReporter\n     */\n    private getMeasurementName(metric: Metric): string {\n        if (metric.getGroup()) {\n            return metric.getGroup();\n        }\n        return metric.getName();\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file.\nThe format is based on Keep a Changelog,\nand this project adheres to Semantic Versioning.\n[Unreleased]\n[2.3.1] - 2019-02-08\nChanged\n\nuse inspector-metrics@1.17.2\nupdated dependencies\n\n[2.3.0] - 2018-12-01\nChanged\n\napplied new start & stop method signature\nupdated dependencies\nremoved async lib as dependency\n\n[2.2.1] - 2018-11-28\nChanged\n\nadded inspector-metrics@1.16.x as peer dependency\n\n[2.2.0] - 2018-11-27\nAdded\n\nsupport for reporting events\nhttps://github.com/rstiller/inspector-influx/pull/3\nthanks to https://github.com/doubret\n\n\n\nChanged\n\nadded nodejs 11 to playground\nuse inspector-metrics@1.16.0\nset version of transitive dependency event-stream to 3.3.4\nrefactored playground\nupdated documentation\n\n[2.1.0] - 2018-11-21\nChanged\n\nallow logger to be null - resolves https://github.com/rstiller/inspector-influx/issues/1\n\n[2.0.0] - 2018-11-04\nAdded\n\nchangelog\nsupport for nodejs 6\n\nChanged\n\nupdated dependencies\nuse inspector-metrics@v1.13.0\nadapted new MetricLogger implementation\nadded nodejs 11 to travis-ci config\ncompile target from \"es2017\" to \"es6\"\n\n[1.5.0] - 2018-10-04\nAdded\n\nsupport for MonotoneCounter\njsdoc for components\n\nChanged\n\nfixed linting errors / config\n\"description\" & \"homepage\" in package.json\nupdated dependencies\nuse inspector-metrics@v1.11.0\nrefactored build scripts\nrefactored playground\nuse compodoc instead of tsdoc\n\nRemoved\n\nJenkinsfile\n\n[1.4.5] - 2018-07-08\nChanged\n\nadded nodejs 10 to travis-ci config\nupdated dependencies\nuse inspector-metrics@v1.8.7\n\n[1.4.4] - 2017-11-20\nChanged\n\nupdated dependencies\nuse inspector-metrics@v1.8.3\n\nRemoved\n\n\"ts:ts-node/register\" option from test config\n\n[1.4.3] - 2017-11-19\nChanged\n\nupdated dependencies\nadded nodejs 8 & 9 to travis-ci config\nuse inspector-metrics@v1.8.2\n\n[1.4.2] - 2017-09-28\nChanged\n\nfixed bug: update last report date properly\n\n[1.4.1] - 2017-09-28\nAdded\n\nintroduced minimum reporting timeout (send unchanged values after a certain time)\n\n[1.4.0] - 2017-08-26\nAdded\n\ndon't send unchanged metric values\n\nChanged\n\nuse inspector-metrics@v1.7.0\n\n[1.3.0] - 2017-08-26\nChanged\n\nupdated dependencies\nuse inspector-metrics@v1.5.4\nrefactored / updated playground setup\n\n[1.2.5] - 2017-08-01\nChanged\n\nuse inspector-metrics@v1.5.2\n\n[1.2.4] - 2017-08-01\nAdded\n\ntravis-ci config file\n\nChanged\n\nupdated dependencies\n\n[1.2.3] - 2017-06-10\nChanged\n\ndefault for not existing values is zero (0)\n\n[1.2.2] - 2017-06-10\nChanged\n\nuse inspector-metrics@v1.5.1\n\n[1.2.1] - 2017-06-10\nChanged\n\nuse inspector-metrics@v1.5.0\nrefactored test config\n\n[1.2.0] - 2017-06-10\nAdded\n\nSender interface and DefaultSender implementation\n\nChanged\n\nuse inspector-metrics@v1.4.2\ncompile target from \"es6\" to \"es2017\"\nuse metric group in measurement name\n\n[1.1.2] - 2017-06-07\nChanged\n\nuse rimraf in build\nfixed bug: check if value is null before reporting\n\n[1.1.1] - 2017-06-01\nAdded\n\nplayground setup and script\n\n[1.1.0] - 2017-05-30\nAdded\n\neditorconfig file\nbuild script\n\nChanged\n\nadjusted reporter to match inspector-metrics@v1.3.0\n\n[1.0.2] - 2017-05-11\nChanged\n\nrefactored tests\n\n[1.0.1] - 2017-04-06\nAdded\n\ndocumentation in README\n\n[1.0.0] - 2017-03-31\nInitial commit.\nAdded\n\nproject setup\nREADME\ntypescript config\nlint config\n\n\nlicensed under MIT license\nbasic influx reporter implementation\nmocha testing (with chai, sinon)\nJenkins pipeline\nNYC code-coverage config\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/metrics/DefaultSender.ts\n            \n            class\n            DefaultSender\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                lib/metrics/InfluxMetricReporter.ts\n            \n            class\n            InfluxMetricReporter\n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                lib/metrics/InfluxMetricReporter.ts\n            \n            interface\n            InfluxMetricReporterOptions\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/metrics/InfluxMetricReporter.ts\n            \n            interface\n            Sender\n            \n                100 %\n                (4/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            influx : ^5.0.7\n        \n            inspector-metrics : ^1.17.2\n        \n            source-map-support : ^0.5.10\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            inspector-metrics : >=1.16.x\n    \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\ninspector-influx\nTypescript Metrics Reporter for\nInfluxDB.\n\n    \n        \n    \n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\nThis library is made for inspector-metrics node module and\nis meant to be used with nodejs.It uses node-influx as influxdb client.\ninstall\nnpm install --save inspector-influx\nbasic usage\nimport { DefaultSender, InfluxMetricReporter } from \"inspector-influx\";\nimport { MetricRegistry, Timer } from \"inspector-metrics\";\n\n// influxdb config from https://github.com/node-influx/node-influx/blob/master/src/index.ts#L80\nconst dbConfig = {\n    \"username\": \"admin\",\n    \"password\": \"admin\",\n    \"database\": \"example-db\",\n    \"hosts\": [\n        { \"host\": \"influx\", \"port\": 8086 }\n    ]\n};\n\nconst sender = new DefaultSender(dbConfig);\nconst reporter: InfluxMetricReporter = new InfluxMetricReporter({\n    sender,\n});\nconst registry: MetricRegistry = new MetricRegistry();\nconst requests: Timer = registry.newTimer(\"requests\");\n\nreporter.setLog(global.console);\nreporter.addMetricRegistry(registry);\n\n// need ot wait for the reporter to start\nawait reporter.start();\n\n// example usage\nsetInterval(() => {\n    // should report a few milliseconds\n    requests.time(() => {\n        let a = 0;\n        let b = 1;\n        for (let i = 0; i reporting events\nimport { InfluxMetricReporter } from \"inspector-influx\";\nimport { Event } from \"inspector-metrics\";\n\nconst reporter: InfluxMetricReporter = ...\n\n// need ot wait for the reporter to start before reporting events\nawait reporter.start();\n\n// build an ad-hoc event\nconst event = new Event(\"application_started\")\n    .setValue(1.0)\n    .setTag(\"mode\", \"test\")\n    .setTag(\"customTag\", \"specialValue\");\n\n// send the event to influxdb\nawait reporter.reportEvent(event);local dev\nusing the playground\nTo use the playground you need to have docker and docker-compose installed.\n# boots all services (influxdb / grafana) and provisions the example dashboard\ntest-env/boot.sh\n# running playground script\n./playground.shview data in grafana\n\nNavigate to http://localhost:3000\nNavigate to the example dashboard (upper left corner \"Home\"): \"Example InfluxDB Dashboard\"\n\n\ncompile & test with different nodejs versions\nbuild docker images:  \ndocker-compose buildrun tests:  \ndocker-compose run node6\ndocker-compose run node7\ndocker-compose run node8\ndocker-compose run node9\ndocker-compose run node10\ndocker-compose run node11License\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2017 \nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"unit-test.html":{"url":"unit-test.html","title":"unit-test - unit-test","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Unit test coverage\n\n\n\n    \n    \n    \n    \n\n\n\n    \n        \n            File\n            Statements\n            Branches\n            Functions\n            Lines\n        \n    \n    \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
