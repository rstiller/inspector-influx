var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.5","fields":["title","body"],"fieldVectors":[["title/classes/DefaultSender.html",[0,0.672,1,0.855]],["body/classes/DefaultSender.html",[0,0.954,1,1.555,2,1.208,3,1.331,4,0.461,5,1.538,6,0.962,7,2.44,8,1.728,9,1.896,10,0.895,11,1.538,12,1.331,13,2.128,14,2.456,15,2.302,16,1.787,17,2.346,18,1.331,19,2.435,20,2.068,21,2.068,22,1.422,23,1.208,24,2.821,25,4.019,26,2.93,27,2.821,28,1.671,29,2.068,30,2.128,31,0.092,32,1.331,33,1.868,34,1.331,35,2.039,36,0.954,37,1.646,38,2.821,39,2.821,40,2.039,41,3.49,42,0.962,43,2.821,44,1.671,45,1.058,46,0.832,47,2.039,48,2.821,49,2.44,50,2.128,51,1.671,52,1.646,53,2.382,54,2.302,55,2.039,56,0.832,57,2.821,58,1.671,59,2.171,60,2.039,61,2.821,62,2.068,63,1.525,64,0.962,65,1.208,66,0.765,67,1.671,68,2.302,69,1.671,70,2.039,71,2.039,72,0.461,73,2.039,74,0.962,75,2.039,76,2.039,77,2.039,78,2.039,79,1.671,80,1.208,81,2.039,82,2.039,83,0.765,84,2.039,85,2.039,86,2.039,87,2.039,88,2.039,89,2.039,90,0.058,91,0.058]],["title/interfaces/InfluxMetricReporterOptions.html",[92,0.515,93,1.075]],["body/interfaces/InfluxMetricReporterOptions.html",[0,0.481,2,0.588,3,0.769,4,0.224,6,0.468,8,1.134,9,1.134,10,0.903,12,0.468,13,1.23,14,1.692,16,0.979,17,0.966,18,0.769,19,1.574,20,0.588,21,0.588,22,1.071,23,0.588,28,0.588,29,2.121,31,0.093,32,0.769,33,1.797,34,0.769,36,0.709,37,0.468,42,1.715,44,0.588,45,1.319,46,1.123,52,1.134,53,2.443,54,2.083,56,0.481,58,0.588,59,2.258,62,1.788,63,0.979,64,1.134,65,0.588,66,1.442,67,1.692,68,2.296,69,2.278,72,0.469,74,1.895,79,1.424,80,1.424,83,0.996,90,0.054,91,0.033,92,0.645,93,1.253,94,0.588,95,2.003,96,1.813,97,2.462,98,2.236,99,2.211,100,1.225,101,0.966,102,1.565,103,2.276,104,2.276,105,1.225,106,2.377,107,2.154,108,2.154,109,1.424,110,2.598,111,1.565,112,0.966,113,1.424,114,1.23,115,0.748,116,1.813,117,2.377,118,1.23,119,1.692,120,1.565,121,0.372,122,0.748,123,1.23,124,0.588,125,0.748,126,2.276,127,2.462,128,0.748,129,0.748,130,0.748,131,0.748,132,1.813,133,0.748,134,1.423,135,0.588,136,1.565,137,0.588,138,2.535,139,1.23,140,1.23,141,0.748,142,0.748,143,0.588,144,0.588,145,0.748,146,0.748,147,0.588,148,0.748,149,1.23,150,2.003,151,0.748,152,2.377,153,0.588,154,0.748,155,0.748,156,0.543,157,0.748,158,1.424,159,1.692,160,0.748,161,0.748,162,0.748,163,0.748,164,0.748,165,1.23,166,1.23,167,0.748,168,0.588,169,0.748,170,0.748,171,0.748,172,0.748,173,0.748,174,1.574,175,1.23,176,0.748,177,1.23,178,0.748,179,1.23,180,0.748,181,1.23,182,1.23,183,2.462,184,1.23,185,1.23,186,0.748,187,0.748,188,2.743,189,1.23,190,0.748,191,1.23,192,0.748,193,2.598,194,0.748,195,0.748,196,0.748,197,1.423,198,0.748,199,1.23,200,2.003,201,2.598,202,2.003,203,0.748,204,1.991,205,0.748,206,1.813,207,1.813,208,2.003,209,2.003,210,0.748,211,1.23,212,0.748,213,0.748,214,0.748,215,0.748,216,0.748,217,0.748,218,1.23,219,1.23,220,0.748,221,0.748,222,0.748,223,1.23,224,1.23,225,1.23,226,1.23,227,1.23,228,1.23,229,1.23,230,1.23,231,1.23,232,1.23,233,1.23,234,1.23,235,1.23,236,1.23,237,1.23,238,1.23,239,1.23,240,1.23,241,1.23,242,1.23,243,0.748,244,1.23,245,0.748,246,0.748,247,1.23,248,0.748,249,1.23,250,0.748,251,1.23,252,0.748,253,1.23,254,0.748,255,0.748,256,1.23,257,0.748,258,0.748,259,0.748,260,0.748,261,0.748,262,0.748,263,0.748,264,1.23,265,0.748,266,1.565,267,1.23,268,0.748]],["title/interfaces/Sender.html",[10,0.515,92,0.515]],["body/interfaces/Sender.html",[0,0.477,2,0.583,3,0.763,4,0.222,6,0.464,8,0.973,9,1.341,10,0.887,12,0.464,14,1.685,16,0.763,17,1.222,18,1.128,19,1.566,20,1.417,21,1.417,22,1.221,23,0.583,26,1.556,28,0.583,29,2.078,30,0.742,31,0.093,32,0.973,33,1.776,34,0.763,36,0.608,37,0.763,42,1.711,44,0.959,45,1.288,46,1.11,52,1.341,53,2.461,54,2.18,56,0.477,58,0.959,59,2.292,62,1.928,63,0.973,64,1.128,65,0.583,66,1.427,67,1.685,68,2.292,69,2.274,72,0.466,74,1.892,79,1.417,80,1.417,83,0.992,90,0.054,91,0.033,92,0.679,93,1.128,94,0.583,95,1.804,96,1.556,97,2.145,98,2.15,99,2.15,100,1.128,101,0.583,102,1.221,103,2.268,104,2.268,105,1.221,106,2.369,107,2.145,108,2.145,109,1.417,110,2.591,111,1.556,112,0.959,113,1.417,114,1.221,115,0.742,116,1.804,117,2.369,118,1.221,119,1.685,120,1.556,121,0.369,122,1.221,123,1.556,124,0.959,125,1.221,126,2.369,127,2.455,128,0.742,129,0.742,130,0.742,131,0.742,132,1.804,133,0.742,134,1.418,135,0.583,136,1.556,137,0.583,138,2.528,139,1.221,140,1.222,141,0.742,142,0.742,143,0.583,144,0.583,145,0.742,146,0.742,147,0.583,148,0.742,149,1.221,150,1.994,151,0.742,152,2.369,153,0.583,154,0.742,155,0.742,156,0.54,157,0.742,158,1.417,159,1.685,160,0.742,161,0.742,162,0.742,163,0.742,164,0.742,165,1.221,166,1.221,167,0.742,168,0.583,169,0.742,170,0.742,171,0.742,172,0.742,173,0.742,174,1.566,175,1.221,176,0.742,177,1.222,178,0.742,179,1.221,180,0.742,181,1.221,182,1.221,183,2.455,184,1.221,185,1.221,186,0.742,187,0.742,188,2.737,189,1.221,190,0.742,191,1.221,192,0.742,193,2.591,194,0.742,195,0.742,196,0.742,197,1.418,198,0.742,199,1.221,200,1.994,201,2.591,202,1.994,203,0.742,204,1.985,205,0.742,206,1.804,207,1.804,208,1.994,209,1.994,210,0.742,211,1.221,212,0.742,213,0.742,214,0.742,215,0.742,216,0.742,217,0.742,218,1.221,219,1.221,220,0.742,221,0.742,222,0.742,223,1.221,224,1.221,225,1.221,226,1.221,227,1.221,228,1.221,229,1.221,230,1.221,231,1.221,232,1.221,233,1.221,234,1.221,235,1.221,236,1.221,237,1.221,238,1.221,239,1.221,240,1.221,241,1.221,242,1.221,243,0.742,244,1.221,245,0.742,246,0.742,247,1.221,248,0.742,249,1.221,250,0.742,251,1.221,252,0.742,253,1.221,254,0.742,255,0.742,256,1.221,257,0.742,258,0.742,259,0.742,260,0.742,261,0.742,262,0.742,263,0.742,264,1.221,265,0.742,266,1.556,267,1.221,268,0.742,269,0.983,270,0.983,271,0.983]],["title/changelog.html",[56,0.571,156,0.438,272,1.462]],["body/changelog.html",[1,0.717,4,0.706,6,0.901,7,1.442,8,1.473,10,0.432,15,2.379,18,0.901,22,1.011,31,0.078,32,0.901,34,0.901,36,0.563,42,1.6,45,1.393,46,0.795,50,1.442,51,1.132,72,0.609,83,0.717,90,0.055,91,0.064,92,0.432,98,1.132,99,1.597,100,1.57,101,1.132,105,1.011,113,1.132,121,1.561,124,1.132,140,1.132,144,1.132,147,2.549,153,1.132,156,0.432,158,1.132,174,1.132,197,1.473,204,1.132,272,2.356,273,1.911,274,3.124,275,1.851,276,1.911,277,1.911,278,1.911,279,1.911,280,1.911,281,2.034,282,1.911,283,1.911,284,3.815,285,1.911,286,3.393,287,1.911,288,1.911,289,1.911,290,4.06,291,2.406,292,3.124,293,1.911,294,1.911,295,3.961,296,3.124,297,3.174,298,1.911,299,1.442,300,1.911,301,1.911,302,2.356,303,2.696,304,1.911,305,1.911,306,1.911,307,2.699,308,2.699,309,1.911,310,1.911,311,1.911,312,1.911,313,3.712,314,1.911,315,1.911,316,1.911,317,1.911,318,1.911,319,1.911,320,3.124,321,1.911,322,1.911,323,1.911,324,1.911,325,3.393,326,3.393,327,2.034,328,2.696,329,2.696,330,2.696,331,1.911,332,3.712,333,1.911,334,1.911,335,3.124,336,2.696,337,1.911,338,1.911,339,1.911,340,2.356,341,1.911,342,1.911,343,1.911,344,1.911,345,1.911,346,2.696,347,3.577,348,1.911,349,1.911,350,3.203,351,1.911,352,1.911,353,1.911,354,1.911,355,1.6,356,1.911,357,1.911,358,1.911,359,1.911,360,1.911,361,1.911,362,2.696,363,2.696,364,1.911,365,1.911,366,1.911,367,1.911,368,1.911,369,2.696,370,1.911,371,1.911,372,2.696,373,1.911,374,1.911,375,1.911,376,1.911,377,3.124,378,1.911,379,1.911,380,1.911,381,1.911,382,3.815,383,1.911,384,1.911,385,1.911,386,1.911,387,1.911,388,1.911,389,1.911,390,1.911,391,1.911,392,1.911,393,1.911,394,1.911,395,1.911,396,2.696,397,1.911,398,1.911,399,1.911,400,1.911,401,1.911,402,1.911,403,2.696,404,1.911,405,1.911,406,1.911,407,1.911,408,1.442,409,1.597,410,1.911,411,1.132,412,1.442,413,1.911,414,1.911,415,1.911,416,1.911,417,1.911,418,1.911,419,1.911,420,0.901]],["title/coverage.html",[420,1.435]],["body/coverage.html",[0,1.123,1,1.224,4,0.737,5,2.46,10,0.737,31,0.088,33,1.538,66,1.224,72,0.737,90,0.078,91,0.078,92,0.861,93,1.538,94,2.39,275,1.932,420,1.538,421,3.261,422,2.46,423,4.156,424,3.261,425,3.261,426,3.261,427,3.261,428,2.46,429,2.46]],["title/dependencies.html",[291,1.613,430,1.938]],["body/dependencies.html",[3,1.58,31,0.088,36,0.988,46,1.14,64,1.58,90,0.079,91,0.079,121,1.451,291,2.291,299,2.527,302,2.527,431,3.349,432,3.349,433,3.349,434,3.349]],["title/index.html",[12,0.914,56,0.571,156,0.438]],["body/index.html",[1,0.867,9,1.855,10,0.694,11,2.885,15,1.369,16,1.09,22,0.867,31,0.092,36,1.159,37,1.09,45,1.529,46,1.083,49,1.743,51,1.369,52,1.09,63,1.733,66,1.435,72,0.831,74,1.893,83,1.152,90,0.063,91,0.063,100,1.379,105,1.475,109,2.043,112,1.369,119,1.819,121,1.506,135,1.369,137,1.369,156,0.694,159,2.043,168,1.819,177,1.369,197,1.448,281,1.743,297,1.743,307,1.743,308,2.601,327,1.743,340,1.743,355,1.733,408,1.743,411,1.369,412,1.743,435,2.31,436,2.31,437,3.07,438,1.369,439,2.31,440,2.31,441,3.448,442,2.31,443,2.31,444,3.07,445,2.31,446,2.31,447,2.31,448,2.31,449,2.31,450,3.07,451,2.31,452,3.07,453,2.31,454,2.31,455,2.31,456,2.31,457,2.31,458,2.31,459,2.31,460,3.448,461,3.07,462,3.07,463,2.31,464,2.31,465,2.31,466,2.31,467,2.31,468,2.31,469,2.31,470,2.31,471,2.31,472,2.31,473,2.31,474,4.166,475,4.076,476,2.31,477,2.31,478,3.07,479,2.31,480,3.448,481,2.31,482,4.013,483,2.31,484,3.07,485,2.31,486,2.31,487,2.31,488,2.31,489,2.31,490,2.31,491,2.31,492,2.31,493,2.31,494,2.31,495,2.31,496,2.31,497,2.31,498,2.31]],["title/license.html",[56,0.571,156,0.438,409,1.148]],["body/license.html",[4,0.665,31,0.073,90,0.073,91,0.073,100,1.343,105,1.103,275,1.742,350,2.218,409,1.742,411,1.742,499,3.86,500,2.941,501,3.58,502,2.941,503,2.941,504,2.941,505,2.941,506,3.58,507,2.941,508,4.017,509,4.309,510,2.941,511,3.58,512,3.86,513,2.941,514,3.86,515,3.58,516,2.941,517,2.941,518,2.941,519,2.941,520,2.941,521,2.941,522,2.941,523,2.941,524,2.941,525,2.941,526,2.941,527,2.941,528,2.941,529,2.941,530,3.58,531,3.58,532,2.941,533,2.941,534,2.941,535,3.58,536,2.941,537,2.941,538,2.941,539,2.941,540,2.941,541,2.941,542,2.941,543,2.941,544,2.941,545,2.941,546,2.941,547,2.941,548,2.941,549,2.941,550,2.941,551,2.941,552,2.941,553,2.941,554,2.941,555,2.941,556,2.941,557,2.941]],["title/modules.html",[438,1.803]],["body/modules.html",[31,0.081,90,0.081,91,0.081,438,2.056]],["title/overview.html",[558,2.295]],["body/overview.html",[0,1.015,31,0.08,90,0.08,91,0.08,92,0.778,558,2.597,559,3.929]],["title/unit-test.html",[134,1.162,355,1.162]],["body/unit-test.html",[4,0.769,31,0.08,72,0.769,90,0.08,91,0.08,134,1.605,143,2.016,355,1.605,420,1.605,422,2.566,428,2.566,429,2.566,560,3.402,561,3.402]]],"invertedIndex":[["",{"_index":31,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"unit-test.html":{}}}],["0",{"_index":83,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"index.html":{}}}],["0.5.9",{"_index":433,"title":{},"body":{"dependencies.html":{}}}],["01",{"_index":286,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":405,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":320,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":396,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":382,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":346,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":347,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":362,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":137,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["1.0.0",{"_index":404,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":402,"title":{},"body":{"changelog.html":{}}}],["1.0.2",{"_index":401,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":395,"title":{},"body":{"changelog.html":{}}}],["1.1.1",{"_index":394,"title":{},"body":{"changelog.html":{}}}],["1.1.2",{"_index":391,"title":{},"body":{"changelog.html":{}}}],["1.16.x",{"_index":434,"title":{},"body":{"dependencies.html":{}}}],["1.17.0",{"_index":432,"title":{},"body":{"dependencies.html":{}}}],["1.2.0",{"_index":388,"title":{},"body":{"changelog.html":{}}}],["1.2.1",{"_index":386,"title":{},"body":{"changelog.html":{}}}],["1.2.2",{"_index":384,"title":{},"body":{"changelog.html":{}}}],["1.2.3",{"_index":381,"title":{},"body":{"changelog.html":{}}}],["1.2.4",{"_index":380,"title":{},"body":{"changelog.html":{}}}],["1.2.5",{"_index":378,"title":{},"body":{"changelog.html":{}}}],["1.3.0",{"_index":375,"title":{},"body":{"changelog.html":{}}}],["1.4.0",{"_index":371,"title":{},"body":{"changelog.html":{}}}],["1.4.1",{"_index":366,"title":{},"body":{"changelog.html":{}}}],["1.4.2",{"_index":361,"title":{},"body":{"changelog.html":{}}}],["1.4.3",{"_index":356,"title":{},"body":{"changelog.html":{}}}],["1.4.4",{"_index":349,"title":{},"body":{"changelog.html":{}}}],["1.4.5",{"_index":345,"title":{},"body":{"changelog.html":{}}}],["1.5.0",{"_index":331,"title":{},"body":{"changelog.html":{}}}],["10",{"_index":332,"title":{},"body":{"changelog.html":{}}}],["100",{"_index":423,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":133,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["11",{"_index":295,"title":{},"body":{"changelog.html":{}}}],["12",{"_index":285,"title":{},"body":{"changelog.html":{}}}],["16/16",{"_index":425,"title":{},"body":{"coverage.html":{}}}],["19",{"_index":357,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":559,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":319,"title":{},"body":{"changelog.html":{}}}],["2.1.0",{"_index":314,"title":{},"body":{"changelog.html":{}}}],["2.2.0",{"_index":300,"title":{},"body":{"changelog.html":{}}}],["2.2.1",{"_index":294,"title":{},"body":{"changelog.html":{}}}],["2.3.0",{"_index":283,"title":{},"body":{"changelog.html":{}}}],["20",{"_index":351,"title":{},"body":{"changelog.html":{}}}],["2017",{"_index":350,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["2018",{"_index":284,"title":{},"body":{"changelog.html":{}}}],["21",{"_index":315,"title":{},"body":{"changelog.html":{}}}],["26",{"_index":372,"title":{},"body":{"changelog.html":{}}}],["27",{"_index":301,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":296,"title":{},"body":{"changelog.html":{}}}],["3.3.4",{"_index":312,"title":{},"body":{"changelog.html":{}}}],["3/3",{"_index":426,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":397,"title":{},"body":{"changelog.html":{}}}],["31",{"_index":406,"title":{},"body":{"changelog.html":{}}}],["4/4",{"_index":427,"title":{},"body":{"coverage.html":{}}}],["5.0.7",{"_index":431,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":321,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":358,"title":{},"body":{"changelog.html":{}}}],["8/8",{"_index":424,"title":{},"body":{"coverage.html":{}}}],["8086",{"_index":454,"title":{},"body":{"index.html":{}}}],["9",{"_index":359,"title":{},"body":{"changelog.html":{}}}],["abov",{"_index":529,"title":{},"body":{"license.html":{}}}],["abstract",{"_index":122,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["action",{"_index":551,"title":{},"body":{"license.html":{}}}],["ad",{"_index":297,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["adapt",{"_index":323,"title":{},"body":{"changelog.html":{}}}],["adher",{"_index":279,"title":{},"body":{"changelog.html":{}}}],["adjust",{"_index":399,"title":{},"body":{"changelog.html":{}}}],["admin",{"_index":450,"title":{},"body":{"index.html":{}}}],["allow",{"_index":316,"title":{},"body":{"changelog.html":{}}}],["and/or",{"_index":522,"title":{},"body":{"license.html":{}}}],["appli",{"_index":287,"title":{},"body":{"changelog.html":{}}}],["aris",{"_index":555,"title":{},"body":{"license.html":{}}}],["arr",{"_index":81,"title":{},"body":{"classes/DefaultSender.html":{}}}],["array",{"_index":191,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["associ",{"_index":510,"title":{},"body":{"license.html":{}}}],["async",{"_index":158,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["author",{"_index":544,"title":{},"body":{"license.html":{}}}],["await",{"_index":159,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["b",{"_index":465,"title":{},"body":{"index.html":{}}}],["base",{"_index":277,"title":{},"body":{"changelog.html":{}}}],["basic",{"_index":412,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["befor",{"_index":51,"title":{},"body":{"classes/DefaultSender.html":{},"changelog.html":{},"index.html":{}}}],["boolean",{"_index":41,"title":{},"body":{"classes/DefaultSender.html":{}}}],["boot",{"_index":476,"title":{},"body":{"index.html":{}}}],["branch",{"_index":560,"title":{},"body":{"unit-test.html":{}}}],["bug",{"_index":363,"title":{},"body":{"changelog.html":{}}}],["build",{"_index":197,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"index.html":{}}}],["buildrun",{"_index":492,"title":{},"body":{"index.html":{}}}],["c",{"_index":500,"title":{},"body":{"license.html":{}}}],["call",{"_index":157,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["catch",{"_index":182,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["certain",{"_index":370,"title":{},"body":{"changelog.html":{}}}],["chai",{"_index":414,"title":{},"body":{"changelog.html":{}}}],["chang",{"_index":147,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["changelog",{"_index":272,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["charg",{"_index":505,"title":{},"body":{"license.html":{}}}],["check",{"_index":393,"title":{},"body":{"changelog.html":{}}}],["ci",{"_index":326,"title":{},"body":{"changelog.html":{}}}],["claim",{"_index":547,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/DefaultSender.html":{}},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"coverage.html":{},"overview.html":{}}}],["client",{"_index":37,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["clock",{"_index":103,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["code",{"_index":419,"title":{},"body":{"changelog.html":{}}}],["commit",{"_index":407,"title":{},"body":{"changelog.html":{}}}],["common",{"_index":148,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["compil",{"_index":327,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["complet",{"_index":169,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["compodoc",{"_index":341,"title":{},"body":{"changelog.html":{}}}],["compon",{"_index":334,"title":{},"body":{"changelog.html":{}}}],["compos",{"_index":475,"title":{},"body":{"index.html":{}}}],["condit",{"_index":528,"title":{},"body":{"license.html":{}}}],["config",{"_index":15,"title":{},"body":{"classes/DefaultSender.html":{},"changelog.html":{},"index.html":{}}}],["configur",{"_index":38,"title":{},"body":{"classes/DefaultSender.html":{}}}],["connect",{"_index":557,"title":{},"body":{"license.html":{}}}],["consol",{"_index":131,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["const",{"_index":74,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["constructor",{"_index":23,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["constructor(config",{"_index":24,"title":{},"body":{"classes/DefaultSender.html":{}}}],["contract",{"_index":552,"title":{},"body":{"license.html":{}}}],["copi",{"_index":508,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":499,"title":{},"body":{"license.html":{}}}],["corner",{"_index":488,"title":{},"body":{"index.html":{}}}],["counter",{"_index":104,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["counter.getcount",{"_index":199,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["coverag",{"_index":420,"title":{"coverage.html":{}},"body":{"changelog.html":{},"coverage.html":{},"unit-test.html":{}}}],["creat",{"_index":28,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["ctx",{"_index":193,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["ctx.date",{"_index":209,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["ctx.registri",{"_index":216,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["current",{"_index":142,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["damag",{"_index":548,"title":{},"body":{"license.html":{}}}],["dashboard",{"_index":480,"title":{},"body":{"index.html":{}}}],["data",{"_index":52,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["databas",{"_index":49,"title":{},"body":{"classes/DefaultSender.html":{},"index.html":{}}}],["date",{"_index":174,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["db",{"_index":16,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["dbconfig",{"_index":448,"title":{},"body":{"index.html":{}}}],["deal",{"_index":511,"title":{},"body":{"license.html":{}}}],["default",{"_index":7,"title":{},"body":{"classes/DefaultSender.html":{},"changelog.html":{}}}],["defaultsend",{"_index":1,"title":{"classes/DefaultSender.html":{}},"body":{"classes/DefaultSender.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["defaultsender(dbconfig",{"_index":455,"title":{},"body":{"index.html":{}}}],["defin",{"_index":26,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/Sender.html":{}}}],["depend",{"_index":291,"title":{"dependencies.html":{}},"body":{"changelog.html":{},"dependencies.html":{}}}],["descript",{"_index":6,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["determin",{"_index":141,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["dev",{"_index":473,"title":{},"body":{"index.html":{}}}],["differ",{"_index":490,"title":{},"body":{"index.html":{}}}],["directli",{"_index":162,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["distribut",{"_index":520,"title":{},"body":{"license.html":{}}}],["docker",{"_index":474,"title":{},"body":{"index.html":{}}}],["document",{"_index":275,"title":{},"body":{"changelog.html":{},"coverage.html":{},"license.html":{}}}],["don't",{"_index":373,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":186,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["editorconfig",{"_index":398,"title":{},"body":{"changelog.html":{}}}],["ensur",{"_index":48,"title":{},"body":{"classes/DefaultSender.html":{}}}],["env/boot.sh",{"_index":481,"title":{},"body":{"index.html":{}}}],["error",{"_index":101,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["error(\"invalid",{"_index":172,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["error(\"send",{"_index":167,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["error(`error",{"_index":184,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["es2017",{"_index":329,"title":{},"body":{"changelog.html":{}}}],["es6",{"_index":330,"title":{},"body":{"changelog.html":{}}}],["event",{"_index":105,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["event(\"application_start",{"_index":467,"title":{},"body":{"index.html":{}}}],["event.gettim",{"_index":175,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["event.getvalu",{"_index":170,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["exampl",{"_index":11,"title":{},"body":{"classes/DefaultSender.html":{},"index.html":{}}}],["exist",{"_index":50,"title":{},"body":{"classes/DefaultSender.html":{},"changelog.html":{}}}],["export",{"_index":67,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["express",{"_index":537,"title":{},"body":{"license.html":{}}}],["extend",{"_index":95,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fals",{"_index":43,"title":{},"body":{"classes/DefaultSender.html":{}}}],["few",{"_index":463,"title":{},"body":{"index.html":{}}}],["field",{"_index":201,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fieldnameprefix",{"_index":202,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}count",{"_index":206,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}m15_r",{"_index":247,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}m1_r",{"_index":249,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}m5_r",{"_index":251,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}max",{"_index":223,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}mean",{"_index":225,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}mean_r",{"_index":253,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}min",{"_index":227,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p50",{"_index":229,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p75",{"_index":231,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p95",{"_index":233,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p98",{"_index":235,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p99",{"_index":237,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p999",{"_index":239,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}stddev",{"_index":241,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}valu",{"_index":214,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"coverage.html":{},"license.html":{},"unit-test.html":{}}}],["fit",{"_index":540,"title":{},"body":{"license.html":{}}}],["fix",{"_index":335,"title":{},"body":{"changelog.html":{}}}],["follow",{"_index":527,"title":{},"body":{"license.html":{}}}],["format",{"_index":276,"title":{},"body":{"changelog.html":{}}}],["free",{"_index":504,"title":{},"body":{"license.html":{}}}],["function",{"_index":143,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"unit-test.html":{}}}],["furnish",{"_index":525,"title":{},"body":{"license.html":{}}}],["gaug",{"_index":106,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["gauge.getvalu",{"_index":211,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["get",{"_index":56,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["getfieldnameprefix(metr",{"_index":265,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["getlog",{"_index":151,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["getmeasurementname(metr",{"_index":268,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["given",{"_index":126,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["grafana",{"_index":478,"title":{},"body":{"index.html":{}}}],["grant",{"_index":503,"title":{},"body":{"license.html":{}}}],["group",{"_index":390,"title":{},"body":{"changelog.html":{}}}],["handleresult",{"_index":192,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["herebi",{"_index":502,"title":{},"body":{"license.html":{}}}],["histogram",{"_index":107,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["histogram.getcount",{"_index":218,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["histogram.getsnapshot",{"_index":220,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["hoc",{"_index":466,"title":{},"body":{"index.html":{}}}],["holder",{"_index":545,"title":{},"body":{"license.html":{}}}],["home",{"_index":489,"title":{},"body":{"index.html":{}}}],["homepag",{"_index":337,"title":{},"body":{"changelog.html":{}}}],["host",{"_index":452,"title":{},"body":{"index.html":{}}}],["http://localhost:3000",{"_index":485,"title":{},"body":{"index.html":{}}}],["https://github.com/doubret",{"_index":306,"title":{},"body":{"changelog.html":{}}}],["https://github.com/nod",{"_index":445,"title":{},"body":{"index.html":{}}}],["https://github.com/rstiller/inspector",{"_index":303,"title":{},"body":{"changelog.html":{}}}],["iclusterconfig",{"_index":25,"title":{},"body":{"classes/DefaultSender.html":{}}}],["identifi",{"_index":421,"title":{},"body":{"coverage.html":{}}}],["imag",{"_index":491,"title":{},"body":{"index.html":{}}}],["implement",{"_index":8,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["impli",{"_index":538,"title":{},"body":{"license.html":{}}}],["import",{"_index":63,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["includ",{"_index":514,"title":{},"body":{"license.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["indic",{"_index":44,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["influx",{"_index":36,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"dependencies.html":{},"index.html":{}}}],["influx/blob/master/src/index.ts#l80",{"_index":447,"title":{},"body":{"index.html":{}}}],["influx/issues/1",{"_index":318,"title":{},"body":{"changelog.html":{}}}],["influx/nod",{"_index":446,"title":{},"body":{"index.html":{}}}],["influx/pull/3",{"_index":304,"title":{},"body":{"changelog.html":{}}}],["influxdb",{"_index":9,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["influxdb(config",{"_index":73,"title":{},"body":{"classes/DefaultSender.html":{}}}],["influxmetricreport",{"_index":66,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"coverage.html":{},"index.html":{}}}],["influxmetricreporteropt",{"_index":93,"title":{"interfaces/InfluxMetricReporterOptions.html":{}},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"coverage.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["init",{"_index":20,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["initi",{"_index":124,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["inspector",{"_index":121,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"dependencies.html":{},"index.html":{}}}],["instal",{"_index":441,"title":{},"body":{"index.html":{}}}],["instanc",{"_index":29,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["instead",{"_index":342,"title":{},"body":{"changelog.html":{}}}],["interfac",{"_index":92,"title":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"coverage.html":{},"overview.html":{}}}],["interv",{"_index":139,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["introduc",{"_index":367,"title":{},"body":{"changelog.html":{}}}],["ipoint",{"_index":59,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["isnan(valu",{"_index":200,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["isreadi",{"_index":21,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["it'",{"_index":146,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["jenkin",{"_index":416,"title":{},"body":{"changelog.html":{}}}],["jenkinsfil",{"_index":344,"title":{},"body":{"changelog.html":{}}}],["jsdoc",{"_index":333,"title":{},"body":{"changelog.html":{}}}],["keep",{"_index":278,"title":{},"body":{"changelog.html":{}}}],["kind",{"_index":536,"title":{},"body":{"license.html":{}}}],["last",{"_index":364,"title":{},"body":{"changelog.html":{}}}],["left",{"_index":487,"title":{},"body":{"index.html":{}}}],["liabil",{"_index":549,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":546,"title":{},"body":{"license.html":{}}}],["lib",{"_index":293,"title":{},"body":{"changelog.html":{}}}],["lib/metrics/defaultsender.t",{"_index":5,"title":{},"body":{"classes/DefaultSender.html":{},"coverage.html":{}}}],["lib/metrics/defaultsender.ts:22",{"_index":40,"title":{},"body":{"classes/DefaultSender.html":{}}}],["lib/metrics/defaultsender.ts:30",{"_index":35,"title":{},"body":{"classes/DefaultSender.html":{}}}],["lib/metrics/defaultsender.ts:38",{"_index":27,"title":{},"body":{"classes/DefaultSender.html":{}}}],["lib/metrics/defaultsender.ts:56",{"_index":47,"title":{},"body":{"classes/DefaultSender.html":{}}}],["lib/metrics/defaultsender.ts:74",{"_index":55,"title":{},"body":{"classes/DefaultSender.html":{}}}],["lib/metrics/defaultsender.ts:84",{"_index":60,"title":{},"body":{"classes/DefaultSender.html":{}}}],["lib/metrics/influxmetricreporter.t",{"_index":94,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"coverage.html":{}}}],["lib/metrics/influxmetricreporter.ts:42",{"_index":270,"title":{},"body":{"interfaces/Sender.html":{}}}],["lib/metrics/influxmetricreporter.ts:50",{"_index":269,"title":{},"body":{"interfaces/Sender.html":{}}}],["lib/metrics/influxmetricreporter.ts:59",{"_index":271,"title":{},"body":{"interfaces/Sender.html":{}}}],["librari",{"_index":435,"title":{},"body":{"index.html":{}}}],["licens",{"_index":409,"title":{"license.html":{}},"body":{"changelog.html":{},"license.html":{}}}],["limit",{"_index":515,"title":{},"body":{"license.html":{}}}],["line",{"_index":561,"title":{},"body":{"unit-test.html":{}}}],["link",{"_index":127,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["lint",{"_index":336,"title":{},"body":{"changelog.html":{}}}],["log",{"_index":97,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["logger",{"_index":98,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["logmetadata",{"_index":130,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["made",{"_index":436,"title":{},"body":{"index.html":{}}}],["map",{"_index":64,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"dependencies.html":{}}}],["match",{"_index":91,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"unit-test.html":{}}}],["meant",{"_index":439,"title":{},"body":{"index.html":{}}}],["measur",{"_index":204,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["memberof",{"_index":68,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["merchant",{"_index":539,"title":{},"body":{"license.html":{}}}],["merg",{"_index":518,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":129,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["meter",{"_index":108,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["meter.getcount",{"_index":244,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["method",{"_index":18,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["metric",{"_index":46,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"dependencies.html":{},"index.html":{}}}],["metric.getgroup",{"_index":266,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["metric.getnam",{"_index":267,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["metriclogg",{"_index":324,"title":{},"body":{"changelog.html":{}}}],["metricregistri",{"_index":109,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["metrics@1.16.0",{"_index":309,"title":{},"body":{"changelog.html":{}}}],["metrics@1.16.x",{"_index":298,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.11.0",{"_index":339,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.13.0",{"_index":322,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.3.0",{"_index":400,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.4.2",{"_index":389,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.5.0",{"_index":387,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.5.1",{"_index":385,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.5.2",{"_index":379,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.5.4",{"_index":376,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.7.0",{"_index":374,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.8.2",{"_index":360,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.8.3",{"_index":352,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.8.7",{"_index":348,"title":{},"body":{"changelog.html":{}}}],["metricsetreportcontext",{"_index":110,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["metrictyp",{"_index":111,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["millisecond",{"_index":112,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["minimum",{"_index":368,"title":{},"body":{"changelog.html":{}}}],["minreportingtimeout",{"_index":136,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["mit",{"_index":411,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["mocha",{"_index":413,"title":{},"body":{"changelog.html":{}}}],["modifi",{"_index":517,"title":{},"body":{"license.html":{}}}],["modul",{"_index":438,"title":{"modules.html":{}},"body":{"index.html":{},"modules.html":{}}}],["monotonecount",{"_index":113,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["name",{"_index":32,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["names.find((valu",{"_index":78,"title":{},"body":{"classes/DefaultSender.html":{}}}],["navig",{"_index":484,"title":{},"body":{"index.html":{}}}],["need",{"_index":460,"title":{},"body":{"index.html":{}}}],["new",{"_index":72,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"unit-test.html":{}}}],["node",{"_index":437,"title":{},"body":{"index.html":{}}}],["node/regist",{"_index":354,"title":{},"body":{"changelog.html":{}}}],["node10",{"_index":497,"title":{},"body":{"index.html":{}}}],["node11licens",{"_index":498,"title":{},"body":{"index.html":{}}}],["node6",{"_index":493,"title":{},"body":{"index.html":{}}}],["node7",{"_index":494,"title":{},"body":{"index.html":{}}}],["node8",{"_index":495,"title":{},"body":{"index.html":{}}}],["node9",{"_index":496,"title":{},"body":{"index.html":{}}}],["nodej",{"_index":307,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["nodejs.it",{"_index":440,"title":{},"body":{"index.html":{}}}],["noninfring",{"_index":543,"title":{},"body":{"license.html":{}}}],["notabl",{"_index":273,"title":{},"body":{"changelog.html":{}}}],["notic",{"_index":530,"title":{},"body":{"license.html":{}}}],["npm",{"_index":442,"title":{},"body":{"index.html":{}}}],["null",{"_index":99,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["number",{"_index":80,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["nyc",{"_index":418,"title":{},"body":{"changelog.html":{}}}],["object",{"_index":39,"title":{},"body":{"classes/DefaultSender.html":{}}}],["obtain",{"_index":507,"title":{},"body":{"license.html":{}}}],["option",{"_index":34,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["ot",{"_index":461,"title":{},"body":{"index.html":{}}}],["otherwis",{"_index":554,"title":{},"body":{"license.html":{}}}],["out",{"_index":556,"title":{},"body":{"license.html":{}}}],["overallctx",{"_index":176,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["overallreportcontext",{"_index":114,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["overview",{"_index":558,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":430,"title":{"dependencies.html":{}},"body":{}}],["package.json",{"_index":338,"title":{},"body":{"changelog.html":{}}}],["param",{"_index":69,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["paramet",{"_index":30,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/Sender.html":{}}}],["particular",{"_index":541,"title":{},"body":{"license.html":{}}}],["password",{"_index":451,"title":{},"body":{"index.html":{}}}],["peer",{"_index":299,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["permiss",{"_index":501,"title":{},"body":{"license.html":{}}}],["permit",{"_index":524,"title":{},"body":{"license.html":{}}}],["person",{"_index":506,"title":{},"body":{"license.html":{}}}],["pipelin",{"_index":417,"title":{},"body":{"changelog.html":{}}}],["playground",{"_index":308,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["playground.shview",{"_index":483,"title":{},"body":{"index.html":{}}}],["point",{"_index":62,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["point.timestamp",{"_index":178,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["port",{"_index":453,"title":{},"body":{"index.html":{}}}],["portion",{"_index":533,"title":{},"body":{"license.html":{}}}],["prefix",{"_index":264,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["privat",{"_index":14,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["process",{"_index":125,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["project",{"_index":274,"title":{},"body":{"changelog.html":{}}}],["promis",{"_index":54,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["promise.reject(new",{"_index":171,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["promise.resolv",{"_index":85,"title":{},"body":{"classes/DefaultSender.html":{}}}],["promise.resolve(this.readi",{"_index":88,"title":{},"body":{"classes/DefaultSender.html":{}}}],["properli",{"_index":365,"title":{},"body":{"changelog.html":{}}}],["properti",{"_index":13,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{}}}],["protect",{"_index":188,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["provid",{"_index":534,"title":{},"body":{"license.html":{}}}],["provis",{"_index":479,"title":{},"body":{"index.html":{}}}],["public",{"_index":19,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["publish",{"_index":519,"title":{},"body":{"license.html":{}}}],["purpos",{"_index":542,"title":{},"body":{"license.html":{}}}],["readi",{"_index":17,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["readm",{"_index":403,"title":{},"body":{"changelog.html":{}}}],["readonli",{"_index":128,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["reason",{"_index":183,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["refactor",{"_index":313,"title":{},"body":{"changelog.html":{}}}],["regist",{"_index":187,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["registri",{"_index":177,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["registry.newtimer(\"request",{"_index":457,"title":{},"body":{"index.html":{}}}],["remov",{"_index":292,"title":{},"body":{"changelog.html":{}}}],["report",{"_index":45,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"index.html":{}}}],["reportcount",{"_index":198,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["reporter.addmetricregistry(registri",{"_index":459,"title":{},"body":{"index.html":{}}}],["reporter.reportevent(event);loc",{"_index":472,"title":{},"body":{"index.html":{}}}],["reporter.setlog(global.consol",{"_index":458,"title":{},"body":{"index.html":{}}}],["reporter.start",{"_index":462,"title":{},"body":{"index.html":{}}}],["reportevent>(ev",{"_index":163,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["reportgauge(gaug",{"_index":210,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["reporthistogram(histogram",{"_index":217,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["reportingresult",{"_index":115,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["reportinterv",{"_index":132,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["reportmeter(met",{"_index":243,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["reporttimer(tim",{"_index":255,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["request",{"_index":456,"title":{},"body":{"index.html":{}}}],["requests.tim",{"_index":464,"title":{},"body":{"index.html":{}}}],["resolv",{"_index":317,"title":{},"body":{"changelog.html":{}}}],["restrict",{"_index":513,"title":{},"body":{"license.html":{}}}],["result",{"_index":90,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"unit-test.html":{}}}],["result.result",{"_index":195,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["results.map((result",{"_index":194,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["return",{"_index":53,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["right",{"_index":516,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":392,"title":{},"body":{"changelog.html":{}}}],["run",{"_index":482,"title":{},"body":{"index.html":{}}}],["save",{"_index":443,"title":{},"body":{"index.html":{}}}],["schedul",{"_index":117,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["scheduledmetricreport",{"_index":116,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["scheduledmetricreporteropt",{"_index":96,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["script",{"_index":340,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["sell",{"_index":523,"title":{},"body":{"license.html":{}}}],["semant",{"_index":280,"title":{},"body":{"changelog.html":{}}}],["send",{"_index":22,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"index.html":{}}}],["send(point",{"_index":58,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["sender",{"_index":10,"title":{"interfaces/Sender.html":{}},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["senderreadi",{"_index":189,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["server",{"_index":102,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["servic",{"_index":477,"title":{},"body":{"index.html":{}}}],["set",{"_index":153,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["setinterv",{"_index":135,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["setlog(log",{"_index":154,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["settag(\"customtag",{"_index":470,"title":{},"body":{"index.html":{}}}],["settag(\"mod",{"_index":469,"title":{},"body":{"index.html":{}}}],["setup",{"_index":377,"title":{},"body":{"changelog.html":{}}}],["setvalue(1.0",{"_index":468,"title":{},"body":{"index.html":{}}}],["shall",{"_index":531,"title":{},"body":{"license.html":{}}}],["signatur",{"_index":289,"title":{},"body":{"changelog.html":{}}}],["sinon",{"_index":415,"title":{},"body":{"changelog.html":{}}}],["snapshot",{"_index":219,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["softwar",{"_index":509,"title":{},"body":{"license.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"dependencies.html":{}}}],["specialvalu",{"_index":471,"title":{},"body":{"index.html":{}}}],["specifi",{"_index":61,"title":{},"body":{"classes/DefaultSender.html":{}}}],["start",{"_index":156,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"index.html":{}}}],["state",{"_index":57,"title":{},"body":{"classes/DefaultSender.html":{}}}],["statement",{"_index":422,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["stdclock",{"_index":118,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["stop",{"_index":288,"title":{},"body":{"changelog.html":{}}}],["stream",{"_index":311,"title":{},"body":{"changelog.html":{}}}],["string",{"_index":79,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["subject",{"_index":526,"title":{},"body":{"license.html":{}}}],["sublicens",{"_index":521,"title":{},"body":{"license.html":{}}}],["substanti",{"_index":532,"title":{},"body":{"license.html":{}}}],["super",{"_index":149,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["super.report",{"_index":190,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["super.start",{"_index":161,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["support",{"_index":302,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["support/regist",{"_index":65,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["tabl",{"_index":429,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":428,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tag",{"_index":138,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["target",{"_index":328,"title":{},"body":{"changelog.html":{}}}],["test",{"_index":355,"title":{"unit-test.html":{}},"body":{"changelog.html":{},"index.html":{},"unit-test.html":{}}}],["tevent",{"_index":164,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["thank",{"_index":305,"title":{},"body":{"changelog.html":{}}}],["then((nam",{"_index":77,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.buildtags(ctx",{"_index":215,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.buildtags(ctx.registri",{"_index":207,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.config",{"_index":70,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.config.databas",{"_index":75,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.db",{"_index":71,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.db.createdatabase(databas",{"_index":84,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.db.getdatabasenam",{"_index":76,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.db.writepoints(point",{"_index":89,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.getfieldnameprefix(count",{"_index":203,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getfieldnameprefix(gaug",{"_index":212,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getfieldnameprefix(histogram",{"_index":221,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getfieldnameprefix(met",{"_index":245,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getfieldnameprefix(tim",{"_index":258,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getmeasurementname(count",{"_index":205,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getmeasurementname(gaug",{"_index":213,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getmeasurementname(histogram",{"_index":222,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getmeasurementname(met",{"_index":246,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getmeasurementname(tim",{"_index":259,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(meter.get15minuter",{"_index":248,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(meter.get1minuter",{"_index":250,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(meter.get5minuter",{"_index":252,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(meter.getmeanr",{"_index":254,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.get75thpercentil",{"_index":232,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.get95thpercentil",{"_index":234,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.get98thpercentil",{"_index":236,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.get999thpercentil",{"_index":240,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.get99thpercentil",{"_index":238,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.getmax",{"_index":224,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.getmean",{"_index":226,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.getmedian",{"_index":230,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.getmin",{"_index":228,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.getstddev",{"_index":242,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(timer.get15minuter",{"_index":260,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(timer.get1minuter",{"_index":261,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(timer.get5minuter",{"_index":262,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(timer.getmeanr",{"_index":263,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.handleresult",{"_index":180,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.logmetadata",{"_index":150,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.options.log",{"_index":152,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.options.log.debug(`wrot",{"_index":181,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.options.sender.init",{"_index":160,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.options.sender.isreadi",{"_index":165,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.options.sender.send(point",{"_index":196,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.readi",{"_index":86,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.reportgauge(ev",{"_index":173,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["throw",{"_index":166,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["time",{"_index":140,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["timeout",{"_index":144,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["timer",{"_index":119,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["timer.getcount",{"_index":256,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["timer.getsnapshot",{"_index":257,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["timestamp",{"_index":208,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["timeunit",{"_index":120,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["tort",{"_index":553,"title":{},"body":{"license.html":{}}}],["transit",{"_index":310,"title":{},"body":{"changelog.html":{}}}],["travi",{"_index":325,"title":{},"body":{"changelog.html":{}}}],["tri",{"_index":179,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["trigger",{"_index":123,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["true",{"_index":87,"title":{},"body":{"classes/DefaultSender.html":{}}}],["ts:t",{"_index":353,"title":{},"body":{"changelog.html":{}}}],["tsdoc",{"_index":343,"title":{},"body":{"changelog.html":{}}}],["type",{"_index":33,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"coverage.html":{}}}],["typescript",{"_index":408,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["unchang",{"_index":369,"title":{},"body":{"changelog.html":{}}}],["under",{"_index":410,"title":{},"body":{"changelog.html":{}}}],["unit",{"_index":134,"title":{"unit-test.html":{}},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"unit-test.html":{}}}],["unreleas",{"_index":282,"title":{},"body":{"changelog.html":{}}}],["updat",{"_index":290,"title":{},"body":{"changelog.html":{}}}],["upper",{"_index":486,"title":{},"body":{"index.html":{}}}],["us",{"_index":100,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["usag",{"_index":444,"title":{},"body":{"index.html":{}}}],["usernam",{"_index":449,"title":{},"body":{"index.html":{}}}],["valu",{"_index":42,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["value.localecompare(databas",{"_index":82,"title":{},"body":{"classes/DefaultSender.html":{}}}],["version",{"_index":281,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["void",{"_index":155,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["wait",{"_index":168,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["warranti",{"_index":535,"title":{},"body":{"license.html":{}}}],["wether",{"_index":145,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["whether",{"_index":550,"title":{},"body":{"license.html":{}}}],["without",{"_index":512,"title":{},"body":{"license.html":{}}}],["write",{"_index":185,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["zero",{"_index":383,"title":{},"body":{"changelog.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/DefaultSender.html":{"url":"classes/DefaultSender.html","title":"class - DefaultSender","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DefaultSender\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/DefaultSender.ts\n        \n\n            \n                Description\n            \n            \n                Default implementation for an influxdb sender.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Sender\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                config\n                            \n                            \n                                    Private\n                                db\n                            \n                            \n                                    Private\n                                ready\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                init\n                            \n                            \n                                    Public\n                                isReady\n                            \n                            \n                                    Public\n                                send\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(config: IClusterConfig)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/DefaultSender.ts:38\n                            \n                        \n\n                \n                    \n                            Creates an instance of DefaultSender.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    IClusterConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            config\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        config:     IClusterConfig\n\n                    \n                \n                    \n                        \n                            Type :     IClusterConfig\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/DefaultSender.ts:30\n                            \n                        \n\n                \n                    \n                        Influx client configuration object.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            db\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        db:     InfluxDB\n\n                    \n                \n                    \n                        \n                            Type :     InfluxDB\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/DefaultSender.ts:22\n                            \n                        \n\n                \n                    \n                        The influxdb client instance.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ready\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        ready:     boolean\n\n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/DefaultSender.ts:38\n                            \n                        \n\n                \n                    \n                        Indicates if he sender is ready to report metrics.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            init\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        init()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/DefaultSender.ts:56\n                            \n                        \n\n\n                \n                    \n                            Ensures that a database is existing before sending data.\n\n\n                            \n                                Returns :     Promise\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            isReady\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        isReady()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/DefaultSender.ts:74\n                            \n                        \n\n\n                \n                    \n                            Gets the ready state.\n\n\n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            send\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        send(points: IPoint[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/DefaultSender.ts:84\n                            \n                        \n\n\n                \n                    \n                            Sends the specified data points to the DB.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        points\n                                                        \n                                                                    IPoint[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { IClusterConfig, InfluxDB, IPoint } from \"influx\";\nimport { Sender } from \"./InfluxMetricReporter\";\n\n/**\n * Default implementation for an influxdb sender.\n *\n * @export\n * @class DefaultSender\n * @implements {Sender}\n */\nexport class DefaultSender implements Sender {\n\n    /**\n     * The influxdb client instance.\n     *\n     * @private\n     * @type {InfluxDB}\n     * @memberof DefaultSender\n     */\n    private db: InfluxDB;\n    /**\n     * Influx client configuration object.\n     *\n     * @private\n     * @type {IClusterConfig}\n     * @memberof DefaultSender\n     */\n    private config: IClusterConfig;\n    /**\n     * Indicates if he sender is ready to report metrics.\n     *\n     * @private\n     * @type {boolean}\n     * @memberof DefaultSender\n     */\n    private ready: boolean = false;\n\n    /**\n     * Creates an instance of DefaultSender.\n     *\n     * @param {IClusterConfig} config\n     * @memberof DefaultSender\n     */\n    public constructor(config: IClusterConfig) {\n        this.config = config;\n        this.db = new InfluxDB(config);\n    }\n\n    /**\n     * Ensures that a database is existing before sending data.\n     *\n     * @memberof DefaultSender\n     */\n    public init(): Promise {\n        const database = this.config.database;\n        return this.db.getDatabaseNames()\n            .then((names) => {\n                if (!names.find((value: string, index: number, arr: string[]) => value.localeCompare(database) === 0)) {\n                    return this.db.createDatabase(database);\n                }\n                return Promise.resolve();\n            })\n            .then(() => this.ready = true);\n    }\n\n    /**\n     * Gets the ready state.\n     *\n     * @returns {Promise}\n     * @memberof DefaultSender\n     */\n    public isReady(): Promise {\n        return Promise.resolve(this.ready);\n    }\n\n    /**\n     * Sends the specified data points to the DB.\n     *\n     * @param {IPoint[]} points\n     * @memberof DefaultSender\n     */\n    public send(points: IPoint[]): Promise {\n        return this.db.writePoints(points);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/InfluxMetricReporterOptions.html":{"url":"interfaces/InfluxMetricReporterOptions.html","title":"interface - InfluxMetricReporterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  InfluxMetricReporterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/InfluxMetricReporter.ts\n        \n\n            \n                Description\n            \n            \n                Options for InfluxMetricReporter.\n\n            \n\n            \n                Extends\n            \n            \n                    ScheduledMetricReporterOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        log\n                                \n                                \n                                        sender\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        log\n                                    \n                                \n                                \n                                    \n                                        log:     Logger | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Logger | null\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A logger instance used to report errors.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sender\n                                    \n                                \n                                \n                                    \n                                        sender:     Sender\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Sender\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A sender implementation used to send metrics to influx DB server.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { IPoint } from \"influx\";\nimport {\n    Clock,\n    Counter,\n    Event,\n    Gauge,\n    Histogram,\n    Logger,\n    Meter,\n    Metric,\n    MetricRegistry,\n    MetricSetReportContext,\n    MetricType,\n    MILLISECOND,\n    MonotoneCounter,\n    OverallReportContext,\n    ReportingResult,\n    ScheduledMetricReporter,\n    ScheduledMetricReporterOptions,\n    Scheduler,\n    StdClock,\n    Timer,\n    TimeUnit,\n} from \"inspector-metrics\";\n\n/**\n * Sender interface for influxdb client abstraction.\n *\n * @export\n * @interface Sender\n */\nexport interface Sender {\n\n    /**\n     * Indicates if the sender is ready to send data.\n     *\n     * @returns {Promise}\n     * @memberof Sender\n     */\n    isReady(): Promise;\n\n    /**\n     * Triggers the initialization process.\n     *\n     * @returns {Promise}\n     * @memberof Sender\n     */\n    init(): Promise;\n\n    /**\n     * Sends the given data points to influxdb.\n     *\n     * @param {IPoint[]} points\n     * @returns {Promise}\n     * @memberof Sender\n     */\n    send(points: IPoint[]): Promise;\n\n}\n\n/**\n * Options for {@link InfluxMetricReporter}.\n *\n * @export\n * @interface InfluxMetricReporterOptions\n * @extends {ScheduledMetricReporterOptions}\n */\nexport interface InfluxMetricReporterOptions extends ScheduledMetricReporterOptions {\n    /**\n     * A logger instance used to report errors.\n     *\n     * @type {(Logger | null)}\n     * @memberof InfluxMetricReporterOptions\n     */\n    log: Logger | null;\n    /**\n     * A sender implementation used to send metrics to influx DB server.\n     *\n     * @type {Sender}\n     * @memberof InfluxMetricReporterOptions\n     */\n    readonly sender: Sender;\n}\n\n/**\n * InfluxDB reporter implementation.\n *\n * @export\n * @class InfluxMetricReporter\n * @extends {ScheduledMetricReporter}\n */\nexport class InfluxMetricReporter extends ScheduledMetricReporter {\n\n    /**\n     * Metadata for the logger.\n     *\n     * @private\n     * @type {*}\n     * @memberof InfluxMetricReporter\n     */\n    private logMetadata: any;\n\n    /**\n     * Creates an instance of InfluxMetricReporter.\n     *\n     * @memberof InfluxMetricReporter\n     */\n    public constructor({\n        sender,\n        log = console,\n        reportInterval = 1000,\n        unit = MILLISECOND,\n        clock = new StdClock(),\n        scheduler = setInterval,\n        minReportingTimeout = 1,\n        tags = new Map(),\n    }: {\n            /**\n             * A sender implementation used to send metrics to influx DB server.\n             * @type {Sender}\n             */\n            sender: Sender,\n            /**\n             * The logger instance used to report metrics.\n             * @type {(Logger | null)}\n             */\n            log?: Logger,\n            /**\n             * Reporting interval in the time-unit of {@link #unit}.\n             * @type {number}\n             */\n            reportInterval?: number;\n            /**\n             * The time-unit of the reporting interval.\n             * @type {TimeUnit}\n             */\n            unit?: TimeUnit;\n            /**\n             * The clock instance used determine the current time.\n             * @type {Clock}\n             */\n            clock?: Clock;\n            /**\n             * The scheduler function used to trigger reporting.\n             * @type {Scheduler}\n             */\n            scheduler?: Scheduler;\n            /**\n             * The timeout in which a metrics gets reported wether it's value has changed or not.\n             * @type {number}\n             */\n            minReportingTimeout?: number;\n            /**\n             * Common tags for this reporter instance.\n             * @type {Map}\n             */\n            tags?: Map;\n        }) {\n        super({\n            clock,\n            log,\n            minReportingTimeout,\n            reportInterval,\n            scheduler,\n            sender,\n            tags,\n            unit,\n        });\n\n        this.logMetadata = {\n            reportInterval,\n            tags,\n            unit,\n        };\n    }\n\n    /**\n     * Gets the logger instance.\n     *\n     * @returns {Logger}\n     * @memberof InfluxMetricReporter\n     */\n    public getLog(): Logger {\n        return this.options.log;\n    }\n\n    /**\n     * Sets the logger instance.\n     *\n     * @param {(Logger | null)} log\n     * @memberof InfluxMetricReporter\n     */\n    public setLog(log: Logger | null): void {\n        this.options.log = log;\n    }\n\n    /**\n     * Starts the sender and calls the super method to start scheduling.\n     *\n     * @returns {Promise}\n     * @memberof ScheduledMetricReporter\n     */\n    public async start(): Promise {\n        await this.options.sender.init();\n        return super.start();\n    }\n\n    /**\n     * Sends an event directly to influxdb.\n     *\n     * @param {Event} event\n     * @memberof InfluxMetricReporter\n     */\n    public async reportEvent>(event: TEvent): Promise {\n        if (!(await this.options.sender.isReady())) {\n            throw new Error(\"Sender is not ready. Wait for the 'start' method to complete.\");\n        }\n\n        const value = event.getValue();\n        if (!value) {\n            return Promise.reject(new Error(\"Invalid event value\"));\n        }\n\n        const point = this.reportGauge(event, {\n            date: event.getTime(),\n            metrics: [],\n            overallCtx: {},\n            registry: null,\n            type: \"gauge\",\n        });\n        point.timestamp = event.getTime();\n\n        try {\n            await this.handleResults({}, null, null, \"gauge\", [{\n                metric: event,\n                result: point,\n            }]);\n\n            if (this.options.log) {\n                this.options.log.debug(`wrote event`, this.logMetadata);\n            }\n            return event;\n        } catch (reason) {\n            if (this.options.log) {\n                this.options.log\n                    .error(`error writing event - reason: ${reason}`, reason, this.logMetadata);\n            }\n            throw reason;\n        }\n    }\n\n    /**\n     * Reports the data points for each registered {@link MetricRegistry}.\n     *\n     * @protected\n     * @memberof InfluxMetricReporter\n     */\n    protected async report(): Promise {\n        const senderReady = await this.options.sender.isReady();\n        if (senderReady) {\n            return await super.report();\n        }\n        return {};\n    }\n\n    /**\n     * Uses the sender to report the given data points.\n     *\n     * @protected\n     * @param {MetricRegistry} registry\n     * @param {Date} date\n     * @param {MetricType} type\n     * @param {Array>} results\n     * @returns {Promise}\n     * @memberof InfluxMetricReporter\n     */\n    protected async handleResults(\n        ctx: OverallReportContext,\n        registry: MetricRegistry,\n        date: Date,\n        type: MetricType,\n        results: Array>): Promise {\n        const points = results.map((result) => result.result);\n        try {\n            await this.options.sender.send(points);\n            if (this.options.log) {\n                this.options.log.debug(`wrote ${type} metrics`, this.logMetadata);\n            }\n        } catch (reason) {\n            if (this.options.log) {\n                this.options.log\n                    .error(`error writing ${type} metrics - reason: ${reason}`, reason, this.logMetadata);\n            }\n        }\n    }\n\n    /**\n     * Builds an IPoint instance for the given {@link Counter} or  {@link MonotoneCounter}.\n     *\n     * @protected\n     * @param {(MonotoneCounter | Counter)} counter\n     * @param {(MetricSetReportContext)} ctx\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    protected reportCounter(\n        counter: MonotoneCounter | Counter,\n        ctx: MetricSetReportContext): IPoint {\n        const value = counter.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(counter);\n        const measurement = this.getMeasurementName(counter);\n\n        fields[`${fieldNamePrefix}count`] = counter.getCount() || 0;\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(ctx.registry, counter),\n            timestamp: ctx.date,\n        };\n    }\n\n    /**\n     * Builds an IPoint instance for the given {@link Gauge}.\n     *\n     * @protected\n     * @param {Gauge} gauge\n     * @param {MetricSetReportContext>} ctx\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    protected reportGauge(gauge: Gauge, ctx: MetricSetReportContext>): IPoint {\n        const value = gauge.getValue();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(gauge);\n        const measurement = this.getMeasurementName(gauge);\n\n        fields[`${fieldNamePrefix}value`] = gauge.getValue() || 0;\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(ctx ? ctx.registry : null, gauge),\n            timestamp: ctx.date,\n        };\n    }\n\n    /**\n     * Builds an IPoint instance for the given {@link Histogram}.\n     *\n     * @protected\n     * @param {Histogram} histogram\n     * @param {MetricSetReportContext} ctx\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    protected reportHistogram(histogram: Histogram, ctx: MetricSetReportContext): IPoint {\n        const value = histogram.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = histogram.getSnapshot();\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(histogram);\n        const measurement = this.getMeasurementName(histogram);\n\n        fields[`${fieldNamePrefix}count`] = histogram.getCount() || 0;\n        fields[`${fieldNamePrefix}max`] = this.getNumber(snapshot.getMax());\n        fields[`${fieldNamePrefix}mean`] = this.getNumber(snapshot.getMean());\n        fields[`${fieldNamePrefix}min`] = this.getNumber(snapshot.getMin());\n        fields[`${fieldNamePrefix}p50`] = this.getNumber(snapshot.getMedian());\n        fields[`${fieldNamePrefix}p75`] = this.getNumber(snapshot.get75thPercentile());\n        fields[`${fieldNamePrefix}p95`] = this.getNumber(snapshot.get95thPercentile());\n        fields[`${fieldNamePrefix}p98`] = this.getNumber(snapshot.get98thPercentile());\n        fields[`${fieldNamePrefix}p99`] = this.getNumber(snapshot.get99thPercentile());\n        fields[`${fieldNamePrefix}p999`] = this.getNumber(snapshot.get999thPercentile());\n        fields[`${fieldNamePrefix}stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(ctx.registry, histogram),\n            timestamp: ctx.date,\n        };\n    }\n\n    /**\n     * Builds an IPoint instance for the given {@link Meter}.\n     *\n     * @protected\n     * @param {Meter} meter\n     * @param {MetricSetReportContext} ctx\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    protected reportMeter(meter: Meter, ctx: MetricSetReportContext): IPoint {\n        const value = meter.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(meter);\n        const measurement = this.getMeasurementName(meter);\n\n        fields[`${fieldNamePrefix}count`] = meter.getCount() || 0;\n        fields[`${fieldNamePrefix}m15_rate`] = this.getNumber(meter.get15MinuteRate());\n        fields[`${fieldNamePrefix}m1_rate`] = this.getNumber(meter.get1MinuteRate());\n        fields[`${fieldNamePrefix}m5_rate`] = this.getNumber(meter.get5MinuteRate());\n        fields[`${fieldNamePrefix}mean_rate`] = this.getNumber(meter.getMeanRate());\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(ctx.registry, meter),\n            timestamp: ctx.date,\n        };\n    }\n\n    /**\n     * Builds an IPoint instance for the given {@link Timer}.\n     *\n     * @protected\n     * @param {Timer} timer\n     * @param {MetricSetReportContext} ctx\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    protected reportTimer(timer: Timer, ctx: MetricSetReportContext): IPoint {\n        const value = timer.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = timer.getSnapshot();\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(timer);\n        const measurement = this.getMeasurementName(timer);\n\n        fields[`${fieldNamePrefix}count`] = timer.getCount() || 0;\n        fields[`${fieldNamePrefix}m15_rate`] = this.getNumber(timer.get15MinuteRate());\n        fields[`${fieldNamePrefix}m1_rate`] = this.getNumber(timer.get1MinuteRate());\n        fields[`${fieldNamePrefix}m5_rate`] = this.getNumber(timer.get5MinuteRate());\n        fields[`${fieldNamePrefix}max`] = this.getNumber(snapshot.getMax());\n        fields[`${fieldNamePrefix}mean`] = this.getNumber(snapshot.getMean());\n        fields[`${fieldNamePrefix}mean_rate`] = this.getNumber(timer.getMeanRate());\n        fields[`${fieldNamePrefix}min`] = this.getNumber(snapshot.getMin());\n        fields[`${fieldNamePrefix}p50`] = this.getNumber(snapshot.getMedian());\n        fields[`${fieldNamePrefix}p75`] = this.getNumber(snapshot.get75thPercentile());\n        fields[`${fieldNamePrefix}p95`] = this.getNumber(snapshot.get95thPercentile());\n        fields[`${fieldNamePrefix}p98`] = this.getNumber(snapshot.get98thPercentile());\n        fields[`${fieldNamePrefix}p99`] = this.getNumber(snapshot.get99thPercentile());\n        fields[`${fieldNamePrefix}p999`] = this.getNumber(snapshot.get999thPercentile());\n        fields[`${fieldNamePrefix}stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(ctx.registry, timer),\n            timestamp: ctx.date,\n        };\n    }\n\n    /**\n     * Builds the prefix for a field name.\n     *\n     * @private\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof InfluxMetricReporter\n     */\n    private getFieldNamePrefix(metric: Metric): string {\n        if (metric.getGroup()) {\n            return `${metric.getName()}.`;\n        }\n        return \"\";\n    }\n\n    /**\n     * Builds the prefix for the metric name.\n     *\n     * @private\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof InfluxMetricReporter\n     */\n    private getMeasurementName(metric: Metric): string {\n        if (metric.getGroup()) {\n            return metric.getGroup();\n        }\n        return metric.getName();\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Sender.html":{"url":"interfaces/Sender.html","title":"interface - Sender","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Sender\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/InfluxMetricReporter.ts\n        \n\n            \n                Description\n            \n            \n                Sender interface for influxdb client abstraction.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    init\n                                \n                                \n                                    isReady\n                                \n                                \n                                    send\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            init\n                            \n                            \n                        \n                    \n                \n                \n                    \ninit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/InfluxMetricReporter.ts:50\n                            \n                        \n\n\n                \n                    \n                            Triggers the initialization process.\n\n\n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isReady\n                            \n                            \n                        \n                    \n                \n                \n                    \nisReady()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/InfluxMetricReporter.ts:42\n                            \n                        \n\n\n                \n                    \n                            Indicates if the sender is ready to send data.\n\n\n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            send\n                            \n                            \n                        \n                    \n                \n                \n                    \nsend(points: IPoint[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/InfluxMetricReporter.ts:59\n                            \n                        \n\n\n                \n                    \n                            Sends the given data points to influxdb.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        points\n                                                        \n                                                                    IPoint[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { IPoint } from \"influx\";\nimport {\n    Clock,\n    Counter,\n    Event,\n    Gauge,\n    Histogram,\n    Logger,\n    Meter,\n    Metric,\n    MetricRegistry,\n    MetricSetReportContext,\n    MetricType,\n    MILLISECOND,\n    MonotoneCounter,\n    OverallReportContext,\n    ReportingResult,\n    ScheduledMetricReporter,\n    ScheduledMetricReporterOptions,\n    Scheduler,\n    StdClock,\n    Timer,\n    TimeUnit,\n} from \"inspector-metrics\";\n\n/**\n * Sender interface for influxdb client abstraction.\n *\n * @export\n * @interface Sender\n */\nexport interface Sender {\n\n    /**\n     * Indicates if the sender is ready to send data.\n     *\n     * @returns {Promise}\n     * @memberof Sender\n     */\n    isReady(): Promise;\n\n    /**\n     * Triggers the initialization process.\n     *\n     * @returns {Promise}\n     * @memberof Sender\n     */\n    init(): Promise;\n\n    /**\n     * Sends the given data points to influxdb.\n     *\n     * @param {IPoint[]} points\n     * @returns {Promise}\n     * @memberof Sender\n     */\n    send(points: IPoint[]): Promise;\n\n}\n\n/**\n * Options for {@link InfluxMetricReporter}.\n *\n * @export\n * @interface InfluxMetricReporterOptions\n * @extends {ScheduledMetricReporterOptions}\n */\nexport interface InfluxMetricReporterOptions extends ScheduledMetricReporterOptions {\n    /**\n     * A logger instance used to report errors.\n     *\n     * @type {(Logger | null)}\n     * @memberof InfluxMetricReporterOptions\n     */\n    log: Logger | null;\n    /**\n     * A sender implementation used to send metrics to influx DB server.\n     *\n     * @type {Sender}\n     * @memberof InfluxMetricReporterOptions\n     */\n    readonly sender: Sender;\n}\n\n/**\n * InfluxDB reporter implementation.\n *\n * @export\n * @class InfluxMetricReporter\n * @extends {ScheduledMetricReporter}\n */\nexport class InfluxMetricReporter extends ScheduledMetricReporter {\n\n    /**\n     * Metadata for the logger.\n     *\n     * @private\n     * @type {*}\n     * @memberof InfluxMetricReporter\n     */\n    private logMetadata: any;\n\n    /**\n     * Creates an instance of InfluxMetricReporter.\n     *\n     * @memberof InfluxMetricReporter\n     */\n    public constructor({\n        sender,\n        log = console,\n        reportInterval = 1000,\n        unit = MILLISECOND,\n        clock = new StdClock(),\n        scheduler = setInterval,\n        minReportingTimeout = 1,\n        tags = new Map(),\n    }: {\n            /**\n             * A sender implementation used to send metrics to influx DB server.\n             * @type {Sender}\n             */\n            sender: Sender,\n            /**\n             * The logger instance used to report metrics.\n             * @type {(Logger | null)}\n             */\n            log?: Logger,\n            /**\n             * Reporting interval in the time-unit of {@link #unit}.\n             * @type {number}\n             */\n            reportInterval?: number;\n            /**\n             * The time-unit of the reporting interval.\n             * @type {TimeUnit}\n             */\n            unit?: TimeUnit;\n            /**\n             * The clock instance used determine the current time.\n             * @type {Clock}\n             */\n            clock?: Clock;\n            /**\n             * The scheduler function used to trigger reporting.\n             * @type {Scheduler}\n             */\n            scheduler?: Scheduler;\n            /**\n             * The timeout in which a metrics gets reported wether it's value has changed or not.\n             * @type {number}\n             */\n            minReportingTimeout?: number;\n            /**\n             * Common tags for this reporter instance.\n             * @type {Map}\n             */\n            tags?: Map;\n        }) {\n        super({\n            clock,\n            log,\n            minReportingTimeout,\n            reportInterval,\n            scheduler,\n            sender,\n            tags,\n            unit,\n        });\n\n        this.logMetadata = {\n            reportInterval,\n            tags,\n            unit,\n        };\n    }\n\n    /**\n     * Gets the logger instance.\n     *\n     * @returns {Logger}\n     * @memberof InfluxMetricReporter\n     */\n    public getLog(): Logger {\n        return this.options.log;\n    }\n\n    /**\n     * Sets the logger instance.\n     *\n     * @param {(Logger | null)} log\n     * @memberof InfluxMetricReporter\n     */\n    public setLog(log: Logger | null): void {\n        this.options.log = log;\n    }\n\n    /**\n     * Starts the sender and calls the super method to start scheduling.\n     *\n     * @returns {Promise}\n     * @memberof ScheduledMetricReporter\n     */\n    public async start(): Promise {\n        await this.options.sender.init();\n        return super.start();\n    }\n\n    /**\n     * Sends an event directly to influxdb.\n     *\n     * @param {Event} event\n     * @memberof InfluxMetricReporter\n     */\n    public async reportEvent>(event: TEvent): Promise {\n        if (!(await this.options.sender.isReady())) {\n            throw new Error(\"Sender is not ready. Wait for the 'start' method to complete.\");\n        }\n\n        const value = event.getValue();\n        if (!value) {\n            return Promise.reject(new Error(\"Invalid event value\"));\n        }\n\n        const point = this.reportGauge(event, {\n            date: event.getTime(),\n            metrics: [],\n            overallCtx: {},\n            registry: null,\n            type: \"gauge\",\n        });\n        point.timestamp = event.getTime();\n\n        try {\n            await this.handleResults({}, null, null, \"gauge\", [{\n                metric: event,\n                result: point,\n            }]);\n\n            if (this.options.log) {\n                this.options.log.debug(`wrote event`, this.logMetadata);\n            }\n            return event;\n        } catch (reason) {\n            if (this.options.log) {\n                this.options.log\n                    .error(`error writing event - reason: ${reason}`, reason, this.logMetadata);\n            }\n            throw reason;\n        }\n    }\n\n    /**\n     * Reports the data points for each registered {@link MetricRegistry}.\n     *\n     * @protected\n     * @memberof InfluxMetricReporter\n     */\n    protected async report(): Promise {\n        const senderReady = await this.options.sender.isReady();\n        if (senderReady) {\n            return await super.report();\n        }\n        return {};\n    }\n\n    /**\n     * Uses the sender to report the given data points.\n     *\n     * @protected\n     * @param {MetricRegistry} registry\n     * @param {Date} date\n     * @param {MetricType} type\n     * @param {Array>} results\n     * @returns {Promise}\n     * @memberof InfluxMetricReporter\n     */\n    protected async handleResults(\n        ctx: OverallReportContext,\n        registry: MetricRegistry,\n        date: Date,\n        type: MetricType,\n        results: Array>): Promise {\n        const points = results.map((result) => result.result);\n        try {\n            await this.options.sender.send(points);\n            if (this.options.log) {\n                this.options.log.debug(`wrote ${type} metrics`, this.logMetadata);\n            }\n        } catch (reason) {\n            if (this.options.log) {\n                this.options.log\n                    .error(`error writing ${type} metrics - reason: ${reason}`, reason, this.logMetadata);\n            }\n        }\n    }\n\n    /**\n     * Builds an IPoint instance for the given {@link Counter} or  {@link MonotoneCounter}.\n     *\n     * @protected\n     * @param {(MonotoneCounter | Counter)} counter\n     * @param {(MetricSetReportContext)} ctx\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    protected reportCounter(\n        counter: MonotoneCounter | Counter,\n        ctx: MetricSetReportContext): IPoint {\n        const value = counter.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(counter);\n        const measurement = this.getMeasurementName(counter);\n\n        fields[`${fieldNamePrefix}count`] = counter.getCount() || 0;\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(ctx.registry, counter),\n            timestamp: ctx.date,\n        };\n    }\n\n    /**\n     * Builds an IPoint instance for the given {@link Gauge}.\n     *\n     * @protected\n     * @param {Gauge} gauge\n     * @param {MetricSetReportContext>} ctx\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    protected reportGauge(gauge: Gauge, ctx: MetricSetReportContext>): IPoint {\n        const value = gauge.getValue();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(gauge);\n        const measurement = this.getMeasurementName(gauge);\n\n        fields[`${fieldNamePrefix}value`] = gauge.getValue() || 0;\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(ctx ? ctx.registry : null, gauge),\n            timestamp: ctx.date,\n        };\n    }\n\n    /**\n     * Builds an IPoint instance for the given {@link Histogram}.\n     *\n     * @protected\n     * @param {Histogram} histogram\n     * @param {MetricSetReportContext} ctx\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    protected reportHistogram(histogram: Histogram, ctx: MetricSetReportContext): IPoint {\n        const value = histogram.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = histogram.getSnapshot();\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(histogram);\n        const measurement = this.getMeasurementName(histogram);\n\n        fields[`${fieldNamePrefix}count`] = histogram.getCount() || 0;\n        fields[`${fieldNamePrefix}max`] = this.getNumber(snapshot.getMax());\n        fields[`${fieldNamePrefix}mean`] = this.getNumber(snapshot.getMean());\n        fields[`${fieldNamePrefix}min`] = this.getNumber(snapshot.getMin());\n        fields[`${fieldNamePrefix}p50`] = this.getNumber(snapshot.getMedian());\n        fields[`${fieldNamePrefix}p75`] = this.getNumber(snapshot.get75thPercentile());\n        fields[`${fieldNamePrefix}p95`] = this.getNumber(snapshot.get95thPercentile());\n        fields[`${fieldNamePrefix}p98`] = this.getNumber(snapshot.get98thPercentile());\n        fields[`${fieldNamePrefix}p99`] = this.getNumber(snapshot.get99thPercentile());\n        fields[`${fieldNamePrefix}p999`] = this.getNumber(snapshot.get999thPercentile());\n        fields[`${fieldNamePrefix}stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(ctx.registry, histogram),\n            timestamp: ctx.date,\n        };\n    }\n\n    /**\n     * Builds an IPoint instance for the given {@link Meter}.\n     *\n     * @protected\n     * @param {Meter} meter\n     * @param {MetricSetReportContext} ctx\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    protected reportMeter(meter: Meter, ctx: MetricSetReportContext): IPoint {\n        const value = meter.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(meter);\n        const measurement = this.getMeasurementName(meter);\n\n        fields[`${fieldNamePrefix}count`] = meter.getCount() || 0;\n        fields[`${fieldNamePrefix}m15_rate`] = this.getNumber(meter.get15MinuteRate());\n        fields[`${fieldNamePrefix}m1_rate`] = this.getNumber(meter.get1MinuteRate());\n        fields[`${fieldNamePrefix}m5_rate`] = this.getNumber(meter.get5MinuteRate());\n        fields[`${fieldNamePrefix}mean_rate`] = this.getNumber(meter.getMeanRate());\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(ctx.registry, meter),\n            timestamp: ctx.date,\n        };\n    }\n\n    /**\n     * Builds an IPoint instance for the given {@link Timer}.\n     *\n     * @protected\n     * @param {Timer} timer\n     * @param {MetricSetReportContext} ctx\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    protected reportTimer(timer: Timer, ctx: MetricSetReportContext): IPoint {\n        const value = timer.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = timer.getSnapshot();\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(timer);\n        const measurement = this.getMeasurementName(timer);\n\n        fields[`${fieldNamePrefix}count`] = timer.getCount() || 0;\n        fields[`${fieldNamePrefix}m15_rate`] = this.getNumber(timer.get15MinuteRate());\n        fields[`${fieldNamePrefix}m1_rate`] = this.getNumber(timer.get1MinuteRate());\n        fields[`${fieldNamePrefix}m5_rate`] = this.getNumber(timer.get5MinuteRate());\n        fields[`${fieldNamePrefix}max`] = this.getNumber(snapshot.getMax());\n        fields[`${fieldNamePrefix}mean`] = this.getNumber(snapshot.getMean());\n        fields[`${fieldNamePrefix}mean_rate`] = this.getNumber(timer.getMeanRate());\n        fields[`${fieldNamePrefix}min`] = this.getNumber(snapshot.getMin());\n        fields[`${fieldNamePrefix}p50`] = this.getNumber(snapshot.getMedian());\n        fields[`${fieldNamePrefix}p75`] = this.getNumber(snapshot.get75thPercentile());\n        fields[`${fieldNamePrefix}p95`] = this.getNumber(snapshot.get95thPercentile());\n        fields[`${fieldNamePrefix}p98`] = this.getNumber(snapshot.get98thPercentile());\n        fields[`${fieldNamePrefix}p99`] = this.getNumber(snapshot.get99thPercentile());\n        fields[`${fieldNamePrefix}p999`] = this.getNumber(snapshot.get999thPercentile());\n        fields[`${fieldNamePrefix}stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(ctx.registry, timer),\n            timestamp: ctx.date,\n        };\n    }\n\n    /**\n     * Builds the prefix for a field name.\n     *\n     * @private\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof InfluxMetricReporter\n     */\n    private getFieldNamePrefix(metric: Metric): string {\n        if (metric.getGroup()) {\n            return `${metric.getName()}.`;\n        }\n        return \"\";\n    }\n\n    /**\n     * Builds the prefix for the metric name.\n     *\n     * @private\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof InfluxMetricReporter\n     */\n    private getMeasurementName(metric: Metric): string {\n        if (metric.getGroup()) {\n            return metric.getGroup();\n        }\n        return metric.getName();\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file.\nThe format is based on Keep a Changelog,\nand this project adheres to Semantic Versioning.\n[Unreleased]\n[2.3.0] - 2018-12-01\nChanged\n\napplied new start & stop method signature\nupdated dependencies\nremoved async lib as dependency\n\n[2.2.1] - 2018-11-28\nChanged\n\nadded inspector-metrics@1.16.x as peer dependency\n\n[2.2.0] - 2018-11-27\nAdded\n\nsupport for reporting events\nhttps://github.com/rstiller/inspector-influx/pull/3\nthanks to https://github.com/doubret\n\n\n\nChanged\n\nadded nodejs 11 to playground\nuse inspector-metrics@1.16.0\nset version of transitive dependency event-stream to 3.3.4\nrefactored playground\nupdated documentation\n\n[2.1.0] - 2018-11-21\nChanged\n\nallow logger to be null - resolves https://github.com/rstiller/inspector-influx/issues/1\n\n[2.0.0] - 2018-11-04\nAdded\n\nchangelog\nsupport for nodejs 6\n\nChanged\n\nupdated dependencies\nuse inspector-metrics@v1.13.0\nadapted new MetricLogger implementation\nadded nodejs 11 to travis-ci config\ncompile target from \"es2017\" to \"es6\"\n\n[1.5.0] - 2018-10-04\nAdded\n\nsupport for MonotoneCounter\njsdoc for components\n\nChanged\n\nfixed linting errors / config\n\"description\" & \"homepage\" in package.json\nupdated dependencies\nuse inspector-metrics@v1.11.0\nrefactored build scripts\nrefactored playground\nuse compodoc instead of tsdoc\n\nRemoved\n\nJenkinsfile\n\n[1.4.5] - 2018-07-08\nChanged\n\nadded nodejs 10 to travis-ci config\nupdated dependencies\nuse inspector-metrics@v1.8.7\n\n[1.4.4] - 2017-11-20\nChanged\n\nupdated dependencies\nuse inspector-metrics@v1.8.3\n\nRemoved\n\n\"ts:ts-node/register\" option from test config\n\n[1.4.3] - 2017-11-19\nChanged\n\nupdated dependencies\nadded nodejs 8 & 9 to travis-ci config\nuse inspector-metrics@v1.8.2\n\n[1.4.2] - 2017-09-28\nChanged\n\nfixed bug: update last report date properly\n\n[1.4.1] - 2017-09-28\nAdded\n\nintroduced minimum reporting timeout (send unchanged values after a certain time)\n\n[1.4.0] - 2017-08-26\nAdded\n\ndon't send unchanged metric values\n\nChanged\n\nuse inspector-metrics@v1.7.0\n\n[1.3.0] - 2017-08-26\nChanged\n\nupdated dependencies\nuse inspector-metrics@v1.5.4\nrefactored / updated playground setup\n\n[1.2.5] - 2017-08-01\nChanged\n\nuse inspector-metrics@v1.5.2\n\n[1.2.4] - 2017-08-01\nAdded\n\ntravis-ci config file\n\nChanged\n\nupdated dependencies\n\n[1.2.3] - 2017-06-10\nChanged\n\ndefault for not existing values is zero (0)\n\n[1.2.2] - 2017-06-10\nChanged\n\nuse inspector-metrics@v1.5.1\n\n[1.2.1] - 2017-06-10\nChanged\n\nuse inspector-metrics@v1.5.0\nrefactored test config\n\n[1.2.0] - 2017-06-10\nAdded\n\nSender interface and DefaultSender implementation\n\nChanged\n\nuse inspector-metrics@v1.4.2\ncompile target from \"es6\" to \"es2017\"\nuse metric group in measurement name\n\n[1.1.2] - 2017-06-07\nChanged\n\nuse rimraf in build\nfixed bug: check if value is null before reporting\n\n[1.1.1] - 2017-06-01\nAdded\n\nplayground setup and script\n\n[1.1.0] - 2017-05-30\nAdded\n\neditorconfig file\nbuild script\n\nChanged\n\nadjusted reporter to match inspector-metrics@v1.3.0\n\n[1.0.2] - 2017-05-11\nChanged\n\nrefactored tests\n\n[1.0.1] - 2017-04-06\nAdded\n\ndocumentation in README\n\n[1.0.0] - 2017-03-31\nInitial commit.\nAdded\n\nproject setup\nREADME\ntypescript config\nlint config\n\n\nlicensed under MIT license\nbasic influx reporter implementation\nmocha testing (with chai, sinon)\nJenkins pipeline\nNYC code-coverage config\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/metrics/DefaultSender.ts\n            \n            \n                class\n            \n            \n                DefaultSender\n            \n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                lib/metrics/InfluxMetricReporter.ts\n            \n            \n                class\n            \n            \n                InfluxMetricReporter\n            \n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                lib/metrics/InfluxMetricReporter.ts\n            \n            \n                interface\n            \n            \n                InfluxMetricReporterOptions\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/metrics/InfluxMetricReporter.ts\n            \n            \n                interface\n            \n            \n                Sender\n            \n            \n                100 %\n                (4/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            influx : ^5.0.7\n        \n            inspector-metrics : ^1.17.0\n        \n            source-map-support : ^0.5.9\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            inspector-metrics : >=1.16.x\n    \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\ninspector-influx\nTypescript Metrics Reporter for\nInfluxDB.\n\n    \n        \n    \n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\nThis library is made for inspector-metrics node module and\nis meant to be used with nodejs.It uses node-influx as influxdb client.\ninstall\nnpm install --save inspector-influx\nbasic usage\nimport { DefaultSender, InfluxMetricReporter } from \"inspector-influx\";\nimport { MetricRegistry, Timer } from \"inspector-metrics\";\n\n// influxdb config from https://github.com/node-influx/node-influx/blob/master/src/index.ts#L80\nconst dbConfig = {\n    \"username\": \"admin\",\n    \"password\": \"admin\",\n    \"database\": \"example-db\",\n    \"hosts\": [\n        { \"host\": \"influx\", \"port\": 8086 }\n    ]\n};\n\nconst sender = new DefaultSender(dbConfig);\nconst reporter: InfluxMetricReporter = new InfluxMetricReporter({\n    sender,\n});\nconst registry: MetricRegistry = new MetricRegistry();\nconst requests: Timer = registry.newTimer(\"requests\");\n\nreporter.setLog(global.console);\nreporter.addMetricRegistry(registry);\n\n// need ot wait for the reporter to start\nawait reporter.start();\n\n// example usage\nsetInterval(() => {\n    // should report a few milliseconds\n    requests.time(() => {\n        let a = 0;\n        let b = 1;\n        for (let i = 0; i reporting events\nimport { InfluxMetricReporter } from \"inspector-influx\";\nimport { Event } from \"inspector-metrics\";\n\nconst reporter: InfluxMetricReporter = ...\n\n// need ot wait for the reporter to start before reporting events\nawait reporter.start();\n\n// build an ad-hoc event\nconst event = new Event(\"application_started\")\n    .setValue(1.0)\n    .setTag(\"mode\", \"test\")\n    .setTag(\"customTag\", \"specialValue\");\n\n// send the event to influxdb\nawait reporter.reportEvent(event);local dev\nusing the playground\nTo use the playground you need to have docker and docker-compose installed.\n# boots all services (influxdb / grafana) and provisions the example dashboard\ntest-env/boot.sh\n# running playground script\n./playground.shview data in grafana\n\nNavigate to http://localhost:3000\nNavigate to the example dashboard (upper left corner \"Home\"): \"Example InfluxDB Dashboard\"\n\n\ncompile & test with different nodejs versions\nbuild docker images:  \ndocker-compose buildrun tests:  \ndocker-compose run node6\ndocker-compose run node7\ndocker-compose run node8\ndocker-compose run node9\ndocker-compose run node10\ndocker-compose run node11License\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2017 \nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"unit-test.html":{"url":"unit-test.html","title":"unit-test - unit-test","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Unit test coverage\n\n\n\n    \n    \n    \n    \n\n\n\n    \n        \n            File\n            Statements\n            Branches\n            Functions\n            Lines\n        \n    \n    \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
