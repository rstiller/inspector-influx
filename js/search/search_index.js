var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.5","fields":["title","body"],"fieldVectors":[["title/classes/DefaultSender.html",[0,0.672,1,0.855]],["body/classes/DefaultSender.html",[0,0.953,1,1.555,2,1.207,3,1.33,4,0.46,5,1.537,6,0.961,7,2.438,8,1.727,9,1.895,10,0.895,11,1.537,12,1.33,13,2.127,14,2.456,15,2.301,16,1.787,17,2.346,18,2.127,19,2.435,20,2.067,21,2.067,22,1.787,23,1.207,24,2.819,25,4.019,26,2.93,27,2.819,28,1.67,29,2.067,30,2.127,31,0.092,32,1.33,33,1.867,34,1.33,35,2.037,36,0.953,37,1.645,38,2.819,39,2.819,40,2.037,41,3.488,42,0.961,43,2.819,44,1.67,45,1.058,46,0.831,47,2.037,48,2.819,49,2.438,50,2.127,51,2.127,52,1.645,53,2.381,54,2.301,55,2.037,56,0.831,57,2.819,58,1.67,59,2.17,60,2.037,61,2.819,62,2.067,63,1.525,64,0.961,65,1.207,66,0.764,67,1.67,68,2.301,69,1.67,70,2.037,71,2.037,72,0.46,73,2.037,74,0.961,75,2.037,76,2.037,77,2.037,78,2.037,79,1.67,80,1.207,81,2.037,82,2.037,83,0.764,84,2.037,85,2.037,86,2.037,87,2.037,88,2.037,89,2.037,90,0.058,91,0.058]],["title/interfaces/InfluxMetricReporterOptions.html",[92,0.515,93,1.075]],["body/interfaces/InfluxMetricReporterOptions.html",[0,0.471,2,0.574,3,0.754,4,0.219,6,0.457,8,1.117,9,1.117,10,0.895,12,0.457,13,1.205,14,1.849,16,0.962,17,0.574,19,1.403,20,0.574,21,0.574,22,1.408,23,0.574,28,0.574,29,2.107,31,0.093,32,0.754,33,1.804,34,0.754,36,0.698,37,0.457,42,1.704,44,0.574,45,1.31,46,1.118,52,1.236,53,2.428,54,1.975,56,0.471,58,0.574,59,2.246,62,1.849,63,1.117,64,1.117,65,0.574,66,1.447,67,1.672,68,2.285,69,2.266,72,0.461,74,1.887,79,1.403,80,1.403,83,0.983,90,0.054,91,0.033,92,0.638,93,1.236,94,0.574,95,1.977,96,1.787,97,2.441,98,2.223,99,2.223,100,1.25,101,0.947,102,1.539,103,1.553,104,2.252,105,2.252,106,1.526,107,2.354,108,2.129,109,2.129,110,1.403,111,2.578,112,1.539,113,0.947,114,1.403,115,1.205,116,0.73,117,1.539,118,2.252,119,1.205,120,1.672,121,1.539,122,0.363,123,0.73,124,1.205,125,0.574,126,0.73,127,2.252,128,2.441,129,0.73,130,0.73,131,0.73,132,1.539,133,1.205,134,0.73,135,1.787,136,0.73,137,1.408,138,0.574,139,1.539,140,0.947,141,2.514,142,1.205,143,1.209,144,0.73,145,0.73,146,0.574,147,0.574,148,0.73,149,0.73,150,0.574,151,0.73,152,0.73,153,1.977,154,0.73,155,0.73,156,0.73,157,2.252,158,1.539,159,0.73,160,1.539,161,1.205,162,0.73,163,0.73,164,2.354,165,0.574,166,0.73,167,0.73,168,0.73,169,0.73,170,0.73,171,0.73,172,0.73,173,0.73,174,1.553,175,1.205,176,0.73,177,1.209,178,0.73,179,0.73,180,1.539,181,0.73,182,1.205,183,0.73,184,2.354,185,1.205,186,1.205,187,0.73,188,0.73,189,0.73,190,2.726,191,1.205,192,0.73,193,0.73,194,1.205,195,0.73,196,2.578,197,0.73,198,0.73,199,0.73,200,0.73,201,0.73,202,0.73,203,0.574,204,1.408,205,0.73,206,1.205,207,1.977,208,2.578,209,1.977,210,0.73,211,1.975,212,0.73,213,1.787,214,1.787,215,1.977,216,1.977,217,0.73,218,1.205,219,0.73,220,0.73,221,0.73,222,0.73,223,0.73,224,0.73,225,1.205,226,1.205,227,0.73,228,0.73,229,0.73,230,1.205,231,1.205,232,1.205,233,1.205,234,1.205,235,1.205,236,1.205,237,1.205,238,1.205,239,1.205,240,1.205,241,1.205,242,1.205,243,1.205,244,1.205,245,1.205,246,1.205,247,1.205,248,1.205,249,1.205,250,0.73,251,1.205,252,0.73,253,0.73,254,1.205,255,0.73,256,1.205,257,0.73,258,1.205,259,0.73,260,1.205,261,0.73,262,0.73,263,1.205,264,0.73,265,0.73,266,0.73,267,0.73,268,0.73,269,0.73,270,0.73,271,1.205,272,0.73,273,1.539,274,1.205,275,0.73]],["title/interfaces/Sender.html",[10,0.515,92,0.515]],["body/interfaces/Sender.html",[0,0.468,2,0.569,3,0.749,4,0.217,6,0.453,8,0.957,9,1.326,10,0.877,12,0.453,14,1.843,16,0.749,17,0.94,18,1.197,19,1.396,20,1.396,21,1.396,22,1.568,23,0.569,26,1.53,28,0.569,29,2.063,30,0.724,31,0.093,32,0.957,33,1.785,34,0.749,36,0.598,37,0.749,42,1.7,44,0.94,45,1.279,46,1.104,52,1.403,53,2.447,54,2.102,56,0.468,58,0.94,59,2.281,62,1.969,63,1.111,64,1.111,65,0.569,66,1.432,67,1.665,68,2.281,69,2.262,72,0.459,74,1.885,79,1.396,80,1.396,83,0.979,90,0.053,91,0.032,92,0.672,93,1.111,94,0.569,95,1.778,96,1.53,97,2.12,98,2.136,99,2.167,100,1.167,101,0.569,102,1.197,103,1.546,104,2.244,105,2.244,106,1.521,107,2.346,108,2.12,109,2.12,110,1.396,111,2.571,112,1.53,113,0.94,114,1.396,115,1.197,116,0.724,117,1.53,118,2.244,119,1.197,120,1.665,121,1.53,122,0.36,123,1.197,124,1.53,125,0.94,126,1.197,127,2.346,128,2.433,129,0.724,130,0.724,131,0.724,132,1.53,133,1.197,134,0.724,135,1.778,136,0.724,137,1.403,138,0.569,139,1.53,140,0.94,141,2.507,142,1.197,143,1.202,144,0.724,145,0.724,146,0.569,147,0.569,148,0.724,149,0.724,150,0.569,151,0.724,152,0.724,153,1.968,154,0.724,155,0.724,156,0.724,157,2.244,158,1.53,159,0.724,160,1.53,161,1.197,162,0.724,163,0.724,164,2.346,165,0.569,166,0.724,167,0.724,168,0.724,169,0.724,170,0.724,171,0.724,172,0.724,173,0.724,174,1.546,175,1.197,176,0.724,177,1.202,178,0.724,179,0.724,180,1.53,181,0.724,182,1.197,183,0.724,184,2.346,185,1.197,186,1.197,187,0.724,188,0.724,189,0.724,190,2.72,191,1.197,192,0.724,193,0.724,194,1.197,195,0.724,196,2.571,197,0.724,198,0.724,199,0.724,200,0.724,201,0.724,202,0.724,203,0.569,204,1.403,205,0.724,206,1.197,207,1.968,208,2.571,209,1.968,210,0.724,211,1.969,212,0.724,213,1.778,214,1.778,215,1.968,216,1.968,217,0.724,218,1.197,219,0.724,220,0.724,221,0.724,222,0.724,223,0.724,224,0.724,225,1.197,226,1.197,227,0.724,228,0.724,229,0.724,230,1.197,231,1.197,232,1.197,233,1.197,234,1.197,235,1.197,236,1.197,237,1.197,238,1.197,239,1.197,240,1.197,241,1.197,242,1.197,243,1.197,244,1.197,245,1.197,246,1.197,247,1.197,248,1.197,249,1.197,250,0.724,251,1.197,252,0.724,253,0.724,254,1.197,255,0.724,256,1.197,257,0.724,258,1.197,259,0.724,260,1.197,261,0.724,262,0.724,263,1.197,264,0.724,265,0.724,266,0.724,267,0.724,268,0.724,269,0.724,270,0.724,271,1.197,272,0.724,273,1.53,274,1.197,275,0.724,276,0.96,277,0.96,278,0.96]],["title/changelog.html",[56,0.571,279,1.148,280,1.462]],["body/changelog.html",[1,0.739,4,0.718,6,0.929,7,1.486,8,1.498,10,0.445,15,2.394,22,1.299,31,0.077,32,0.929,34,0.929,36,0.581,42,1.622,45,1.406,46,0.812,50,1.486,51,1.486,72,0.445,83,0.739,90,0.056,91,0.065,92,0.445,98,1.167,99,1.632,100,1.577,101,1.167,106,1.299,114,1.167,122,1.558,125,1.167,143,1.167,147,1.167,150,2.543,165,1.167,174,1.167,203,1.167,204,1.498,211,1.167,280,2.395,281,1.97,282,3.175,283,1.881,284,1.97,285,1.97,286,1.97,287,1.97,288,1.97,289,2.077,290,1.97,291,1.97,292,3.618,293,3.926,294,1.97,295,4.204,296,2.395,297,2.754,298,1.97,299,1.97,300,1.97,301,2.729,302,2.729,303,1.97,304,1.97,305,2.326,306,1.97,307,1.97,308,3.749,309,4.041,310,1.97,311,1.97,312,1.97,313,1.97,314,1.97,315,3.175,316,1.97,317,1.97,318,1.97,319,1.97,320,3.438,321,3.438,322,2.077,323,2.754,324,2.754,325,2.754,326,1.97,327,3.749,328,1.97,329,1.97,330,3.175,331,2.754,332,1.97,333,1.97,334,1.97,335,2.395,336,1.97,337,1.97,338,1.97,339,2.754,340,1.97,341,1.97,342,2.754,343,3.618,344,1.97,345,1.97,346,3.215,347,1.97,348,1.97,349,1.97,350,1.97,351,1.622,352,1.97,353,1.97,354,1.97,355,1.97,356,1.97,357,1.97,358,2.754,359,2.754,360,2.754,361,1.97,362,1.97,363,1.97,364,1.97,365,1.97,366,2.754,367,1.97,368,1.97,369,2.754,370,1.97,371,1.97,372,1.97,373,1.97,374,3.175,375,1.97,376,3.175,377,1.97,378,1.97,379,1.97,380,3.848,381,1.97,382,1.97,383,1.97,384,1.97,385,1.97,386,1.97,387,1.97,388,1.97,389,1.97,390,1.97,391,1.97,392,1.97,393,1.97,394,2.754,395,1.97,396,1.97,397,1.97,398,1.97,399,1.97,400,1.97,401,2.754,402,1.97,403,1.97,404,1.97,405,1.97,406,1.486,407,1.632,408,1.97,409,1.167,410,1.486,411,1.97,412,1.97,413,1.97,414,1.97,415,1.97,416,1.97,417,1.97,418,0.929]],["title/coverage.html",[418,1.435]],["body/coverage.html",[0,1.123,1,1.223,4,0.737,5,2.46,10,0.737,31,0.088,33,1.538,66,1.223,72,0.737,90,0.078,91,0.078,92,0.861,93,1.538,94,2.39,283,1.932,418,1.538,419,3.261,420,2.46,421,4.156,422,3.261,423,3.261,424,3.261,425,3.261,426,2.46,427,2.46]],["title/dependencies.html",[305,1.613,428,1.938]],["body/dependencies.html",[3,1.589,31,0.088,36,0.993,46,0.993,64,1.589,90,0.079,91,0.079,103,1.996,122,1.264,296,2.541,305,1.996,429,3.368,430,3.368,431,3.368,432,3.368]],["title/index.html",[12,0.914,56,0.571,279,1.148]],["body/index.html",[1,0.937,9,1.85,10,0.731,11,2.959,15,1.481,16,1.179,31,0.091,36,1.157,37,1.179,45,1.344,46,1.056,49,1.885,52,1.179,63,1.524,66,1.344,72,0.81,74,1.85,83,1.213,90,0.066,91,0.066,100,1.421,110,2.123,113,1.481,120,1.915,122,1.472,138,1.481,140,1.481,177,1.481,204,1.179,289,1.885,301,1.885,302,2.702,322,1.885,335,1.885,351,1.69,406,1.885,409,1.481,410,1.885,433,2.499,434,2.499,435,3.232,436,1.481,437,2.499,438,2.499,439,3.583,440,2.499,441,2.499,442,3.232,443,2.499,444,2.499,445,2.499,446,2.499,447,2.499,448,3.232,449,2.499,450,3.232,451,2.499,452,2.499,453,2.499,454,2.499,455,2.499,456,2.499,457,2.499,458,2.499,459,2.499,460,2.499,461,2.499,462,2.499,463,2.499,464,2.499,465,4.224,466,4.144,467,2.499,468,2.499,469,3.232,470,2.499,471,3.583,472,2.499,473,4.089,474,2.499,475,3.232,476,2.499,477,2.499,478,2.499,479,2.499,480,2.499,481,2.499,482,2.499,483,2.499,484,2.499,485,2.499,486,2.499,487,2.499,488,2.499,489,2.499]],["title/license.html",[56,0.571,279,1.148,407,1.148]],["body/license.html",[4,0.664,31,0.073,90,0.073,91,0.073,100,1.343,106,1.387,283,1.742,346,2.218,407,1.742,409,1.742,490,3.859,491,2.94,492,3.579,493,2.94,494,2.94,495,2.94,496,2.94,497,3.579,498,2.94,499,4.016,500,4.308,501,2.94,502,3.579,503,3.859,504,2.94,505,3.859,506,3.579,507,2.94,508,2.94,509,2.94,510,2.94,511,2.94,512,2.94,513,2.94,514,2.94,515,2.94,516,2.94,517,2.94,518,2.94,519,2.94,520,2.94,521,3.579,522,3.579,523,2.94,524,2.94,525,2.94,526,3.579,527,2.94,528,2.94,529,2.94,530,2.94,531,2.94,532,2.94,533,2.94,534,2.94,535,2.94,536,2.94,537,2.94,538,2.94,539,2.94,540,2.94,541,2.94,542,2.94,543,2.94,544,2.94,545,2.94,546,2.94,547,2.94,548,2.94]],["title/modules.html",[436,1.803]],["body/modules.html",[31,0.081,90,0.081,91,0.081,436,2.056]],["title/overview.html",[549,2.295]],["body/overview.html",[0,1.015,31,0.08,90,0.08,91,0.08,92,0.778,549,2.597,550,3.928]],["title/unit-test.html",[137,1.162,351,1.162]],["body/unit-test.html",[4,0.769,31,0.08,72,0.769,90,0.08,91,0.08,137,1.604,146,2.016,351,1.604,418,1.604,420,2.566,426,2.566,427,2.566,551,3.402,552,3.402]]],"invertedIndex":[["",{"_index":31,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"unit-test.html":{}}}],["0",{"_index":83,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"index.html":{}}}],["0.5.9",{"_index":432,"title":{},"body":{"dependencies.html":{}}}],["01",{"_index":376,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":403,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":315,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":394,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":380,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":342,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":343,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":358,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":140,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["1.0.0",{"_index":402,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":400,"title":{},"body":{"changelog.html":{}}}],["1.0.2",{"_index":399,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":393,"title":{},"body":{"changelog.html":{}}}],["1.1.1",{"_index":392,"title":{},"body":{"changelog.html":{}}}],["1.1.2",{"_index":389,"title":{},"body":{"changelog.html":{}}}],["1.16.0",{"_index":431,"title":{},"body":{"dependencies.html":{}}}],["1.2.0",{"_index":386,"title":{},"body":{"changelog.html":{}}}],["1.2.1",{"_index":384,"title":{},"body":{"changelog.html":{}}}],["1.2.2",{"_index":382,"title":{},"body":{"changelog.html":{}}}],["1.2.3",{"_index":379,"title":{},"body":{"changelog.html":{}}}],["1.2.4",{"_index":378,"title":{},"body":{"changelog.html":{}}}],["1.2.5",{"_index":375,"title":{},"body":{"changelog.html":{}}}],["1.3.0",{"_index":372,"title":{},"body":{"changelog.html":{}}}],["1.4.0",{"_index":368,"title":{},"body":{"changelog.html":{}}}],["1.4.1",{"_index":363,"title":{},"body":{"changelog.html":{}}}],["1.4.2",{"_index":357,"title":{},"body":{"changelog.html":{}}}],["1.4.3",{"_index":352,"title":{},"body":{"changelog.html":{}}}],["1.4.4",{"_index":345,"title":{},"body":{"changelog.html":{}}}],["1.4.5",{"_index":341,"title":{},"body":{"changelog.html":{}}}],["1.5.0",{"_index":326,"title":{},"body":{"changelog.html":{}}}],["10",{"_index":327,"title":{},"body":{"changelog.html":{}}}],["100",{"_index":421,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":136,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["11",{"_index":293,"title":{},"body":{"changelog.html":{}}}],["16/16",{"_index":423,"title":{},"body":{"coverage.html":{}}}],["19",{"_index":353,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":550,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":314,"title":{},"body":{"changelog.html":{}}}],["2.1.0",{"_index":310,"title":{},"body":{"changelog.html":{}}}],["2.2.0",{"_index":291,"title":{},"body":{"changelog.html":{}}}],["2.6.1",{"_index":429,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":347,"title":{},"body":{"changelog.html":{}}}],["2017",{"_index":346,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["2018",{"_index":292,"title":{},"body":{"changelog.html":{}}}],["21",{"_index":311,"title":{},"body":{"changelog.html":{}}}],["26",{"_index":369,"title":{},"body":{"changelog.html":{}}}],["27",{"_index":294,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":359,"title":{},"body":{"changelog.html":{}}}],["3.3.4",{"_index":307,"title":{},"body":{"changelog.html":{}}}],["3/3",{"_index":424,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":395,"title":{},"body":{"changelog.html":{}}}],["31",{"_index":404,"title":{},"body":{"changelog.html":{}}}],["4/4",{"_index":425,"title":{},"body":{"coverage.html":{}}}],["5.0.7",{"_index":430,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":316,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":354,"title":{},"body":{"changelog.html":{}}}],["8/8",{"_index":422,"title":{},"body":{"coverage.html":{}}}],["8086",{"_index":452,"title":{},"body":{"index.html":{}}}],["9",{"_index":355,"title":{},"body":{"changelog.html":{}}}],["abov",{"_index":520,"title":{},"body":{"license.html":{}}}],["abstract",{"_index":123,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["action",{"_index":542,"title":{},"body":{"license.html":{}}}],["ad",{"_index":295,"title":{},"body":{"changelog.html":{}}}],["adapt",{"_index":318,"title":{},"body":{"changelog.html":{}}}],["adher",{"_index":287,"title":{},"body":{"changelog.html":{}}}],["adjust",{"_index":397,"title":{},"body":{"changelog.html":{}}}],["admin",{"_index":448,"title":{},"body":{"index.html":{}}}],["allow",{"_index":312,"title":{},"body":{"changelog.html":{}}}],["and/or",{"_index":513,"title":{},"body":{"license.html":{}}}],["aris",{"_index":546,"title":{},"body":{"license.html":{}}}],["arr",{"_index":81,"title":{},"body":{"classes/DefaultSender.html":{}}}],["array",{"_index":194,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["associ",{"_index":501,"title":{},"body":{"license.html":{}}}],["async",{"_index":103,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"dependencies.html":{}}}],["async.asyncqueu",{"_index":133,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["async.queue((task",{"_index":155,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["author",{"_index":535,"title":{},"body":{"license.html":{}}}],["await",{"_index":180,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["b",{"_index":461,"title":{},"body":{"index.html":{}}}],["base",{"_index":285,"title":{},"body":{"changelog.html":{}}}],["basic",{"_index":410,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["befor",{"_index":51,"title":{},"body":{"classes/DefaultSender.html":{},"changelog.html":{}}}],["boolean",{"_index":41,"title":{},"body":{"classes/DefaultSender.html":{}}}],["boot",{"_index":467,"title":{},"body":{"index.html":{}}}],["branch",{"_index":551,"title":{},"body":{"unit-test.html":{}}}],["bug",{"_index":360,"title":{},"body":{"changelog.html":{}}}],["build",{"_index":204,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"index.html":{}}}],["buildrun",{"_index":483,"title":{},"body":{"index.html":{}}}],["c",{"_index":491,"title":{},"body":{"license.html":{}}}],["callback",{"_index":158,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["catch",{"_index":183,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["catch((reason",{"_index":202,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["certain",{"_index":367,"title":{},"body":{"changelog.html":{}}}],["chai",{"_index":412,"title":{},"body":{"changelog.html":{}}}],["chang",{"_index":150,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["changelog",{"_index":280,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["charg",{"_index":496,"title":{},"body":{"license.html":{}}}],["check",{"_index":391,"title":{},"body":{"changelog.html":{}}}],["ci",{"_index":321,"title":{},"body":{"changelog.html":{}}}],["claim",{"_index":538,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/DefaultSender.html":{}},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"coverage.html":{},"overview.html":{}}}],["clb",{"_index":156,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["client",{"_index":37,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["clock",{"_index":104,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["code",{"_index":417,"title":{},"body":{"changelog.html":{}}}],["commit",{"_index":405,"title":{},"body":{"changelog.html":{}}}],["common",{"_index":151,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["compil",{"_index":322,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["compodoc",{"_index":336,"title":{},"body":{"changelog.html":{}}}],["compon",{"_index":329,"title":{},"body":{"changelog.html":{}}}],["compos",{"_index":466,"title":{},"body":{"index.html":{}}}],["condit",{"_index":519,"title":{},"body":{"license.html":{}}}],["config",{"_index":15,"title":{},"body":{"classes/DefaultSender.html":{},"changelog.html":{},"index.html":{}}}],["configur",{"_index":38,"title":{},"body":{"classes/DefaultSender.html":{}}}],["connect",{"_index":548,"title":{},"body":{"license.html":{}}}],["consol",{"_index":134,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["const",{"_index":74,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["constructor",{"_index":23,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["constructor(config",{"_index":24,"title":{},"body":{"classes/DefaultSender.html":{}}}],["contract",{"_index":543,"title":{},"body":{"license.html":{}}}],["copi",{"_index":499,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":490,"title":{},"body":{"license.html":{}}}],["corner",{"_index":479,"title":{},"body":{"index.html":{}}}],["counter",{"_index":105,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["counter.getcount",{"_index":206,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["coverag",{"_index":418,"title":{"coverage.html":{}},"body":{"changelog.html":{},"coverage.html":{},"unit-test.html":{}}}],["creat",{"_index":28,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["ctx",{"_index":196,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["ctx.date",{"_index":216,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["ctx.registri",{"_index":223,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["current",{"_index":145,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["damag",{"_index":539,"title":{},"body":{"license.html":{}}}],["dashboard",{"_index":471,"title":{},"body":{"index.html":{}}}],["data",{"_index":52,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["databas",{"_index":49,"title":{},"body":{"classes/DefaultSender.html":{},"index.html":{}}}],["date",{"_index":174,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["db",{"_index":16,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["dbconfig",{"_index":446,"title":{},"body":{"index.html":{}}}],["deal",{"_index":502,"title":{},"body":{"license.html":{}}}],["default",{"_index":7,"title":{},"body":{"classes/DefaultSender.html":{},"changelog.html":{}}}],["defaultsend",{"_index":1,"title":{"classes/DefaultSender.html":{}},"body":{"classes/DefaultSender.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["defaultsender(dbconfig",{"_index":453,"title":{},"body":{"index.html":{}}}],["defin",{"_index":26,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/Sender.html":{}}}],["depend",{"_index":305,"title":{"dependencies.html":{}},"body":{"changelog.html":{},"dependencies.html":{}}}],["descript",{"_index":6,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["determin",{"_index":144,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["dev",{"_index":463,"title":{},"body":{"index.html":{}}}],["differ",{"_index":481,"title":{},"body":{"index.html":{}}}],["directli",{"_index":167,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["distribut",{"_index":511,"title":{},"body":{"license.html":{}}}],["docker",{"_index":465,"title":{},"body":{"index.html":{}}}],["document",{"_index":283,"title":{},"body":{"changelog.html":{},"coverage.html":{},"license.html":{}}}],["don't",{"_index":370,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":188,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["editorconfig",{"_index":396,"title":{},"body":{"changelog.html":{}}}],["ensur",{"_index":48,"title":{},"body":{"classes/DefaultSender.html":{}}}],["env/boot.sh",{"_index":472,"title":{},"body":{"index.html":{}}}],["error",{"_index":101,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["error(\"invalid",{"_index":172,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["error(`error",{"_index":185,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["es2017",{"_index":324,"title":{},"body":{"changelog.html":{}}}],["es6",{"_index":325,"title":{},"body":{"changelog.html":{}}}],["event",{"_index":106,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"license.html":{}}}],["event.gettim",{"_index":175,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["event.getvalu",{"_index":170,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["exampl",{"_index":11,"title":{},"body":{"classes/DefaultSender.html":{},"index.html":{}}}],["exist",{"_index":50,"title":{},"body":{"classes/DefaultSender.html":{},"changelog.html":{}}}],["export",{"_index":67,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["express",{"_index":528,"title":{},"body":{"license.html":{}}}],["extend",{"_index":95,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fals",{"_index":43,"title":{},"body":{"classes/DefaultSender.html":{}}}],["few",{"_index":459,"title":{},"body":{"index.html":{}}}],["field",{"_index":208,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fieldnameprefix",{"_index":209,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}count",{"_index":213,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}m15_r",{"_index":254,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}m1_r",{"_index":256,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}m5_r",{"_index":258,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}max",{"_index":230,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}mean",{"_index":232,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}mean_r",{"_index":260,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}min",{"_index":234,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p50",{"_index":236,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p75",{"_index":238,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p95",{"_index":240,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p98",{"_index":242,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p99",{"_index":244,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p999",{"_index":246,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}stddev",{"_index":248,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}valu",{"_index":221,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"coverage.html":{},"license.html":{},"unit-test.html":{}}}],["fit",{"_index":531,"title":{},"body":{"license.html":{}}}],["fix",{"_index":330,"title":{},"body":{"changelog.html":{}}}],["follow",{"_index":518,"title":{},"body":{"license.html":{}}}],["format",{"_index":284,"title":{},"body":{"changelog.html":{}}}],["free",{"_index":495,"title":{},"body":{"license.html":{}}}],["function",{"_index":146,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"unit-test.html":{}}}],["furnish",{"_index":516,"title":{},"body":{"license.html":{}}}],["gaug",{"_index":107,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["gauge.getvalu",{"_index":218,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["get",{"_index":56,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["getfieldnameprefix(metr",{"_index":272,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["getlog",{"_index":163,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["getmeasurementname(metr",{"_index":275,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["given",{"_index":127,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["grafana",{"_index":469,"title":{},"body":{"index.html":{}}}],["grant",{"_index":494,"title":{},"body":{"license.html":{}}}],["group",{"_index":388,"title":{},"body":{"changelog.html":{}}}],["handleresult",{"_index":195,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["herebi",{"_index":493,"title":{},"body":{"license.html":{}}}],["histogram",{"_index":108,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["histogram.getcount",{"_index":225,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["histogram.getsnapshot",{"_index":227,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["holder",{"_index":536,"title":{},"body":{"license.html":{}}}],["home",{"_index":480,"title":{},"body":{"index.html":{}}}],["homepag",{"_index":332,"title":{},"body":{"changelog.html":{}}}],["host",{"_index":450,"title":{},"body":{"index.html":{}}}],["http://localhost:3000",{"_index":476,"title":{},"body":{"index.html":{}}}],["https://github.com/doubret",{"_index":300,"title":{},"body":{"changelog.html":{}}}],["https://github.com/nod",{"_index":443,"title":{},"body":{"index.html":{}}}],["https://github.com/rstiller/inspector",{"_index":297,"title":{},"body":{"changelog.html":{}}}],["iclusterconfig",{"_index":25,"title":{},"body":{"classes/DefaultSender.html":{}}}],["identifi",{"_index":419,"title":{},"body":{"coverage.html":{}}}],["imag",{"_index":482,"title":{},"body":{"index.html":{}}}],["implement",{"_index":8,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["impli",{"_index":529,"title":{},"body":{"license.html":{}}}],["import",{"_index":63,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["includ",{"_index":505,"title":{},"body":{"license.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["indic",{"_index":44,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["influx",{"_index":36,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"dependencies.html":{},"index.html":{}}}],["influx/blob/master/src/index.ts#l80",{"_index":445,"title":{},"body":{"index.html":{}}}],["influx/issues/1",{"_index":313,"title":{},"body":{"changelog.html":{}}}],["influx/nod",{"_index":444,"title":{},"body":{"index.html":{}}}],["influx/pull/3",{"_index":298,"title":{},"body":{"changelog.html":{}}}],["influxdb",{"_index":9,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["influxdb(config",{"_index":73,"title":{},"body":{"classes/DefaultSender.html":{}}}],["influxmetricreport",{"_index":66,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"coverage.html":{},"index.html":{}}}],["influxmetricreporteropt",{"_index":93,"title":{"interfaces/InfluxMetricReporterOptions.html":{}},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"coverage.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["init",{"_index":20,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["initi",{"_index":125,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["inspector",{"_index":122,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"dependencies.html":{},"index.html":{}}}],["instal",{"_index":439,"title":{},"body":{"index.html":{}}}],["instanc",{"_index":29,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["instead",{"_index":337,"title":{},"body":{"changelog.html":{}}}],["interfac",{"_index":92,"title":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"coverage.html":{},"overview.html":{}}}],["interv",{"_index":142,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["introduc",{"_index":364,"title":{},"body":{"changelog.html":{}}}],["ipoint",{"_index":59,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["isnan(valu",{"_index":207,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["isreadi",{"_index":21,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["it'",{"_index":149,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["jenkin",{"_index":414,"title":{},"body":{"changelog.html":{}}}],["jenkinsfil",{"_index":340,"title":{},"body":{"changelog.html":{}}}],["jsdoc",{"_index":328,"title":{},"body":{"changelog.html":{}}}],["keep",{"_index":286,"title":{},"body":{"changelog.html":{}}}],["kind",{"_index":527,"title":{},"body":{"license.html":{}}}],["last",{"_index":361,"title":{},"body":{"changelog.html":{}}}],["left",{"_index":478,"title":{},"body":{"index.html":{}}}],["liabil",{"_index":540,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":537,"title":{},"body":{"license.html":{}}}],["lib/metrics/defaultsender.t",{"_index":5,"title":{},"body":{"classes/DefaultSender.html":{},"coverage.html":{}}}],["lib/metrics/defaultsender.ts:22",{"_index":40,"title":{},"body":{"classes/DefaultSender.html":{}}}],["lib/metrics/defaultsender.ts:30",{"_index":35,"title":{},"body":{"classes/DefaultSender.html":{}}}],["lib/metrics/defaultsender.ts:38",{"_index":27,"title":{},"body":{"classes/DefaultSender.html":{}}}],["lib/metrics/defaultsender.ts:56",{"_index":47,"title":{},"body":{"classes/DefaultSender.html":{}}}],["lib/metrics/defaultsender.ts:74",{"_index":55,"title":{},"body":{"classes/DefaultSender.html":{}}}],["lib/metrics/defaultsender.ts:84",{"_index":60,"title":{},"body":{"classes/DefaultSender.html":{}}}],["lib/metrics/influxmetricreporter.t",{"_index":94,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"coverage.html":{}}}],["lib/metrics/influxmetricreporter.ts:43",{"_index":277,"title":{},"body":{"interfaces/Sender.html":{}}}],["lib/metrics/influxmetricreporter.ts:51",{"_index":276,"title":{},"body":{"interfaces/Sender.html":{}}}],["lib/metrics/influxmetricreporter.ts:60",{"_index":278,"title":{},"body":{"interfaces/Sender.html":{}}}],["librari",{"_index":433,"title":{},"body":{"index.html":{}}}],["licens",{"_index":407,"title":{"license.html":{}},"body":{"changelog.html":{},"license.html":{}}}],["limit",{"_index":506,"title":{},"body":{"license.html":{}}}],["line",{"_index":552,"title":{},"body":{"unit-test.html":{}}}],["link",{"_index":128,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["lint",{"_index":331,"title":{},"body":{"changelog.html":{}}}],["local",{"_index":462,"title":{},"body":{"index.html":{}}}],["log",{"_index":97,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["logger",{"_index":98,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["logmetadata",{"_index":131,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["made",{"_index":434,"title":{},"body":{"index.html":{}}}],["map",{"_index":64,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"dependencies.html":{}}}],["match",{"_index":91,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"unit-test.html":{}}}],["meant",{"_index":437,"title":{},"body":{"index.html":{}}}],["measur",{"_index":211,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["memberof",{"_index":68,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["merchant",{"_index":530,"title":{},"body":{"license.html":{}}}],["merg",{"_index":509,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":130,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["meter",{"_index":109,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["meter.getcount",{"_index":251,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["method",{"_index":18,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/Sender.html":{}}}],["metric",{"_index":46,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"dependencies.html":{},"index.html":{}}}],["metric.getgroup",{"_index":273,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["metric.getnam",{"_index":274,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["metriclogg",{"_index":319,"title":{},"body":{"changelog.html":{}}}],["metricregistri",{"_index":110,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["metrics@1.16.0",{"_index":303,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.11.0",{"_index":334,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.13.0",{"_index":317,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.3.0",{"_index":398,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.4.2",{"_index":387,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.5.0",{"_index":385,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.5.1",{"_index":383,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.5.2",{"_index":377,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.5.4",{"_index":373,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.7.0",{"_index":371,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.8.2",{"_index":356,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.8.3",{"_index":348,"title":{},"body":{"changelog.html":{}}}],["metrics@v1.8.7",{"_index":344,"title":{},"body":{"changelog.html":{}}}],["metricsetreportcontext",{"_index":111,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["metrictyp",{"_index":112,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["millisecond",{"_index":113,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["minimum",{"_index":365,"title":{},"body":{"changelog.html":{}}}],["minreportingtimeout",{"_index":139,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["mit",{"_index":409,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["mocha",{"_index":411,"title":{},"body":{"changelog.html":{}}}],["modifi",{"_index":508,"title":{},"body":{"license.html":{}}}],["modul",{"_index":436,"title":{"modules.html":{}},"body":{"index.html":{},"modules.html":{}}}],["monotonecount",{"_index":114,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["name",{"_index":32,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["names.find((valu",{"_index":78,"title":{},"body":{"classes/DefaultSender.html":{}}}],["navig",{"_index":475,"title":{},"body":{"index.html":{}}}],["need",{"_index":464,"title":{},"body":{"index.html":{}}}],["new",{"_index":72,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"unit-test.html":{}}}],["node",{"_index":435,"title":{},"body":{"index.html":{}}}],["node/regist",{"_index":350,"title":{},"body":{"changelog.html":{}}}],["node10",{"_index":488,"title":{},"body":{"index.html":{}}}],["node11licens",{"_index":489,"title":{},"body":{"index.html":{}}}],["node6",{"_index":484,"title":{},"body":{"index.html":{}}}],["node7",{"_index":485,"title":{},"body":{"index.html":{}}}],["node8",{"_index":486,"title":{},"body":{"index.html":{}}}],["node9",{"_index":487,"title":{},"body":{"index.html":{}}}],["nodej",{"_index":301,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["nodejs.it",{"_index":438,"title":{},"body":{"index.html":{}}}],["noninfring",{"_index":534,"title":{},"body":{"license.html":{}}}],["notabl",{"_index":281,"title":{},"body":{"changelog.html":{}}}],["notic",{"_index":521,"title":{},"body":{"license.html":{}}}],["npm",{"_index":440,"title":{},"body":{"index.html":{}}}],["null",{"_index":99,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["number",{"_index":80,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["nyc",{"_index":416,"title":{},"body":{"changelog.html":{}}}],["object",{"_index":39,"title":{},"body":{"classes/DefaultSender.html":{}}}],["obtain",{"_index":498,"title":{},"body":{"license.html":{}}}],["option",{"_index":34,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["otherwis",{"_index":545,"title":{},"body":{"license.html":{}}}],["out",{"_index":547,"title":{},"body":{"license.html":{}}}],["overallctx",{"_index":176,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["overallreportcontext",{"_index":115,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["overview",{"_index":549,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":428,"title":{"dependencies.html":{}},"body":{}}],["package.json",{"_index":333,"title":{},"body":{"changelog.html":{}}}],["param",{"_index":69,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["paramet",{"_index":30,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/Sender.html":{}}}],["particular",{"_index":532,"title":{},"body":{"license.html":{}}}],["password",{"_index":449,"title":{},"body":{"index.html":{}}}],["permiss",{"_index":492,"title":{},"body":{"license.html":{}}}],["permit",{"_index":515,"title":{},"body":{"license.html":{}}}],["person",{"_index":497,"title":{},"body":{"license.html":{}}}],["pipelin",{"_index":415,"title":{},"body":{"changelog.html":{}}}],["playground",{"_index":302,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["playground.shview",{"_index":474,"title":{},"body":{"index.html":{}}}],["point",{"_index":62,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["point.timestamp",{"_index":178,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["port",{"_index":451,"title":{},"body":{"index.html":{}}}],["portion",{"_index":524,"title":{},"body":{"license.html":{}}}],["prefix",{"_index":271,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["privat",{"_index":14,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["process",{"_index":126,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["project",{"_index":282,"title":{},"body":{"changelog.html":{}}}],["promis",{"_index":54,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["promise((resolv",{"_index":197,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["promise.reject(new",{"_index":171,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["promise.resolv",{"_index":85,"title":{},"body":{"classes/DefaultSender.html":{}}}],["promise.resolve(this.readi",{"_index":88,"title":{},"body":{"classes/DefaultSender.html":{}}}],["properli",{"_index":362,"title":{},"body":{"changelog.html":{}}}],["properti",{"_index":13,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{}}}],["protect",{"_index":190,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["provid",{"_index":525,"title":{},"body":{"license.html":{}}}],["provis",{"_index":470,"title":{},"body":{"index.html":{}}}],["public",{"_index":19,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["publish",{"_index":510,"title":{},"body":{"license.html":{}}}],["purpos",{"_index":533,"title":{},"body":{"license.html":{}}}],["queue",{"_index":132,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["readi",{"_index":17,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["readm",{"_index":401,"title":{},"body":{"changelog.html":{}}}],["readonli",{"_index":129,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["reason",{"_index":184,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["refactor",{"_index":308,"title":{},"body":{"changelog.html":{}}}],["regist",{"_index":189,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["registri",{"_index":177,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["registry.newtimer(\"request",{"_index":455,"title":{},"body":{"index.html":{}}}],["reject",{"_index":198,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["remov",{"_index":339,"title":{},"body":{"changelog.html":{}}}],["report",{"_index":45,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"index.html":{}}}],["reportcount",{"_index":205,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["reporter.addmetricregistry(registri",{"_index":457,"title":{},"body":{"index.html":{}}}],["reporter.setlog(global.consol",{"_index":456,"title":{},"body":{"index.html":{}}}],["reporter.start",{"_index":458,"title":{},"body":{"index.html":{}}}],["reportevent>(ev",{"_index":168,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["reportgauge(gaug",{"_index":217,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["reporthistogram(histogram",{"_index":224,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["reportingresult",{"_index":116,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["reportinterv",{"_index":135,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["reportmeter(met",{"_index":250,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["reporttimer(tim",{"_index":262,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["request",{"_index":454,"title":{},"body":{"index.html":{}}}],["requests.tim",{"_index":460,"title":{},"body":{"index.html":{}}}],["resolv",{"_index":203,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["restrict",{"_index":504,"title":{},"body":{"license.html":{}}}],["result",{"_index":90,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"unit-test.html":{}}}],["result.result",{"_index":200,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["results.map((result",{"_index":199,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["return",{"_index":53,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["right",{"_index":507,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":390,"title":{},"body":{"changelog.html":{}}}],["run",{"_index":473,"title":{},"body":{"index.html":{}}}],["save",{"_index":441,"title":{},"body":{"index.html":{}}}],["schedul",{"_index":118,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["scheduledmetricreport",{"_index":117,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["scheduledmetricreporteropt",{"_index":96,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["script",{"_index":335,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["sell",{"_index":514,"title":{},"body":{"license.html":{}}}],["semant",{"_index":288,"title":{},"body":{"changelog.html":{}}}],["send",{"_index":22,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["send(point",{"_index":58,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["sender",{"_index":10,"title":{"interfaces/Sender.html":{}},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["senderreadi",{"_index":191,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["server",{"_index":102,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["servic",{"_index":468,"title":{},"body":{"index.html":{}}}],["set",{"_index":165,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["setinterv",{"_index":138,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["setlog(log",{"_index":166,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["setup",{"_index":374,"title":{},"body":{"changelog.html":{}}}],["shall",{"_index":522,"title":{},"body":{"license.html":{}}}],["sinon",{"_index":413,"title":{},"body":{"changelog.html":{}}}],["snapshot",{"_index":226,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["softwar",{"_index":500,"title":{},"body":{"license.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"dependencies.html":{}}}],["specifi",{"_index":61,"title":{},"body":{"classes/DefaultSender.html":{}}}],["start",{"_index":279,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["state",{"_index":57,"title":{},"body":{"classes/DefaultSender.html":{}}}],["statement",{"_index":420,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["stdclock",{"_index":119,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["stream",{"_index":306,"title":{},"body":{"changelog.html":{}}}],["string",{"_index":79,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["subject",{"_index":517,"title":{},"body":{"license.html":{}}}],["sublicens",{"_index":512,"title":{},"body":{"license.html":{}}}],["substanti",{"_index":523,"title":{},"body":{"license.html":{}}}],["super",{"_index":152,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["super.report",{"_index":193,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["support",{"_index":296,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["support/regist",{"_index":65,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["tabl",{"_index":427,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":426,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tag",{"_index":141,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["target",{"_index":323,"title":{},"body":{"changelog.html":{}}}],["task(callback",{"_index":159,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["test",{"_index":351,"title":{"unit-test.html":{}},"body":{"changelog.html":{},"index.html":{},"unit-test.html":{}}}],["tevent",{"_index":169,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["thank",{"_index":299,"title":{},"body":{"changelog.html":{}}}],["then((nam",{"_index":77,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.buildtags(ctx",{"_index":222,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.buildtags(ctx.registri",{"_index":214,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.config",{"_index":70,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.config.databas",{"_index":75,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.db",{"_index":71,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.db.createdatabase(databas",{"_index":84,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.db.getdatabasenam",{"_index":76,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.db.writepoints(point",{"_index":89,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.getfieldnameprefix(count",{"_index":210,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getfieldnameprefix(gaug",{"_index":219,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getfieldnameprefix(histogram",{"_index":228,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getfieldnameprefix(met",{"_index":252,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getfieldnameprefix(tim",{"_index":265,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getmeasurementname(count",{"_index":212,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getmeasurementname(gaug",{"_index":220,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getmeasurementname(histogram",{"_index":229,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getmeasurementname(met",{"_index":253,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getmeasurementname(tim",{"_index":266,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(meter.get15minuter",{"_index":255,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(meter.get1minuter",{"_index":257,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(meter.get5minuter",{"_index":259,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(meter.getmeanr",{"_index":261,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.get75thpercentil",{"_index":239,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.get95thpercentil",{"_index":241,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.get98thpercentil",{"_index":243,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.get999thpercentil",{"_index":247,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.get99thpercentil",{"_index":245,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.getmax",{"_index":231,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.getmean",{"_index":233,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.getmedian",{"_index":237,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.getmin",{"_index":235,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.getstddev",{"_index":249,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(timer.get15minuter",{"_index":267,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(timer.get1minuter",{"_index":268,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(timer.get5minuter",{"_index":269,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(timer.getmeanr",{"_index":270,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.handleresult",{"_index":181,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.logmetadata",{"_index":153,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.options.log",{"_index":164,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.options.log.debug(`wrot",{"_index":182,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.options.sender.init",{"_index":162,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.options.sender.isreadi",{"_index":192,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.options.sender.send(point",{"_index":201,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.queu",{"_index":154,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.queue.push((callback",{"_index":161,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.readi",{"_index":86,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.reportgauge(ev",{"_index":173,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["throw",{"_index":187,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["time",{"_index":143,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["timeout",{"_index":147,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["timer",{"_index":120,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["timer.getcount",{"_index":263,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["timer.getsnapshot",{"_index":264,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["timestamp",{"_index":215,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["timeunit",{"_index":121,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["tort",{"_index":544,"title":{},"body":{"license.html":{}}}],["transit",{"_index":304,"title":{},"body":{"changelog.html":{}}}],["travi",{"_index":320,"title":{},"body":{"changelog.html":{}}}],["tri",{"_index":179,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["trigger",{"_index":124,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["true",{"_index":87,"title":{},"body":{"classes/DefaultSender.html":{}}}],["ts:t",{"_index":349,"title":{},"body":{"changelog.html":{}}}],["tsdoc",{"_index":338,"title":{},"body":{"changelog.html":{}}}],["type",{"_index":33,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"coverage.html":{}}}],["typescript",{"_index":406,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["unchang",{"_index":366,"title":{},"body":{"changelog.html":{}}}],["under",{"_index":408,"title":{},"body":{"changelog.html":{}}}],["unit",{"_index":137,"title":{"unit-test.html":{}},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"unit-test.html":{}}}],["unlock",{"_index":160,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["unreleas",{"_index":290,"title":{},"body":{"changelog.html":{}}}],["updat",{"_index":309,"title":{},"body":{"changelog.html":{}}}],["upper",{"_index":477,"title":{},"body":{"index.html":{}}}],["us",{"_index":100,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["usag",{"_index":442,"title":{},"body":{"index.html":{}}}],["usernam",{"_index":447,"title":{},"body":{"index.html":{}}}],["valu",{"_index":42,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"changelog.html":{}}}],["value.localecompare(databas",{"_index":82,"title":{},"body":{"classes/DefaultSender.html":{}}}],["version",{"_index":289,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["void",{"_index":157,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["warranti",{"_index":526,"title":{},"body":{"license.html":{}}}],["wether",{"_index":148,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["whether",{"_index":541,"title":{},"body":{"license.html":{}}}],["without",{"_index":503,"title":{},"body":{"license.html":{}}}],["write",{"_index":186,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["zero",{"_index":381,"title":{},"body":{"changelog.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/DefaultSender.html":{"url":"classes/DefaultSender.html","title":"class - DefaultSender","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DefaultSender\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/DefaultSender.ts\n        \n\n            \n                Description\n            \n            \n                Default implementation for an influxdb sender.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Sender\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                config\n                            \n                            \n                                    Private\n                                db\n                            \n                            \n                                    Private\n                                ready\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                init\n                            \n                            \n                                    Public\n                                isReady\n                            \n                            \n                                    Public\n                                send\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(config: IClusterConfig)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/DefaultSender.ts:38\n                            \n                        \n\n                \n                    \n                            Creates an instance of DefaultSender.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    IClusterConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            config\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        config:     IClusterConfig\n\n                    \n                \n                    \n                        \n                            Type :     IClusterConfig\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/DefaultSender.ts:30\n                            \n                        \n\n                \n                    \n                        Influx client configuration object.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            db\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        db:     InfluxDB\n\n                    \n                \n                    \n                        \n                            Type :     InfluxDB\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/DefaultSender.ts:22\n                            \n                        \n\n                \n                    \n                        The influxdb client instance.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ready\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        ready:     boolean\n\n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/DefaultSender.ts:38\n                            \n                        \n\n                \n                    \n                        Indicates if he sender is ready to report metrics.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            init\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        init()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/DefaultSender.ts:56\n                            \n                        \n\n\n                \n                    \n                            Ensures that a database is existing before sending data.\n\n\n                            \n                                Returns :     Promise\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            isReady\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        isReady()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/DefaultSender.ts:74\n                            \n                        \n\n\n                \n                    \n                            Gets the ready state.\n\n\n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            send\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        send(points: IPoint[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/DefaultSender.ts:84\n                            \n                        \n\n\n                \n                    \n                            Sends the specified data points to the DB.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        points\n                                                        \n                                                                    IPoint[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { IClusterConfig, InfluxDB, IPoint } from \"influx\";\nimport { Sender } from \"./InfluxMetricReporter\";\n\n/**\n * Default implementation for an influxdb sender.\n *\n * @export\n * @class DefaultSender\n * @implements {Sender}\n */\nexport class DefaultSender implements Sender {\n\n    /**\n     * The influxdb client instance.\n     *\n     * @private\n     * @type {InfluxDB}\n     * @memberof DefaultSender\n     */\n    private db: InfluxDB;\n    /**\n     * Influx client configuration object.\n     *\n     * @private\n     * @type {IClusterConfig}\n     * @memberof DefaultSender\n     */\n    private config: IClusterConfig;\n    /**\n     * Indicates if he sender is ready to report metrics.\n     *\n     * @private\n     * @type {boolean}\n     * @memberof DefaultSender\n     */\n    private ready: boolean = false;\n\n    /**\n     * Creates an instance of DefaultSender.\n     *\n     * @param {IClusterConfig} config\n     * @memberof DefaultSender\n     */\n    public constructor(config: IClusterConfig) {\n        this.config = config;\n        this.db = new InfluxDB(config);\n    }\n\n    /**\n     * Ensures that a database is existing before sending data.\n     *\n     * @memberof DefaultSender\n     */\n    public init(): Promise {\n        const database = this.config.database;\n        return this.db.getDatabaseNames()\n            .then((names) => {\n                if (!names.find((value: string, index: number, arr: string[]) => value.localeCompare(database) === 0)) {\n                    return this.db.createDatabase(database);\n                }\n                return Promise.resolve();\n            })\n            .then(() => this.ready = true);\n    }\n\n    /**\n     * Gets the ready state.\n     *\n     * @returns {Promise}\n     * @memberof DefaultSender\n     */\n    public isReady(): Promise {\n        return Promise.resolve(this.ready);\n    }\n\n    /**\n     * Sends the specified data points to the DB.\n     *\n     * @param {IPoint[]} points\n     * @memberof DefaultSender\n     */\n    public send(points: IPoint[]): Promise {\n        return this.db.writePoints(points);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/InfluxMetricReporterOptions.html":{"url":"interfaces/InfluxMetricReporterOptions.html","title":"interface - InfluxMetricReporterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  InfluxMetricReporterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/InfluxMetricReporter.ts\n        \n\n            \n                Description\n            \n            \n                Options for InfluxMetricReporter.\n\n            \n\n            \n                Extends\n            \n            \n                    ScheduledMetricReporterOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        log\n                                \n                                \n                                        sender\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        log\n                                    \n                                \n                                \n                                    \n                                        log:     Logger | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Logger | null\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A logger instance used to report errors.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sender\n                                    \n                                \n                                \n                                    \n                                        sender:     Sender\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Sender\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A sender implementation used to send metrics to influx DB server.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport * as async from \"async\";\nimport { IPoint } from \"influx\";\nimport {\n    Clock,\n    Counter,\n    Event,\n    Gauge,\n    Histogram,\n    Logger,\n    Meter,\n    Metric,\n    MetricRegistry,\n    MetricSetReportContext,\n    MetricType,\n    MILLISECOND,\n    MonotoneCounter,\n    OverallReportContext,\n    ReportingResult,\n    ScheduledMetricReporter,\n    ScheduledMetricReporterOptions,\n    Scheduler,\n    StdClock,\n    Timer,\n    TimeUnit,\n} from \"inspector-metrics\";\n\n/**\n * Sender interface for influxdb client abstraction.\n *\n * @export\n * @interface Sender\n */\nexport interface Sender {\n\n    /**\n     * Indicates if the sender is ready to send data.\n     *\n     * @returns {Promise}\n     * @memberof Sender\n     */\n    isReady(): Promise;\n\n    /**\n     * Triggers the initialization process.\n     *\n     * @returns {Promise}\n     * @memberof Sender\n     */\n    init(): Promise;\n\n    /**\n     * Sends the given data points to influxdb.\n     *\n     * @param {IPoint[]} points\n     * @returns {Promise}\n     * @memberof Sender\n     */\n    send(points: IPoint[]): Promise;\n\n}\n\n/**\n * Options for {@link InfluxMetricReporter}.\n *\n * @export\n * @interface InfluxMetricReporterOptions\n * @extends {ScheduledMetricReporterOptions}\n */\nexport interface InfluxMetricReporterOptions extends ScheduledMetricReporterOptions {\n    /**\n     * A logger instance used to report errors.\n     *\n     * @type {(Logger | null)}\n     * @memberof InfluxMetricReporterOptions\n     */\n    log: Logger | null;\n    /**\n     * A sender implementation used to send metrics to influx DB server.\n     *\n     * @type {Sender}\n     * @memberof InfluxMetricReporterOptions\n     */\n    readonly sender: Sender;\n}\n\n/**\n * InfluxDB reporter implementation.\n *\n * @export\n * @class InfluxMetricReporter\n * @extends {ScheduledMetricReporter}\n */\nexport class InfluxMetricReporter extends ScheduledMetricReporter {\n\n    /**\n     * Metadata for the logger.\n     *\n     * @private\n     * @type {*}\n     * @memberof InfluxMetricReporter\n     */\n    private logMetadata: any;\n    /**\n     * async queue used to queue data point sending.\n     *\n     * @private\n     * @type {async.AsyncQueue}\n     * @memberof InfluxMetricReporter\n     */\n    private queue: async.AsyncQueue;\n\n    /**\n     * Creates an instance of InfluxMetricReporter.\n     *\n     * @memberof InfluxMetricReporter\n     */\n    public constructor({\n        sender,\n        log = console,\n        reportInterval = 1000,\n        unit = MILLISECOND,\n        clock = new StdClock(),\n        scheduler = setInterval,\n        minReportingTimeout = 1,\n        tags = new Map(),\n    }: {\n            /**\n             * A sender implementation used to send metrics to influx DB server.\n             * @type {Sender}\n             */\n            sender: Sender,\n            /**\n             * The logger instance used to report metrics.\n             * @type {(Logger | null)}\n             */\n            log?: Logger,\n            /**\n             * Reporting interval in the time-unit of {@link #unit}.\n             * @type {number}\n             */\n            reportInterval?: number;\n            /**\n             * The time-unit of the reporting interval.\n             * @type {TimeUnit}\n             */\n            unit?: TimeUnit;\n            /**\n             * The clock instance used determine the current time.\n             * @type {Clock}\n             */\n            clock?: Clock;\n            /**\n             * The scheduler function used to trigger reporting.\n             * @type {Scheduler}\n             */\n            scheduler?: Scheduler;\n            /**\n             * The timeout in which a metrics gets reported wether it's value has changed or not.\n             * @type {number}\n             */\n            minReportingTimeout?: number;\n            /**\n             * Common tags for this reporter instance.\n             * @type {Map}\n             */\n            tags?: Map;\n        }) {\n        super({\n            clock,\n            log,\n            minReportingTimeout,\n            reportInterval,\n            scheduler,\n            sender,\n            tags,\n            unit,\n        });\n\n        this.logMetadata = {\n            reportInterval,\n            tags,\n            unit,\n        };\n\n        this.queue = async.queue((task: (clb: () => void) => void, callback: () => void) => {\n            task(callback);\n        }, 1);\n\n        let unlock: () => void = null;\n        this.queue.push((callback: () => void) => {\n            unlock = callback;\n        });\n\n        this.options.sender.init()\n            .then(() => unlock());\n    }\n\n    /**\n     * Gets the logger instance.\n     *\n     * @returns {Logger}\n     * @memberof InfluxMetricReporter\n     */\n    public getLog(): Logger {\n        return this.options.log;\n    }\n\n    /**\n     * Sets the logger instance.\n     *\n     * @param {(Logger | null)} log\n     * @memberof InfluxMetricReporter\n     */\n    public setLog(log: Logger | null): void {\n        this.options.log = log;\n    }\n\n    /**\n     * Sends an event directly to influxdb.\n     *\n     * @param {Event} event\n     * @memberof InfluxMetricReporter\n     */\n    public async reportEvent>(event: TEvent): Promise {\n        const value = event.getValue();\n        if (!value) {\n            return Promise.reject(new Error(\"Invalid event value\"));\n        }\n\n        const point = this.reportGauge(event, {\n            date: event.getTime(),\n            metrics: [],\n            overallCtx: {},\n            registry: null,\n            type: \"gauge\",\n        });\n        point.timestamp = event.getTime();\n\n        try {\n            await this.handleResults({}, null, null, \"gauge\", [{\n                metric: event,\n                result: point,\n            }]);\n\n            if (this.options.log) {\n                this.options.log.debug(`wrote event`, this.logMetadata);\n            }\n            return event;\n        } catch (reason) {\n            if (this.options.log) {\n                this.options.log\n                    .error(`error writing event - reason: ${reason}`, reason, this.logMetadata);\n            }\n            throw reason;\n        }\n    }\n\n    /**\n     * Reports the data points for each registered {@link MetricRegistry}.\n     *\n     * @protected\n     * @memberof InfluxMetricReporter\n     */\n    protected async report(): Promise {\n        const senderReady = await this.options.sender.isReady();\n        if (senderReady) {\n            return await super.report();\n        }\n        return {};\n    }\n\n    /**\n     * Uses the sender to report the given data points.\n     *\n     * @protected\n     * @param {MetricRegistry} registry\n     * @param {Date} date\n     * @param {MetricType} type\n     * @param {Array>} results\n     * @returns {Promise}\n     * @memberof InfluxMetricReporter\n     */\n    protected handleResults(\n        ctx: OverallReportContext,\n        registry: MetricRegistry,\n        date: Date,\n        type: MetricType,\n        results: Array>): Promise {\n        return new Promise((resolve, reject) => {\n            this.queue.push((callback: () => void) => {\n                const points = results.map((result) => result.result);\n                this.options.sender.send(points)\n                    .then(() => {\n                        if (this.options.log) {\n                            this.options.log.debug(`wrote ${type} metrics`, this.logMetadata);\n                        }\n                    })\n                    .catch((reason) => {\n                        if (this.options.log) {\n                            this.options.log\n                                .error(`error writing ${type} metrics - reason: ${reason}`, reason, this.logMetadata);\n                        }\n                    })\n                    .then(() => callback())\n                    .then(() => resolve());\n            });\n        });\n    }\n\n    /**\n     * Builds an IPoint instance for the given {@link Counter} or  {@link MonotoneCounter}.\n     *\n     * @protected\n     * @param {(MonotoneCounter | Counter)} counter\n     * @param {(MetricSetReportContext)} ctx\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    protected reportCounter(\n        counter: MonotoneCounter | Counter,\n        ctx: MetricSetReportContext): IPoint {\n        const value = counter.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(counter);\n        const measurement = this.getMeasurementName(counter);\n\n        fields[`${fieldNamePrefix}count`] = counter.getCount() || 0;\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(ctx.registry, counter),\n            timestamp: ctx.date,\n        };\n    }\n\n    /**\n     * Builds an IPoint instance for the given {@link Gauge}.\n     *\n     * @protected\n     * @param {Gauge} gauge\n     * @param {MetricSetReportContext>} ctx\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    protected reportGauge(gauge: Gauge, ctx: MetricSetReportContext>): IPoint {\n        const value = gauge.getValue();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(gauge);\n        const measurement = this.getMeasurementName(gauge);\n\n        fields[`${fieldNamePrefix}value`] = gauge.getValue() || 0;\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(ctx ? ctx.registry : null, gauge),\n            timestamp: ctx.date,\n        };\n    }\n\n    /**\n     * Builds an IPoint instance for the given {@link Histogram}.\n     *\n     * @protected\n     * @param {Histogram} histogram\n     * @param {MetricSetReportContext} ctx\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    protected reportHistogram(histogram: Histogram, ctx: MetricSetReportContext): IPoint {\n        const value = histogram.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = histogram.getSnapshot();\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(histogram);\n        const measurement = this.getMeasurementName(histogram);\n\n        fields[`${fieldNamePrefix}count`] = histogram.getCount() || 0;\n        fields[`${fieldNamePrefix}max`] = this.getNumber(snapshot.getMax());\n        fields[`${fieldNamePrefix}mean`] = this.getNumber(snapshot.getMean());\n        fields[`${fieldNamePrefix}min`] = this.getNumber(snapshot.getMin());\n        fields[`${fieldNamePrefix}p50`] = this.getNumber(snapshot.getMedian());\n        fields[`${fieldNamePrefix}p75`] = this.getNumber(snapshot.get75thPercentile());\n        fields[`${fieldNamePrefix}p95`] = this.getNumber(snapshot.get95thPercentile());\n        fields[`${fieldNamePrefix}p98`] = this.getNumber(snapshot.get98thPercentile());\n        fields[`${fieldNamePrefix}p99`] = this.getNumber(snapshot.get99thPercentile());\n        fields[`${fieldNamePrefix}p999`] = this.getNumber(snapshot.get999thPercentile());\n        fields[`${fieldNamePrefix}stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(ctx.registry, histogram),\n            timestamp: ctx.date,\n        };\n    }\n\n    /**\n     * Builds an IPoint instance for the given {@link Meter}.\n     *\n     * @protected\n     * @param {Meter} meter\n     * @param {MetricSetReportContext} ctx\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    protected reportMeter(meter: Meter, ctx: MetricSetReportContext): IPoint {\n        const value = meter.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(meter);\n        const measurement = this.getMeasurementName(meter);\n\n        fields[`${fieldNamePrefix}count`] = meter.getCount() || 0;\n        fields[`${fieldNamePrefix}m15_rate`] = this.getNumber(meter.get15MinuteRate());\n        fields[`${fieldNamePrefix}m1_rate`] = this.getNumber(meter.get1MinuteRate());\n        fields[`${fieldNamePrefix}m5_rate`] = this.getNumber(meter.get5MinuteRate());\n        fields[`${fieldNamePrefix}mean_rate`] = this.getNumber(meter.getMeanRate());\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(ctx.registry, meter),\n            timestamp: ctx.date,\n        };\n    }\n\n    /**\n     * Builds an IPoint instance for the given {@link Timer}.\n     *\n     * @protected\n     * @param {Timer} timer\n     * @param {MetricSetReportContext} ctx\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    protected reportTimer(timer: Timer, ctx: MetricSetReportContext): IPoint {\n        const value = timer.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = timer.getSnapshot();\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(timer);\n        const measurement = this.getMeasurementName(timer);\n\n        fields[`${fieldNamePrefix}count`] = timer.getCount() || 0;\n        fields[`${fieldNamePrefix}m15_rate`] = this.getNumber(timer.get15MinuteRate());\n        fields[`${fieldNamePrefix}m1_rate`] = this.getNumber(timer.get1MinuteRate());\n        fields[`${fieldNamePrefix}m5_rate`] = this.getNumber(timer.get5MinuteRate());\n        fields[`${fieldNamePrefix}max`] = this.getNumber(snapshot.getMax());\n        fields[`${fieldNamePrefix}mean`] = this.getNumber(snapshot.getMean());\n        fields[`${fieldNamePrefix}mean_rate`] = this.getNumber(timer.getMeanRate());\n        fields[`${fieldNamePrefix}min`] = this.getNumber(snapshot.getMin());\n        fields[`${fieldNamePrefix}p50`] = this.getNumber(snapshot.getMedian());\n        fields[`${fieldNamePrefix}p75`] = this.getNumber(snapshot.get75thPercentile());\n        fields[`${fieldNamePrefix}p95`] = this.getNumber(snapshot.get95thPercentile());\n        fields[`${fieldNamePrefix}p98`] = this.getNumber(snapshot.get98thPercentile());\n        fields[`${fieldNamePrefix}p99`] = this.getNumber(snapshot.get99thPercentile());\n        fields[`${fieldNamePrefix}p999`] = this.getNumber(snapshot.get999thPercentile());\n        fields[`${fieldNamePrefix}stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(ctx.registry, timer),\n            timestamp: ctx.date,\n        };\n    }\n\n    /**\n     * Builds the prefix for a field name.\n     *\n     * @private\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof InfluxMetricReporter\n     */\n    private getFieldNamePrefix(metric: Metric): string {\n        if (metric.getGroup()) {\n            return `${metric.getName()}.`;\n        }\n        return \"\";\n    }\n\n    /**\n     * Builds the prefix for the metric name.\n     *\n     * @private\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof InfluxMetricReporter\n     */\n    private getMeasurementName(metric: Metric): string {\n        if (metric.getGroup()) {\n            return metric.getGroup();\n        }\n        return metric.getName();\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Sender.html":{"url":"interfaces/Sender.html","title":"interface - Sender","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Sender\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/InfluxMetricReporter.ts\n        \n\n            \n                Description\n            \n            \n                Sender interface for influxdb client abstraction.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    init\n                                \n                                \n                                    isReady\n                                \n                                \n                                    send\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            init\n                            \n                            \n                        \n                    \n                \n                \n                    \ninit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/InfluxMetricReporter.ts:51\n                            \n                        \n\n\n                \n                    \n                            Triggers the initialization process.\n\n\n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isReady\n                            \n                            \n                        \n                    \n                \n                \n                    \nisReady()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/InfluxMetricReporter.ts:43\n                            \n                        \n\n\n                \n                    \n                            Indicates if the sender is ready to send data.\n\n\n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            send\n                            \n                            \n                        \n                    \n                \n                \n                    \nsend(points: IPoint[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/InfluxMetricReporter.ts:60\n                            \n                        \n\n\n                \n                    \n                            Sends the given data points to influxdb.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        points\n                                                        \n                                                                    IPoint[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport * as async from \"async\";\nimport { IPoint } from \"influx\";\nimport {\n    Clock,\n    Counter,\n    Event,\n    Gauge,\n    Histogram,\n    Logger,\n    Meter,\n    Metric,\n    MetricRegistry,\n    MetricSetReportContext,\n    MetricType,\n    MILLISECOND,\n    MonotoneCounter,\n    OverallReportContext,\n    ReportingResult,\n    ScheduledMetricReporter,\n    ScheduledMetricReporterOptions,\n    Scheduler,\n    StdClock,\n    Timer,\n    TimeUnit,\n} from \"inspector-metrics\";\n\n/**\n * Sender interface for influxdb client abstraction.\n *\n * @export\n * @interface Sender\n */\nexport interface Sender {\n\n    /**\n     * Indicates if the sender is ready to send data.\n     *\n     * @returns {Promise}\n     * @memberof Sender\n     */\n    isReady(): Promise;\n\n    /**\n     * Triggers the initialization process.\n     *\n     * @returns {Promise}\n     * @memberof Sender\n     */\n    init(): Promise;\n\n    /**\n     * Sends the given data points to influxdb.\n     *\n     * @param {IPoint[]} points\n     * @returns {Promise}\n     * @memberof Sender\n     */\n    send(points: IPoint[]): Promise;\n\n}\n\n/**\n * Options for {@link InfluxMetricReporter}.\n *\n * @export\n * @interface InfluxMetricReporterOptions\n * @extends {ScheduledMetricReporterOptions}\n */\nexport interface InfluxMetricReporterOptions extends ScheduledMetricReporterOptions {\n    /**\n     * A logger instance used to report errors.\n     *\n     * @type {(Logger | null)}\n     * @memberof InfluxMetricReporterOptions\n     */\n    log: Logger | null;\n    /**\n     * A sender implementation used to send metrics to influx DB server.\n     *\n     * @type {Sender}\n     * @memberof InfluxMetricReporterOptions\n     */\n    readonly sender: Sender;\n}\n\n/**\n * InfluxDB reporter implementation.\n *\n * @export\n * @class InfluxMetricReporter\n * @extends {ScheduledMetricReporter}\n */\nexport class InfluxMetricReporter extends ScheduledMetricReporter {\n\n    /**\n     * Metadata for the logger.\n     *\n     * @private\n     * @type {*}\n     * @memberof InfluxMetricReporter\n     */\n    private logMetadata: any;\n    /**\n     * async queue used to queue data point sending.\n     *\n     * @private\n     * @type {async.AsyncQueue}\n     * @memberof InfluxMetricReporter\n     */\n    private queue: async.AsyncQueue;\n\n    /**\n     * Creates an instance of InfluxMetricReporter.\n     *\n     * @memberof InfluxMetricReporter\n     */\n    public constructor({\n        sender,\n        log = console,\n        reportInterval = 1000,\n        unit = MILLISECOND,\n        clock = new StdClock(),\n        scheduler = setInterval,\n        minReportingTimeout = 1,\n        tags = new Map(),\n    }: {\n            /**\n             * A sender implementation used to send metrics to influx DB server.\n             * @type {Sender}\n             */\n            sender: Sender,\n            /**\n             * The logger instance used to report metrics.\n             * @type {(Logger | null)}\n             */\n            log?: Logger,\n            /**\n             * Reporting interval in the time-unit of {@link #unit}.\n             * @type {number}\n             */\n            reportInterval?: number;\n            /**\n             * The time-unit of the reporting interval.\n             * @type {TimeUnit}\n             */\n            unit?: TimeUnit;\n            /**\n             * The clock instance used determine the current time.\n             * @type {Clock}\n             */\n            clock?: Clock;\n            /**\n             * The scheduler function used to trigger reporting.\n             * @type {Scheduler}\n             */\n            scheduler?: Scheduler;\n            /**\n             * The timeout in which a metrics gets reported wether it's value has changed or not.\n             * @type {number}\n             */\n            minReportingTimeout?: number;\n            /**\n             * Common tags for this reporter instance.\n             * @type {Map}\n             */\n            tags?: Map;\n        }) {\n        super({\n            clock,\n            log,\n            minReportingTimeout,\n            reportInterval,\n            scheduler,\n            sender,\n            tags,\n            unit,\n        });\n\n        this.logMetadata = {\n            reportInterval,\n            tags,\n            unit,\n        };\n\n        this.queue = async.queue((task: (clb: () => void) => void, callback: () => void) => {\n            task(callback);\n        }, 1);\n\n        let unlock: () => void = null;\n        this.queue.push((callback: () => void) => {\n            unlock = callback;\n        });\n\n        this.options.sender.init()\n            .then(() => unlock());\n    }\n\n    /**\n     * Gets the logger instance.\n     *\n     * @returns {Logger}\n     * @memberof InfluxMetricReporter\n     */\n    public getLog(): Logger {\n        return this.options.log;\n    }\n\n    /**\n     * Sets the logger instance.\n     *\n     * @param {(Logger | null)} log\n     * @memberof InfluxMetricReporter\n     */\n    public setLog(log: Logger | null): void {\n        this.options.log = log;\n    }\n\n    /**\n     * Sends an event directly to influxdb.\n     *\n     * @param {Event} event\n     * @memberof InfluxMetricReporter\n     */\n    public async reportEvent>(event: TEvent): Promise {\n        const value = event.getValue();\n        if (!value) {\n            return Promise.reject(new Error(\"Invalid event value\"));\n        }\n\n        const point = this.reportGauge(event, {\n            date: event.getTime(),\n            metrics: [],\n            overallCtx: {},\n            registry: null,\n            type: \"gauge\",\n        });\n        point.timestamp = event.getTime();\n\n        try {\n            await this.handleResults({}, null, null, \"gauge\", [{\n                metric: event,\n                result: point,\n            }]);\n\n            if (this.options.log) {\n                this.options.log.debug(`wrote event`, this.logMetadata);\n            }\n            return event;\n        } catch (reason) {\n            if (this.options.log) {\n                this.options.log\n                    .error(`error writing event - reason: ${reason}`, reason, this.logMetadata);\n            }\n            throw reason;\n        }\n    }\n\n    /**\n     * Reports the data points for each registered {@link MetricRegistry}.\n     *\n     * @protected\n     * @memberof InfluxMetricReporter\n     */\n    protected async report(): Promise {\n        const senderReady = await this.options.sender.isReady();\n        if (senderReady) {\n            return await super.report();\n        }\n        return {};\n    }\n\n    /**\n     * Uses the sender to report the given data points.\n     *\n     * @protected\n     * @param {MetricRegistry} registry\n     * @param {Date} date\n     * @param {MetricType} type\n     * @param {Array>} results\n     * @returns {Promise}\n     * @memberof InfluxMetricReporter\n     */\n    protected handleResults(\n        ctx: OverallReportContext,\n        registry: MetricRegistry,\n        date: Date,\n        type: MetricType,\n        results: Array>): Promise {\n        return new Promise((resolve, reject) => {\n            this.queue.push((callback: () => void) => {\n                const points = results.map((result) => result.result);\n                this.options.sender.send(points)\n                    .then(() => {\n                        if (this.options.log) {\n                            this.options.log.debug(`wrote ${type} metrics`, this.logMetadata);\n                        }\n                    })\n                    .catch((reason) => {\n                        if (this.options.log) {\n                            this.options.log\n                                .error(`error writing ${type} metrics - reason: ${reason}`, reason, this.logMetadata);\n                        }\n                    })\n                    .then(() => callback())\n                    .then(() => resolve());\n            });\n        });\n    }\n\n    /**\n     * Builds an IPoint instance for the given {@link Counter} or  {@link MonotoneCounter}.\n     *\n     * @protected\n     * @param {(MonotoneCounter | Counter)} counter\n     * @param {(MetricSetReportContext)} ctx\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    protected reportCounter(\n        counter: MonotoneCounter | Counter,\n        ctx: MetricSetReportContext): IPoint {\n        const value = counter.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(counter);\n        const measurement = this.getMeasurementName(counter);\n\n        fields[`${fieldNamePrefix}count`] = counter.getCount() || 0;\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(ctx.registry, counter),\n            timestamp: ctx.date,\n        };\n    }\n\n    /**\n     * Builds an IPoint instance for the given {@link Gauge}.\n     *\n     * @protected\n     * @param {Gauge} gauge\n     * @param {MetricSetReportContext>} ctx\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    protected reportGauge(gauge: Gauge, ctx: MetricSetReportContext>): IPoint {\n        const value = gauge.getValue();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(gauge);\n        const measurement = this.getMeasurementName(gauge);\n\n        fields[`${fieldNamePrefix}value`] = gauge.getValue() || 0;\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(ctx ? ctx.registry : null, gauge),\n            timestamp: ctx.date,\n        };\n    }\n\n    /**\n     * Builds an IPoint instance for the given {@link Histogram}.\n     *\n     * @protected\n     * @param {Histogram} histogram\n     * @param {MetricSetReportContext} ctx\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    protected reportHistogram(histogram: Histogram, ctx: MetricSetReportContext): IPoint {\n        const value = histogram.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = histogram.getSnapshot();\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(histogram);\n        const measurement = this.getMeasurementName(histogram);\n\n        fields[`${fieldNamePrefix}count`] = histogram.getCount() || 0;\n        fields[`${fieldNamePrefix}max`] = this.getNumber(snapshot.getMax());\n        fields[`${fieldNamePrefix}mean`] = this.getNumber(snapshot.getMean());\n        fields[`${fieldNamePrefix}min`] = this.getNumber(snapshot.getMin());\n        fields[`${fieldNamePrefix}p50`] = this.getNumber(snapshot.getMedian());\n        fields[`${fieldNamePrefix}p75`] = this.getNumber(snapshot.get75thPercentile());\n        fields[`${fieldNamePrefix}p95`] = this.getNumber(snapshot.get95thPercentile());\n        fields[`${fieldNamePrefix}p98`] = this.getNumber(snapshot.get98thPercentile());\n        fields[`${fieldNamePrefix}p99`] = this.getNumber(snapshot.get99thPercentile());\n        fields[`${fieldNamePrefix}p999`] = this.getNumber(snapshot.get999thPercentile());\n        fields[`${fieldNamePrefix}stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(ctx.registry, histogram),\n            timestamp: ctx.date,\n        };\n    }\n\n    /**\n     * Builds an IPoint instance for the given {@link Meter}.\n     *\n     * @protected\n     * @param {Meter} meter\n     * @param {MetricSetReportContext} ctx\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    protected reportMeter(meter: Meter, ctx: MetricSetReportContext): IPoint {\n        const value = meter.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(meter);\n        const measurement = this.getMeasurementName(meter);\n\n        fields[`${fieldNamePrefix}count`] = meter.getCount() || 0;\n        fields[`${fieldNamePrefix}m15_rate`] = this.getNumber(meter.get15MinuteRate());\n        fields[`${fieldNamePrefix}m1_rate`] = this.getNumber(meter.get1MinuteRate());\n        fields[`${fieldNamePrefix}m5_rate`] = this.getNumber(meter.get5MinuteRate());\n        fields[`${fieldNamePrefix}mean_rate`] = this.getNumber(meter.getMeanRate());\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(ctx.registry, meter),\n            timestamp: ctx.date,\n        };\n    }\n\n    /**\n     * Builds an IPoint instance for the given {@link Timer}.\n     *\n     * @protected\n     * @param {Timer} timer\n     * @param {MetricSetReportContext} ctx\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    protected reportTimer(timer: Timer, ctx: MetricSetReportContext): IPoint {\n        const value = timer.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = timer.getSnapshot();\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(timer);\n        const measurement = this.getMeasurementName(timer);\n\n        fields[`${fieldNamePrefix}count`] = timer.getCount() || 0;\n        fields[`${fieldNamePrefix}m15_rate`] = this.getNumber(timer.get15MinuteRate());\n        fields[`${fieldNamePrefix}m1_rate`] = this.getNumber(timer.get1MinuteRate());\n        fields[`${fieldNamePrefix}m5_rate`] = this.getNumber(timer.get5MinuteRate());\n        fields[`${fieldNamePrefix}max`] = this.getNumber(snapshot.getMax());\n        fields[`${fieldNamePrefix}mean`] = this.getNumber(snapshot.getMean());\n        fields[`${fieldNamePrefix}mean_rate`] = this.getNumber(timer.getMeanRate());\n        fields[`${fieldNamePrefix}min`] = this.getNumber(snapshot.getMin());\n        fields[`${fieldNamePrefix}p50`] = this.getNumber(snapshot.getMedian());\n        fields[`${fieldNamePrefix}p75`] = this.getNumber(snapshot.get75thPercentile());\n        fields[`${fieldNamePrefix}p95`] = this.getNumber(snapshot.get95thPercentile());\n        fields[`${fieldNamePrefix}p98`] = this.getNumber(snapshot.get98thPercentile());\n        fields[`${fieldNamePrefix}p99`] = this.getNumber(snapshot.get99thPercentile());\n        fields[`${fieldNamePrefix}p999`] = this.getNumber(snapshot.get999thPercentile());\n        fields[`${fieldNamePrefix}stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(ctx.registry, timer),\n            timestamp: ctx.date,\n        };\n    }\n\n    /**\n     * Builds the prefix for a field name.\n     *\n     * @private\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof InfluxMetricReporter\n     */\n    private getFieldNamePrefix(metric: Metric): string {\n        if (metric.getGroup()) {\n            return `${metric.getName()}.`;\n        }\n        return \"\";\n    }\n\n    /**\n     * Builds the prefix for the metric name.\n     *\n     * @private\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof InfluxMetricReporter\n     */\n    private getMeasurementName(metric: Metric): string {\n        if (metric.getGroup()) {\n            return metric.getGroup();\n        }\n        return metric.getName();\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file.\nThe format is based on Keep a Changelog,\nand this project adheres to Semantic Versioning.\n[Unreleased]\n[2.2.0] - 2018-11-27\nAdded\n\nsupport for reporting events\nhttps://github.com/rstiller/inspector-influx/pull/3\nthanks to https://github.com/doubret\n\n\n\nChanged\n\nadded nodejs 11 to playground\nuse inspector-metrics@1.16.0\nset version of transitive dependency event-stream to 3.3.4\nrefactored playground\nupdated documentation\n\n[2.1.0] - 2018-11-21\nChanged\n\nallow logger to be null - resolves https://github.com/rstiller/inspector-influx/issues/1\n\n[2.0.0] - 2018-11-04\nAdded\n\nchangelog\nsupport for nodejs 6\n\nChanged\n\nupdated dependencies\nuse inspector-metrics@v1.13.0\nadapted new MetricLogger implementation\nadded nodejs 11 to travis-ci config\ncompile target from \"es2017\" to \"es6\"\n\n[1.5.0] - 2018-10-04\nAdded\n\nsupport for MonotoneCounter\njsdoc for components\n\nChanged\n\nfixed linting errors / config\n\"description\" & \"homepage\" in package.json\nupdated dependencies\nuse inspector-metrics@v1.11.0\nrefactored build scripts\nrefactored playground\nuse compodoc instead of tsdoc\n\nRemoved\n\nJenkinsfile\n\n[1.4.5] - 2018-07-08\nChanged\n\nadded nodejs 10 to travis-ci config\nupdated dependencies\nuse inspector-metrics@v1.8.7\n\n[1.4.4] - 2017-11-20\nChanged\n\nupdated dependencies\nuse inspector-metrics@v1.8.3\n\nRemoved\n\n\"ts:ts-node/register\" option from test config\n\n[1.4.3] - 2017-11-19\nChanged\n\nupdated dependencies\nadded nodejs 8 & 9 to travis-ci config\nuse inspector-metrics@v1.8.2\n\n[1.4.2] - 2017-09-28\nChanged\n\nfixed bug: update last report date properly\n\n[1.4.1] - 2017-09-28\nAdded\n\nintroduced minimum reporting timeout (send unchanged values after a certain time)\n\n[1.4.0] - 2017-08-26\nAdded\n\ndon't send unchanged metric values\n\nChanged\n\nuse inspector-metrics@v1.7.0\n\n[1.3.0] - 2017-08-26\nChanged\n\nupdated dependencies\nuse inspector-metrics@v1.5.4\nrefactored / updated playground setup\n\n[1.2.5] - 2017-08-01\nChanged\n\nuse inspector-metrics@v1.5.2\n\n[1.2.4] - 2017-08-01\nAdded\n\ntravis-ci config file\n\nChanged\n\nupdated dependencies\n\n[1.2.3] - 2017-06-10\nChanged\n\ndefault for not existing values is zero (0)\n\n[1.2.2] - 2017-06-10\nChanged\n\nuse inspector-metrics@v1.5.1\n\n[1.2.1] - 2017-06-10\nChanged\n\nuse inspector-metrics@v1.5.0\nrefactored test config\n\n[1.2.0] - 2017-06-10\nAdded\n\nSender interface and DefaultSender implementation\n\nChanged\n\nuse inspector-metrics@v1.4.2\ncompile target from \"es6\" to \"es2017\"\nuse metric group in measurement name\n\n[1.1.2] - 2017-06-07\nChanged\n\nuse rimraf in build\nfixed bug: check if value is null before reporting\n\n[1.1.1] - 2017-06-01\nAdded\n\nplayground setup and script\n\n[1.1.0] - 2017-05-30\nAdded\n\neditorconfig file\nbuild script\n\nChanged\n\nadjusted reporter to match inspector-metrics@v1.3.0\n\n[1.0.2] - 2017-05-11\nChanged\n\nrefactored tests\n\n[1.0.1] - 2017-04-06\nAdded\n\ndocumentation in README\n\n[1.0.0] - 2017-03-31\nInitial commit.\nAdded\n\nproject setup\nREADME\ntypescript config\nlint config\n\n\nlicensed under MIT license\nbasic influx reporter implementation\nmocha testing (with chai, sinon)\nJenkins pipeline\nNYC code-coverage config\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/metrics/DefaultSender.ts\n            \n            \n                class\n            \n            \n                DefaultSender\n            \n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                lib/metrics/InfluxMetricReporter.ts\n            \n            \n                class\n            \n            \n                InfluxMetricReporter\n            \n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                lib/metrics/InfluxMetricReporter.ts\n            \n            \n                interface\n            \n            \n                InfluxMetricReporterOptions\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/metrics/InfluxMetricReporter.ts\n            \n            \n                interface\n            \n            \n                Sender\n            \n            \n                100 %\n                (4/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            async : ^2.6.1\n        \n            influx : ^5.0.7\n        \n            inspector-metrics : ^1.16.0\n        \n            source-map-support : ^0.5.9\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\ninspector-influx\nTypescript Metrics Reporter for\nInfluxDB.\n\n    \n        \n    \n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\nThis library is made for inspector-metrics node module and\nis meant to be used with nodejs.It uses node-influx as influxdb client.\ninstall\nnpm install --save inspector-influx\nbasic usage\nimport { DefaultSender, InfluxMetricReporter } from \"inspector-influx\";\nimport { MetricRegistry, Timer } from \"inspector-metrics\";\n\n// influxdb config from https://github.com/node-influx/node-influx/blob/master/src/index.ts#L80\nconst dbConfig = {\n    \"username\": \"admin\",\n    \"password\": \"admin\",\n    \"database\": \"example-db\",\n    \"hosts\": [\n        { \"host\": \"influx\", \"port\": 8086 }\n    ]\n};\n\nconst sender = new DefaultSender(dbConfig);\nconst reporter: InfluxMetricReporter = new InfluxMetricReporter({\n    sender,\n});\nconst registry: MetricRegistry = new MetricRegistry();\nconst requests: Timer = registry.newTimer(\"requests\");\n\nreporter.setLog(global.console);\nreporter.addMetricRegistry(registry);\n\nreporter.start();\n\n// example usage\nsetInterval(() => {\n    // should report a few milliseconds\n    requests.time(() => {\n        let a = 0;\n        let b = 1;\n        for (let i = 0; i local dev\nusing the playground\nTo use the playground you need to have docker and docker-compose installed.\n# boots all services (influxdb / grafana) and provisions the example dashboard\ntest-env/boot.sh\n# running playground script\n./playground.shview data in grafana\n\nNavigate to http://localhost:3000\nNavigate to the example dashboard (upper left corner \"Home\"): \"Example InfluxDB Dashboard\"\n\n\ncompile & test with different nodejs versions\nbuild docker images:  \ndocker-compose buildrun tests:  \ndocker-compose run node6\ndocker-compose run node7\ndocker-compose run node8\ndocker-compose run node9\ndocker-compose run node10\ndocker-compose run node11License\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2017 \nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"unit-test.html":{"url":"unit-test.html","title":"unit-test - unit-test","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Unit test coverage\n\n\n\n    \n    \n    \n    \n\n\n\n    \n        \n            File\n            Statements\n            Branches\n            Functions\n            Lines\n        \n    \n    \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
